;; Compile Options : /TML620504F /MS /near /IC:\LAZURI~1\LIBRAR~1\BM1383 /IC:\LAZURI~1\LIBRAR~1\BM1422 /IC:\LAZURI~1\LIBRAR~1\HARDWA~1 /IC:\LAZURI~1\LIBRAR~1\HARDWA~2 /IC:\LAZURI~1\LIBRAR~1\KXG03_~1 /IC:\LAZURI~1\LIBRAR~1\VL53L0X /IC:\LAZURI~1\LIBRAR~1\Wire /IC:\LAZURI~1\hardware\LAZURI~2 /IC:\LAZURI~1\hardware\LAZURI~2\lazurite /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\clock /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\common /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\irq /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\lp /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\MCU_SM~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\wdt /IC:\LAZURI~1\hardware\LAZURI~2\sub_ghz\ /D_ML620Q504 /DLAZURITE_MINI /DLAZURITE_IDE /DSUBGHZ /DPWR_LED /DLDO_CNT /SS 512 /SL 65 /SD /Oa /Ot /W 3 /Faobj\ /Lv 
;; Version Number  : Ver.3.53.1
;; File Name       : phy_ml7396.c

	type (ML620504F) 
	model small, near
	$$NVARphy_ml7396 segment data 2h #0h
	$$NINITVAR segment data 2h #0h
	$$NINITTAB segment table 2h any
	$$TABevent_enable$phy_ml7396 segment table 2h #0h
	$$TABregset_100kbps$phy_ml7396 segment table 2h #0h
	$$TABregset_50kbps$phy_ml7396 segment table 2h #0h
	$$fifo_rd$phy_ml7396 segment code 2h #0h
	$$fifo_wr$phy_ml7396 segment code 2h #0h
	$$ml7396_hwif_spi_transfer$phy_ml7396 segment code 2h #0h
	$$phy_addrFilt$phy_ml7396 segment code 2h #0h
	$$phy_backoffTimer$phy_ml7396 segment code 2h #0h
	$$phy_ccaCtrl$phy_ml7396 segment code 2h #0h
	$$phy_ccadone$phy_ml7396 segment code 2h #0h
	$$phy_clrAddrFilt$phy_ml7396 segment code 2h #0h
	$$phy_ed$phy_ml7396 segment code 2h #0h
	$$phy_init$phy_ml7396 segment code 2h #0h
	$$phy_intclr$phy_ml7396 segment code 2h #0h
	$$phy_inten$phy_ml7396 segment code 2h #0h
	$$phy_monitor$phy_ml7396 segment code 2h #0h
	$$phy_regread$phy_ml7396 segment code 2h #0h
	$$phy_regwrite$phy_ml7396 segment code 2h #0h
	$$phy_rst$phy_ml7396 segment code 2h #0h
	$$phy_rxStart$phy_ml7396 segment code 2h #0h
	$$phy_rxdone$phy_ml7396 segment code 2h #0h
	$$phy_set_trx_state$phy_ml7396 segment code 2h #0h
	$$phy_setup$phy_ml7396 segment code 2h #0h
	$$phy_sint_di$phy_ml7396 segment code 2h #0h
	$$phy_sint_ei$phy_ml7396 segment code 2h #0h
	$$phy_sint_handler$phy_ml7396 segment code 2h #0h
	$$phy_sleep$phy_ml7396 segment code 2h #0h
	$$phy_stop$phy_ml7396 segment code 2h #0h
	$$phy_timer_di$phy_ml7396 segment code 2h #0h
	$$phy_timer_ei$phy_ml7396 segment code 2h #0h
	$$phy_timer_handler$phy_ml7396 segment code 2h #0h
	$$phy_timer_start$phy_ml7396 segment code 2h #0h
	$$phy_timer_stop$phy_ml7396 segment code 2h #0h
	$$phy_timer_tick$phy_ml7396 segment code 2h #0h
	$$phy_txStart$phy_ml7396 segment code 2h #0h
	$$phy_txdone$phy_ml7396 segment code 2h #0h
	$$phy_wait_mac_event$phy_ml7396 segment code 2h #0h
	$$phy_wait_phy_event$phy_ml7396 segment code 2h #0h
	$$phy_wakeup_mac_event$phy_ml7396 segment code 2h #0h
	$$phy_wakeup_phy_event$phy_ml7396 segment code 2h #0h
	$$reg_rd$phy_ml7396 segment code 2h #0h
	$$reg_wr$phy_ml7396 segment code 2h #0h
	$$regbank$phy_ml7396 segment code 2h #0h
	$$timer_handler$phy_ml7396 segment code 2h #0h
	$$vco_cal$phy_ml7396 segment code 2h #0h
CVERSION 3.53.1
CGLOBAL 01H 03H 0000H "phy_monitor" 08H 02H 5EH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_timer_start" 08H 02H 4AH 00H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "phy_init" 0CH 02H 51H 00H 83H 0cH 00H 03H 00H 00H 05H 02H 00H
CGLOBAL 01H 03H 0000H "phy_ccaCtrl" 08H 02H 55H 00H 83H 0cH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_timer_handler" 08H 02H 47H 00H 80H 00H 00H 00H 01H
CSGLOBAL 03H 0000H "phy_rst" 08H 02H 50H 01H 83H 08H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_clrAddrFilt" 08H 02H 5AH 00H 83H 08H 00H 00H 07H
CSGLOBAL 03H 0000H "phy_backoffTimer" 08H 02H 52H 01H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_timer_stop" 08H 02H 4BH 00H 81H 02H 00H 00H 01H
CSGLOBAL 03H 0000H "vco_cal" 08H 02H 51H 01H 83H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_regwrite" 08H 02H 60H 00H 83H 08H 00H 00H 07H
CSGLOBAL 03H 0000H "phy_inten" 08H 02H 4DH 01H 83H 0cH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_setup" 08H 02H 52H 00H 83H 30H 00H 00H 01H
CSGLOBAL 03H 0000H "phy_set_trx_state" 08H 02H 4FH 01H 83H 0aH 00H 00H 07H
CSGLOBAL 03H 0000H "regbank" 08H 02H 48H 01H 81H 06H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_sleep" 08H 02H 5DH 00H 83H 08H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_sint_di" 08H 02H 45H 00H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "phy_sint_ei" 08H 02H 44H 00H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "phy_rxStart" 08H 02H 53H 00H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_txStart" 08H 02H 54H 00H 83H 10H 00H 00H 07H
CSGLOBAL 03H 0000H "phy_intclr" 08H 02H 4EH 01H 83H 0cH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_timer_di" 08H 02H 49H 00H 80H 00H 00H 00H 01H
CGLOBAL 01H 03H 0000H "phy_timer_ei" 08H 02H 48H 00H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "phy_regread" 08H 02H 5FH 00H 83H 08H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_wakeup_mac_event" 08H 02H 50H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_wakeup_phy_event" 08H 02H 4FH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_wait_phy_event" 08H 02H 4DH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_wait_mac_event" 08H 02H 4EH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_txdone" 08H 02H 57H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_rxdone" 08H 02H 58H 00H 83H 12H 00H 00H 01H
CSGLOBAL 03H 0000H "fifo_rd" 08H 02H 4CH 01H 83H 0cH 00H 00H 07H
CSGLOBAL 03H 0000H "fifo_wr" 08H 02H 4AH 01H 83H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_ccadone" 08H 02H 56H 00H 83H 0cH 00H 00H 01H
CSGLOBAL 03H 0000H "ml7396_hwif_spi_transfer" 08H 02H 47H 01H 83H 0cH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_addrFilt" 08H 02H 5BH 00H 83H 12H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_ed" 08H 02H 5CH 00H 81H 08H 00H 00H 07H
CSGLOBAL 03H 0000H "reg_rd" 08H 02H 4BH 01H 83H 0aH 00H 00H 07H
CSGLOBAL 03H 0000H "reg_wr" 08H 02H 49H 01H 83H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_sint_handler" 08H 02H 43H 00H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "phy_stop" 08H 02H 59H 00H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "phy_timer_tick" 08H 02H 4CH 00H 81H 02H 00H 00H 01H
CSGLOBAL 03H 0000H "timer_handler" 08H 02H 46H 01H 80H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0022H 000CH 000000B2H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rate" 02H 00H 00H
CSTRUCTMEM 42H 00000098H 00000002H "freq" 05H 01H 26H 00H 00H 02H
CSTRUCTMEM 42H 00000004H 0000009AH "chspc" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000009EH "iffreq" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 000000A2H "iffreq_cca" 02H 00H 02H
CSTRUCTMEM 42H 00000002H 000000A6H "coef" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 000000A8H "ref" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 000000AAH "coef_cca" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 000000ACH "ref_cca" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 000000AEH "fdev" 02H 00H 08H
CSTRUCTMEM 42H 00000001H 000000B0H "reg1" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000B1H "div" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0020H 0003H 00000006H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "handler" 0AH 03H 00H 02H 45H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "active" 04H 00H 0AH 1FH 00H
CSTRUCTMEM 42H 00000001H 00000004H "call_count" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0021H 0001H 00000006H "_Notag"
CSTRUCTMEM 43H 00000006H 00000000H "timer" 04H 00H 05H 20H 00H
CSTRUCTTAG 0000H 0000H 001EH 0006H 0000021AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "lock" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "bank" 02H 00H 00H
CSTRUCTMEM 42H 00000008H 00000002H "rdata" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000008H 0000000AH "wdata" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000104H 00000012H "rfifo" 05H 01H 04H 01H 00H 00H
CSTRUCTMEM 42H 00000104H 00000116H "wfifo" 05H 01H 04H 01H 00H 00H
CSTRUCTTAG 0000H 0000H 001CH 001BH 00000036H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 0FDH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "remove" 0AH 03H 00H 02H 0FEH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "begin" 0AH 03H 00H 02H 0FFH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "close" 0AH 03H 00H 02H 00H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "send" 0AH 03H 00H 02H 02H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "send64le" 0AH 03H 00H 02H 04H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "send64be" 0AH 03H 00H 02H 06H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "rxEnable" 0AH 03H 00H 02H 08H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000010H "setPromiscuous" 0AH 03H 00H 02H 09H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000012H "setAckReq" 0AH 03H 00H 02H 0AH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000014H "setBroadcastEnb" 0AH 03H 00H 02H 0BH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000016H "rxDisable" 0AH 03H 00H 02H 0CH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000018H "readData" 0AH 03H 00H 02H 0DH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001AH "getMyAddress" 0AH 03H 00H 02H 0EH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 0000001CH "getMyAddr64" 0AH 03H 00H 02H 0FH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000001EH "setMyAddress" 0AH 03H 00H 02H 10H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000020H "getStatus" 0AH 03H 00H 02H 11H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000022H "msgOut" 0AH 03H 00H 02H 12H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000024H "setSendMode" 0AH 03H 00H 02H 13H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000026H "getSendMode" 0AH 03H 00H 02H 14H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000028H "decMac" 0AH 03H 00H 02H 15H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000002AH "setKey" 0AH 03H 00H 02H 16H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000002CH "setEnhanceAck" 0AH 03H 00H 02H 17H 01H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000002EH "getEnhanceAck" 0AH 03H 00H 02H 18H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000030H "setAckTxInterval" 0AH 03H 00H 02H 19H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000032H "getEdValue" 0AH 03H 00H 02H 1AH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000034H "antSwitch" 0AH 03H 00H 02H 1BH 01H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0010H 000BH 00000002H "mac_fc_alignment"
CSTRUCTMEM 52H 00000003H 00000000H "frame_type" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "sec_enb" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "pending" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "ack_req" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "panid_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "nop" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000008H "seq_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000009H "ielist" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000AH "dst_addr_type" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000CH "frame_ver" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000EH "src_addr_type" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001BH 000BH 00000020H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "mac_header" 04H 00H 06H 11H 00H
CSTRUCTMEM 42H 00000001H 00000002H "seq_num" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "dst_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "dst_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "src_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000010H "src_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000018H "raw" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001AH "raw_len" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001CH "payload" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001EH "payload_len" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001AH 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addrType" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "senseTime" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "txInterval" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "myAddress" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "ccaWait" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0019H 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000002H "status" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0001H 0003H 00000006H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "data" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "len" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "size" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0002H 0004H 00000010H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "id" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf_size" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 00000004H "in" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 0000000AH "out" 04H 00H 05H 01H 00H
CSTRUCTTAG 0000H 0000H 000BH 0015H 00000028H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "condition" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "ccaRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "ccaBe" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "ccaCount" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "txPower" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "txMode" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000009H "sequnceNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000AH "resendingNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000BH "rxOnEnable" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "promiscuousMode" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "ack_timeout" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000010H "status" 02H 00H 01H
CSTRUCTMEM 42H 00000004H 00000012H "total_send_bytes" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000016H "start_send_time" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000001AH "last_send_time" 02H 00H 02H
CSTRUCTMEM 43H 00000002H 0000001EH "phy" 06H 03H 00H 00H 05H 02H 00H
CSTRUCTMEM 43H 00000006H 00000020H "ack" 04H 00H 05H 01H 00H
CSTRUCTMEM 42H 00000002H 00000026H "tx_ack_interval" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0014H 0005H 0000000EH "mac_addr"
CSTRUCTMEM 42H 00000001H 00000000H "pan_coord" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "lddn_addr" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 000EH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "enb" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "data" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 000DH 0003H 0000000EH "fc_addr"
CSTRUCTMEM 43H 00000004H 00000000H "panid" 04H 00H 05H 0EH 00H
CSTRUCTMEM 42H 00000001H 00000004H "addr_type" 02H 00H 00H
CSTRUCTMEM 43H 00000008H 00000006H "addr" 04H 00H 06H 0FH 00H
CSTRUCTTAG 0000H 0000H 0012H 000AH 00000036H "mac_header"
CSTRUCTMEM 43H 00000002H 00000000H "fc" 04H 00H 06H 11H 00H
CSTRUCTMEM 43H 0000000EH 00000002H "dst" 04H 00H 05H 0DH 00H
CSTRUCTMEM 43H 0000000EH 00000010H "src" 04H 00H 05H 0DH 00H
CSTRUCTMEM 42H 00000001H 0000001EH "seq" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000001FH "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000020H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000006H 00000022H "payload" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 00000028H "raw" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 0000002EH "input" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000002H 00000034H "payload_offset" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0013H 000CH 00000016H "rf_param"
CSTRUCTMEM 42H 00000001H 00000000H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "cca_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "cca_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "cca_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "tx_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "tx_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "tx_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "ant_sw" 02H 00H 00H
CSTRUCTMEM 42H 00000004H 0000000AH "ack_timeout" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 0000000EH "cca_level" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000012H "tx_power" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0015H 000AH 000000FAH "mach_param"
CSTRUCTMEM 43H 00000002H 00000000H "macl" 06H 03H 00H 00H 05H 0BH 00H
CSTRUCTMEM 43H 0000000EH 00000002H "my_addr" 04H 00H 05H 14H 00H
CSTRUCTMEM 43H 0000000EH 00000010H "coord_addr" 04H 00H 05H 14H 00H
CSTRUCTMEM 43H 00000036H 0000001EH "tx" 04H 00H 05H 12H 00H
CSTRUCTMEM 43H 00000036H 00000054H "rx" 04H 00H 05H 12H 00H
CSTRUCTMEM 43H 00000036H 0000008AH "rx_prev" 04H 00H 05H 12H 00H
CSTRUCTMEM 43H 00000036H 000000C0H "ack" 04H 00H 05H 12H 00H
CSTRUCTMEM 42H 00000001H 000000F6H "coordinator" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000F7H "sending" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 000000F8H "rf" 06H 03H 00H 00H 05H 13H 00H
CSTRUCTTAG 0000H 0000H 000CH 0004H 0000000EH "ieee802154_my_addr"
CSTRUCTMEM 42H 00000002H 00000000H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000004H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "pan_coord" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0008H 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0007H 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0006H 0005H 0000000AH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "write" 0AH 03H 00H 02H 8BH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "read" 0AH 03H 00H 02H 8CH 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "erase" 0AH 03H 00H 02H 8DH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000006H "write_byte" 0AH 03H 00H 02H 8EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000008H "read_byte" 0AH 03H 00H 02H 8FH 00H 00H 00H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0005H 0008H 00000010H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 78H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "p" 0AH 03H 00H 02H 79H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "l" 0AH 03H 00H 02H 7AH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "f" 0AH 03H 00H 02H 7BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "d" 0AH 03H 00H 02H 7CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "ln" 0AH 03H 00H 02H 7DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "status" 0AH 03H 00H 02H 7EH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "len" 0AH 03H 00H 02H 7FH 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0004H 000FH 0000001EH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 69H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "end" 0AH 03H 00H 02H 6AH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 6BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 6CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "peek" 0AH 03H 00H 02H 6DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "flush" 0AH 03H 00H 02H 6EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000CH "print" 0AH 03H 00H 02H 6FH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "println" 0AH 03H 00H 02H 70H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000010H "print_long" 0AH 03H 00H 02H 71H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000012H "println_long" 0AH 03H 00H 02H 72H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000014H "print_double" 0AH 03H 00H 02H 73H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000016H "println_double" 0AH 03H 00H 02H 74H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000018H "write" 0AH 03H 00H 02H 75H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000001AH "write_byte" 0AH 03H 00H 02H 76H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000001CH "tx_available" 0AH 03H 00H 02H 77H 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 0011H 0003H 00000002H "mac_frame_control"
CUNIONMEM 42H 00000002H "fc8" 05H 01H 02H 00H 00H 00H
CUNIONMEM 42H 00000002H "fc16" 02H 00H 08H
CUNIONMEM 43H 00000002H "fc_bit" 04H 00H 05H 10H 00H
CUNIONTAG 0000H 0000H 000FH 0003H 00000008H "_Notag"
CUNIONMEM 42H 00000002H "short_addr" 02H 00H 08H
CUNIONMEM 42H 00000002H "lddn_addr" 02H 00H 08H
CUNIONMEM 42H 00000008H "ieee_addr" 05H 01H 08H 00H 00H 00H
CUNIONTAG 0000H 0000H 0009H 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CENUMTAG 0000H 0000H 0023H 0004H "_Notag"
CENUMMEM 00000003H "PHY_ST_FORCE_TRXOFF"
CENUMMEM 00000006H "PHY_ST_RXON"
CENUMMEM 00000009H "PHY_ST_TXON"
CENUMMEM 00000008H "PHY_ST_TRXOFF"
CENUMTAG 0000H 0000H 001FH 0002H "_Notag"
CENUMMEM 00000000H "Disable"
CENUMMEM 00000001H "Enable"
CENUMTAG 0000H 0000H 001DH 0003H "_Notag"
CENUMMEM 00000001H "HALT_I2C1_END"
CENUMMEM 00000002H "HALT_I2C0_END"
CENUMMEM 00000003H "HALT_DELAY"
CENUMTAG 0000H 0000H 0018H 0002H "_Notag"
CENUMMEM 00000014H "SUBGHZ_PWR_20MW"
CENUMMEM 00000001H "SUBGHZ_PWR_1MW"
CENUMTAG 0000H 0000H 0017H 0002H "_Notag"
CENUMMEM 00000064H "SUBGHZ_100KBPS"
CENUMMEM 00000032H "SUBGHZ_50KBPS"
CENUMTAG 0000H 0000H 0016H 0012H "_Notag"
CENUMMEM 00000000H "SUBGHZ_OK"
CENUMMEM 00000001H "SUBGHZ_RESET_FAIL"
CENUMMEM 00000002H "SUBGHZ_SETUP_FAIL"
CENUMMEM 00000003H "SUBGHZ_SLEEP_FAIL"
CENUMMEM 00000004H "SUBGHZ_WAKEUP_FAIL"
CENUMMEM 00000005H "SUBGHZ_MYADDR_FAIL"
CENUMMEM 00000006H "SUBGHZ_SETFIL_FAIL"
CENUMMEM 00000007H "SUBGHZ_TX_COMP_FAIL"
CENUMMEM 00000008H "SUBGHZ_TX_FAIL"
CENUMMEM 00000009H "SUBGHZ_TX_CCA_FAIL"
CENUMMEM 0000000AH "SUBGHZ_TX_ACK_FAIL"
CENUMMEM 0000000BH "SUBGHZ_RX_ENB_FAIL"
CENUMMEM 0000000CH "SUBGHZ_RX_DIS_FAIL"
CENUMMEM 0000000DH "SUBGHZ_RX_COMP_FAIL"
CENUMMEM 0000000EH "SUBGHZ_PANID"
CENUMMEM 0000000FH "SUBGHZ_ERR_ADDRTYPE"
CENUMMEM 00000010H "SUBGHZ_TTL_SEND_OVR"
CENUMMEM 00000011H "SUBGHZ_DUMMY"
CENUMTAG 0000H 0000H 000AH 000EH "_Notag"
CENUMMEM 00000000H "SUBGHZ_ST_TX_START"
CENUMMEM 00000001H "SUBGHZ_ST_CCA_FAST"
CENUMMEM 00000002H "SUBGHZ_ST_CCA_IDLE_DETECT"
CENUMMEM 00000003H "SUBGHZ_ST_CCA_ABORT"
CENUMMEM 00000004H "SUBGHZ_ST_CCA_RETRY"
CENUMMEM 00000005H "SUBGHZ_ST_CCA_FAILURE"
CENUMMEM 00000006H "SUBGHZ_ST_CCA_DONE"
CENUMMEM 00000007H "SUBGHZ_ST_TX_DONE"
CENUMMEM 00000008H "SUBGHZ_ST_TX_ACK_TIMEOUT"
CENUMMEM 00000009H "SUBGHZ_ST_TX_ACK_DONE"
CENUMMEM 0000000AH "SUBGHZ_ST_RX_START"
CENUMMEM 0000000BH "SUBGHZ_ST_RX_DONE"
CENUMMEM 0000000CH "SUBGHZ_ST_RX_ACK_DONE"
CENUMMEM 0000000DH "SUBGHZ_ST_NONE"
CENUMTAG 0000H 0000H 0003H 0005H "_Notag"
CENUMMEM 00000000H "CCA_IDLE"
CENUMMEM 00000001H "CCA_FAST"
CENUMMEM 00000002H "IDLE_DETECT"
CENUMMEM 00000003H "CCA_RETRY"
CENUMMEM 00000004H "CCA_FAILURE"
CTYPEDEF 0000H 0000H 43H "SUBGHZ_POWER" 04H 00H 0AH 18H 00H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 09H 00H
CTYPEDEF 0000H 0000H 43H "SubGHz_CTRL" 04H 00H 05H 1CH 00H
CTYPEDEF 0000H 0000H 43H "INT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "PHY_PARAM" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_PARAM" 04H 00H 05H 1AH 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MSG" 04H 00H 0AH 16H 00H
CTYPEDEF 0000H 0000H 43H "PHY_TRX_STATE" 04H 00H 0AH 23H 00H
CTYPEDEF 0000H 0000H 42H "bool" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "t_print" 04H 00H 05H 05H 00H
CTYPEDEF 0000H 0000H 42H "byte" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "INT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "INT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_STATE" 04H 00H 0AH 0AH 00H
CTYPEDEF 0000H 0000H 43H "MACL_PARAM" 04H 00H 05H 0BH 00H
CTYPEDEF 0000H 0000H 42H "BOOLEAN" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_PARAM" 04H 00H 05H 1BH 00H
CTYPEDEF 0000H 0000H 42H "UCHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_STATUS" 04H 00H 05H 19H 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "uint8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_RATE" 04H 00H 0AH 17H 00H
CTYPEDEF 0000H 0000H 43H "BUFFER" 04H 00H 05H 01H 00H
CTYPEDEF 0000H 0000H 43H "int8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "int16_t" 02H 00H 08H
CTYPEDEF 0000H 0000H 43H "int32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "REGSET" 04H 00H 05H 22H 00H
CTYPEDEF 0000H 0000H 42H "UINT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "DATAFLASH" 04H 00H 05H 06H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 94H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 93H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "CHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HardwareSerial" 04H 00H 05H 04H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 96H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 95H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "boolean" 02H 00H 00H
CTYPEDEF 0000H 0000H 42H "word" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "BOOL" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HALT_EVENT" 04H 00H 0AH 1DH 00H
CTYPEDEF 0000H 0000H 43H "CCA_STATE" 04H 00H 0AH 03H 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 07H 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 08H 00H
CTYPEDEF 0000H 0000H 42H "uint32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CTYPEDEF 0000H 0000H 42H "uint16_t" 02H 00H 08H
CSGLOBAL 43H 0010H "phy" 04H 00H 05H 02H 00H
CSGLOBAL 43H 021AH "reg" 04H 00H 05H 1EH 00H
CSGLOBAL 01H 00B2H "regset_100kbps" 04H 00H 05H 22H 00H
CSGLOBAL 43H 0006H "hwif" 04H 00H 05H 21H 00H
CSGLOBAL 42H 0001H "phy_cca_be" 02H 00H 00H
CSGLOBAL 00H 0018H "event_enable" 05H 01H 06H 00H 00H 02H
CSGLOBAL 01H 00B2H "regset_50kbps" 04H 00H 05H 22H 00H
CFILE 0001H 0000007BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\common.h"
CFILE 0002H 00000F42H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\ml620504F.h"
CFILE 0003H 000000C9H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\string.h"
CFILE 0004H 0000007AH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\yvals.h"
CFILE 0005H 00000062H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\../phy.h"
CFILE 0006H 00000032H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\../common_subghz.h"
CFILE 0007H 000000ECH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\phy_ml7396.h"
CFILE 0008H 00000064H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\../hwif/hal.h"
CFILE 0009H 00000051H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite_system.h"
CFILE 000AH 00000042H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite.h"
CFILE 000BH 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\analogio.h"
CFILE 000CH 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\MCU_SM~1\\mcu.h"
CFILE 000DH 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\digitalio.h"
CFILE 000EH 00000041H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\pin_assignment.h"
CFILE 000FH 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\serial.h"
CFILE 0010H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\print.h"
CFILE 0011H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_shift.h"
CFILE 0012H 0000002CH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_pulse.h"
CFILE 0013H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WInterrupts.h"
CFILE 0014H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WMath.h"
CFILE 0015H 00000031H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\flash.h"
CFILE 0016H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\tone.h"
CFILE 0017H 000000DAH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\stdlib.h"
CFILE 0018H 0000004FH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\math.h"
CFILE 0019H 00000082H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\subghz_api.h"
CFILE 001AH 0000009EH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\mach.h"
CFILE 001BH 00000064H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\macl.h"
CFILE 001CH 00000032H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\common_subghz.h"
CFILE 001DH 00000062H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\phy.h"
CFILE 001EH 0000003DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\endian.h"
CFILE 001FH 00000024H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\../errno.h"
CFILE 0020H 0000003DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\../endian.h"
CFILE 0000H 000005DDH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy\\phy_ml7396.c"

	rseg $$timer_handler$phy_ml7396
CFUNCTION 326

_timer_handler	:
CBLOCK 326 1 305

;;static void timer_handler(void) {
CLINEA 0000H 0001H 0131H 0001H 0021H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 326 2 305

;;	switch (hwif.timer.active) {
CLINEA 0000H 0001H 0132H 0002H 001DH
	l	er0,	NEAR _hwif+02h
	mov	er2,	er0
CBLOCK 326 3 306
	cmp	r1,	#00h
	bne	_$L4
	mov	r0,	r2
	beq	_$L9

;;	switch (hwif.timer.active) {
CLINEA 0000H 0000H 0132H 0002H 001DH
	cmp	r2,	#01h
	beq	_$L6

;;	}
CLINEA 0000H 0000H 013AH 0002H 0002H
_$L4 :
CBLOCKEND 326 2 315

;;}
CLINEA 0000H 0001H 013BH 0001H 0001H
	rt

;;		case Enable:
CLINEA 0000H 0001H 0133H 0003H 000EH
_$L6 :

;;			if (hwif.timer.handler != NULL)
CLINEA 0000H 0001H 0134H 0004H 0022H
	l	er0,	NEAR _hwif
	beq	_$L4

;;				hwif.timer.handler();
CLINEA 0000H 0001H 0135H 0005H 0019H
	b	er0
CLINEA 0000H 0001H 0136H 0004H 0009H

;;		case Disable:
CLINEA 0000H 0001H 0137H 0003H 000FH
_$L9 :

;;			++hwif.timer.call_count;
CLINEA 0000H 0001H 0138H 0004H 001BH
	l	r0,	NEAR _hwif+04h
	add	r0,	#01h
	st	r0,	NEAR _hwif+04h

;;			break;
CLINEA 0000H 0001H 0139H 0004H 0009H
	rt
CBLOCKEND 326 3 314
CBLOCKEND 326 1 315
CFUNCTIONEND 326


	rseg $$ml7396_hwif_spi_transfer$phy_ml7396
CFUNCTION 327

_ml7396_hwif_spi_transfer	:
CBLOCK 327 1 325

;;{
CLINEA 0000H 0001H 0145H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 327 2 325
CRET 0006H
CARGUMENT 44H 0002H 0028H "wdata" 04H 03H 00H 00H 00H
CARGUMENT 46H 0002H 0029H "rdata" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H
CLOCAL 46H 0001H 0016H 0002H "wsize" 02H 00H 00H
CLOCAL 46H 0001H 0014H 0002H "rsize" 02H 00H 00H

;;	if(wdata[0]&REG_ADR_WRITE_BIT) {
CLINEA 0000H 0001H 0148H 0002H 0021H
	l	r0,	[er0]
	tb	r0.0
	beq	_$L11
CBLOCK 327 3 328

;;		wsize = size;
CLINEA 0000H 0001H 0149H 0003H 000FH
	l	r0,	_size$4[fp]
	mov	r2,	r0	;; _lwsize$0

;;		rsize = 0;
CLINEA 0000H 0001H 014AH 0003H 000CH
	mov	r0,	#00h
CBLOCKEND 327 3 331

;;	}else{
CLINEA 0000H 0000H 014BH 0002H 0007H
	bal	_$L13
_$L11 :
CBLOCK 327 4 331

;;		wsize = 1;
CLINEA 0000H 0001H 014CH 0003H 000CH
	mov	r2,	#01h	;; _lwsize$0

;;		rsize = size - wsize;
CLINEA 0000H 0001H 014DH 0003H 0017H
	l	r0,	_size$4[fp]
	add	r0,	#0ffh
CBLOCKEND 327 4 334

;;	}
CLINEA 0000H 0000H 014EH 0002H 0002H
_$L13 :

;;	HAL_SPI_transfer(wdata, wsize, rdata, rsize);
CLINEA 0000H 0001H 014FH 0002H 002EH
	mov	r1,	#00h
	push	er0
	push	er10
	mov	r3,	#00h
	mov	er0,	er8
	bl	_HAL_SPI_transfer
	add	sp,	#4 
CBLOCKEND 327 2 336

;;}
CLINEA 0000H 0001H 0150H 0001H 0001H
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 327 1 336
CFUNCTIONEND 327


	rseg $$regbank$phy_ml7396
CFUNCTION 328

_regbank	:
CBLOCK 328 1 349

;;static void regbank(uint8_t bank) {
CLINEA 0000H 0001H 015DH 0001H 0023H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	r8,	r0
CBLOCK 328 2 349
CRET 0002H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H

;;	switch (bank) {
CLINEA 0000H 0001H 015FH 0002H 0010H
CBLOCK 328 3 351
	cmp	r0,	#00h
	beq	_$L20

;;	switch (bank) {
CLINEA 0000H 0000H 015FH 0002H 0010H
	cmp	r0,	#01h
	beq	_$L20

;;	switch (bank) {
CLINEA 0000H 0000H 015FH 0002H 0010H
	cmp	r0,	#02h
	beq	_$L20

;;	switch (bank) {
CLINEA 0000H 0000H 015FH 0002H 0010H
	cmp	r0,	#08h
	beq	_$L20

;;	switch (bank) {
CLINEA 0000H 0000H 015FH 0002H 0010H
	cmp	r0,	#09h
	beq	_$L20

;;	switch (bank) {
CLINEA 0000H 0000H 015FH 0002H 0010H
	cmp	r0,	#0ah
	beq	_$L20

;;	switch (bank) {
CLINEA 0000H 0000H 015FH 0002H 0010H
	cmp	r0,	#0ffh
	beq	_$L30

;;	}
CLINEA 0000H 0000H 0171H 0002H 0002H
_$L18 :
CBLOCKEND 328 2 370

;;}
CLINEA 0000H 0001H 0172H 0001H 0001H
	pop	er8
	pop	pc

;;		case 0:  /* BANK0 */
CLINEA 0000H 0001H 0160H 0003H 0016H
_$L20 :

;;			if (bank != reg.bank) {
CLINEA 0000H 0001H 0166H 0004H 001AH
	l	r0,	NEAR _reg+01h
	cmp	r0,	r8
	beq	_$L18
CBLOCK 328 4 358

;;				reg.wdata[0] = (0x00<<1)|0x01, reg.wdata[1] = bank&0x03;
CLINEA 0000H 0001H 0167H 0005H 003CH
	mov	r0,	#01h
	st	r0,	NEAR _reg+0ah
	mov	r0,	r8
	and	r0,	#03h
	st	r0,	NEAR _reg+0bh

;;				if(bank > 2) reg.wdata[1] = reg.wdata[1] | 0x80;
CLINEA 0000H 0001H 0168H 0005H 0034H
	cmp	r8,	#02h
	ble	_$L28
	or	r0,	#080h
	st	r0,	NEAR _reg+0bh
_$L28 :

;;				ml7396_hwif_spi_transfer(reg.wdata, reg.rdata, 2);
CLINEA 0000H 0001H 0169H 0005H 0036H
	mov	r0,	#02h
	push	r0
	mov	r2,	#BYTE1 OFFSET (_reg+02h)
	mov	r3,	#BYTE2 OFFSET (_reg+02h)
	mov	r0,	#BYTE1 OFFSET (_reg+0ah)
	mov	r1,	#BYTE2 OFFSET (_reg+0ah)
	bl	_ml7396_hwif_spi_transfer
	add	sp,	#2 

;;				reg.bank = bank;
CLINEA 0000H 0001H 016AH 0005H 0014H
	st	r8,	NEAR _reg+01h
CBLOCKEND 328 4 363

;;			break;
CLINEA 0000H 0001H 016CH 0004H 0009H
	bal	_$L18

;;		case 0xff:
CLINEA 0000H 0001H 016DH 0003H 000CH
_$L30 :

;;			reg.lock = 0;
CLINEA 0000H 0001H 016EH 0004H 0010H
	mov	r0,	#00h
	st	r0,	NEAR _reg

;;			reg.bank = bank;
CLINEA 0000H 0001H 016FH 0004H 0013H
	st	r8,	NEAR _reg+01h

;;			break;
CLINEA 0000H 0001H 0170H 0004H 0009H
	bal	_$L18
CBLOCKEND 328 3 369
CBLOCKEND 328 1 370
CFUNCTIONEND 328


	rseg $$reg_wr$phy_ml7396
CFUNCTION 329

_reg_wr	:
CBLOCK 329 1 381

;;{
CLINEA 0000H 0001H 017DH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 329 2 381
CRET 0006H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "addr" 02H 00H 00H
CARGUMENT 44H 0002H 0029H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H

;;	if (reg.lock++) {
CLINEA 0000H 0001H 017FH 0002H 0012H
	l	r0,	NEAR _reg
	mov	r1,	r0
	add	r0,	#01h
	st	r0,	NEAR _reg
	cmp	r1,	#00h
	bne	_$L34
CBLOCK 329 3 383
CBLOCKEND 329 3 387

;;	}else{
CLINEA 0000H 0000H 0183H 0002H 0007H
CBLOCK 329 4 387

;;		regbank(bank);
CLINEA 0000H 0001H 0184H 0003H 0010H
	mov	r0,	r8
	bl	_regbank

;;		reg.wdata[0] = (addr << 1) | 0x01;
CLINEA 0000H 0001H 0185H 0003H 0024H
	mov	r0,	r9
	sll	r0,	#01h
	or	r0,	#01h
	st	r0,	NEAR _reg+0ah

;;		memcpy(reg.wdata + 1, data, size);
CLINEA 0000H 0001H 0186H 0003H 0024H
	l	r0,	_size$4[fp]
	mov	r1,	#00h
	push	er0
	mov	er2,	er10
	mov	r0,	#BYTE1 OFFSET (_reg+0bh)
	mov	r1,	#BYTE2 OFFSET (_reg+0bh)
	bl	_memcpy_nn
	add	sp,	#2 

;;		ml7396_hwif_spi_transfer(reg.wdata, reg.rdata, size + 1);
CLINEA 0000H 0001H 0187H 0003H 003BH
	l	r0,	_size$4[fp]
	add	r0,	#01h
	push	r0
	mov	r2,	#BYTE1 OFFSET (_reg+02h)
	mov	r3,	#BYTE2 OFFSET (_reg+02h)
	mov	r0,	#BYTE1 OFFSET (_reg+0ah)
	mov	r1,	#BYTE2 OFFSET (_reg+0ah)
	bl	_ml7396_hwif_spi_transfer
	add	sp,	#2 
CBLOCKEND 329 4 392

;;	}
CLINEA 0000H 0000H 0188H 0002H 0002H
_$L34 :

;;	--reg.lock;
CLINEA 0000H 0001H 0189H 0002H 000CH
	l	r0,	NEAR _reg
	add	r0,	#0ffh
	st	r0,	NEAR _reg
CBLOCKEND 329 2 404

;;}
CLINEA 0000H 0001H 0194H 0001H 0001H
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 329 1 404
CFUNCTIONEND 329


	rseg $$fifo_wr$phy_ml7396
CFUNCTION 330

_fifo_wr	:
CBLOCK 330 1 408

;;{
CLINEA 0000H 0001H 0198H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	bp
	push	er8
	mov	er8,	er0
CBLOCK 330 2 408
CRET 0006H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "addr" 02H 00H 00H
CARGUMENT 46H 0002H 0025H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H
CLOCAL 46H 0002H 002AH 0002H "p_header" 04H 03H 00H 00H 00H

;;	p_header = data - 1;
CLINEA 0000H 0001H 019CH 0002H 0015H
	mov	er0,	er2
	add	er0,	#-1
	mov	bp,	er0	;; _lp_header$0

;;	if (reg.lock++) {
CLINEA 0000H 0001H 019DH 0002H 0012H
	l	r0,	NEAR _reg
	mov	r1,	r0
	add	r0,	#01h
	st	r0,	NEAR _reg
	cmp	r1,	#00h
	bne	_$L38
CBLOCK 330 3 413
CBLOCKEND 330 3 417

;;	}else{
CLINEA 0000H 0000H 01A1H 0002H 0007H
CBLOCK 330 4 417

;;		regbank(bank);
CLINEA 0000H 0001H 01A2H 0003H 0010H
	mov	r0,	r8
	bl	_regbank

;;		*p_header = (addr << 1) | 0x01;
CLINEA 0000H 0001H 01A3H 0003H 0021H
	mov	r0,	r9
	sll	r0,	#01h
	or	r0,	#01h
	st	r0,	[bp]

;;		ml7396_hwif_spi_transfer(p_header, reg.rdata, size + 1);
CLINEA 0000H 0001H 01A4H 0003H 003AH
	l	r0,	_size$4[fp]
	add	r0,	#01h
	push	r0
	mov	r2,	#BYTE1 OFFSET (_reg+02h)
	mov	r3,	#BYTE2 OFFSET (_reg+02h)
	mov	er0,	bp
	bl	_ml7396_hwif_spi_transfer
	add	sp,	#2 
CBLOCKEND 330 4 421

;;	}
CLINEA 0000H 0000H 01A5H 0002H 0002H
_$L38 :

;;	--reg.lock;
CLINEA 0000H 0001H 01A6H 0002H 000CH
	l	r0,	NEAR _reg
	add	r0,	#0ffh
	st	r0,	NEAR _reg
CBLOCKEND 330 2 424

;;}
CLINEA 0000H 0001H 01A8H 0001H 0001H
	pop	er8
	pop	bp
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 330 1 424
CFUNCTIONEND 330


	rseg $$reg_rd$phy_ml7396
CFUNCTION 331

_reg_rd	:
CBLOCK 331 1 435

;;{
CLINEA 0000H 0001H 01B3H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 331 2 435
CRET 0006H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "addr" 02H 00H 00H
CARGUMENT 46H 0002H 0029H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H

;;	if (reg.lock++) {
CLINEA 0000H 0001H 01B5H 0002H 0012H
	l	r0,	NEAR _reg
	mov	r1,	r0
	add	r0,	#01h
	st	r0,	NEAR _reg
	cmp	r1,	#00h
	bne	_$L42
CBLOCK 331 3 437
CBLOCKEND 331 3 441

;;	}else{
CLINEA 0000H 0000H 01B9H 0002H 0007H
CBLOCK 331 4 441

;;		regbank(bank);
CLINEA 0000H 0001H 01BAH 0003H 0010H
	mov	r0,	r8
	bl	_regbank

;;		reg.rdata[0] = (addr << 1) | 0x00;
CLINEA 0000H 0001H 01BBH 0003H 0024H
	mov	r0,	r9
	sll	r0,	#01h
	st	r0,	NEAR _reg+02h

;;		memset(reg.rdata + 1, 0xff, size);
CLINEA 0000H 0001H 01BCH 0003H 0024H
	l	r0,	_size$4[fp]
	mov	r1,	#00h
	push	er0
	mov	r2,	#0ffh
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET (_reg+03h)
	mov	r1,	#BYTE2 OFFSET (_reg+03h)
	bl	_memset_n
	add	sp,	#2 

;;		ml7396_hwif_spi_transfer(reg.rdata, reg.rdata, size + 1);
CLINEA 0000H 0001H 01BDH 0003H 003BH
	l	r0,	_size$4[fp]
	add	r0,	#01h
	push	r0
	mov	r2,	#BYTE1 OFFSET (_reg+02h)
	mov	r3,	#BYTE2 OFFSET (_reg+02h)
	mov	r0,	#BYTE1 OFFSET (_reg+02h)
	mov	r1,	#BYTE2 OFFSET (_reg+02h)
	bl	_ml7396_hwif_spi_transfer
	add	sp,	#2 

;;		memcpy(data, reg.rdata, size);
CLINEA 0000H 0001H 01BEH 0003H 0020H
	l	r0,	_size$4[fp]
	mov	r1,	#00h
	push	er0
	mov	r2,	#BYTE1 OFFSET (_reg+02h)
	mov	r3,	#BYTE2 OFFSET (_reg+02h)
	mov	er0,	er10
	bl	_memcpy_nn
	add	sp,	#2 
CBLOCKEND 331 4 447

;;	}
CLINEA 0000H 0000H 01BFH 0002H 0002H
_$L42 :

;;	--reg.lock;
CLINEA 0000H 0001H 01C0H 0002H 000CH
	l	r0,	NEAR _reg
	add	r0,	#0ffh
	st	r0,	NEAR _reg
CBLOCKEND 331 2 459

;;}
CLINEA 0000H 0001H 01CBH 0001H 0001H
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 331 1 459
CFUNCTIONEND 331


	rseg $$fifo_rd$phy_ml7396
CFUNCTION 332

_fifo_rd	:
CBLOCK 332 1 463

;;{
CLINEA 0000H 0001H 01CFH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	push	bp
	mov	er10,	er2
	mov	er8,	er0
CBLOCK 332 2 463
CRET 0008H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "addr" 02H 00H 00H
CARGUMENT 46H 0002H 0029H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H
CLOCAL 46H 0002H 002AH 0002H "p_header" 04H 03H 00H 00H 00H

;;	p_header = data - 1;
CLINEA 0000H 0001H 01D3H 0002H 0015H
	mov	er0,	er2
	add	er0,	#-1
	mov	bp,	er0	;; _lp_header$0

;;	if (reg.lock++) {
CLINEA 0000H 0001H 01D4H 0002H 0012H
	l	r0,	NEAR _reg
	mov	r1,	r0
	add	r0,	#01h
	st	r0,	NEAR _reg
	cmp	r1,	#00h
	bne	_$L46
CBLOCK 332 3 468
CBLOCKEND 332 3 472

;;	}else{
CLINEA 0000H 0000H 01D8H 0002H 0007H
CBLOCK 332 4 472

;;		regbank(bank);
CLINEA 0000H 0001H 01D9H 0003H 0010H
	mov	r0,	r8
	bl	_regbank

;;		*p_header = (addr << 1) | 0x00;
CLINEA 0000H 0001H 01DAH 0003H 0021H
	mov	r0,	r9
	sll	r0,	#01h
	st	r0,	[bp]

;;		ml7396_hwif_spi_transfer(p_header, data, size + 1);
CLINEA 0000H 0001H 01DBH 0003H 0035H
	l	r0,	_size$4[fp]
	add	r0,	#01h
	push	r0
	mov	er2,	er10
	mov	er0,	bp
	bl	_ml7396_hwif_spi_transfer
	add	sp,	#2 
CBLOCKEND 332 4 476

;;	}
CLINEA 0000H 0000H 01DCH 0002H 0002H
_$L46 :

;;	--reg.lock;
CLINEA 0000H 0001H 01DDH 0002H 000CH
	l	r0,	NEAR _reg
	add	r0,	#0ffh
	st	r0,	NEAR _reg
CBLOCKEND 332 2 479

;;}
CLINEA 0000H 0001H 01DFH 0001H 0001H
	pop	bp
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 332 1 479
CFUNCTIONEND 332


	rseg $$phy_inten$phy_ml7396
CFUNCTION 333

_phy_inten	:
CBLOCK 333 1 517

;;{
CLINEA 0000H 0001H 0205H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-04
	push	er8
	mov	er8,	er0
CBLOCK 333 2 517
CRET 0008H
CARGUMENT 46H 0004H 2528H "inten" 02H 00H 02H
CLOCAL 42H 0004H 0004H 0002H "reg_data" 05H 01H 04H 00H 00H 00H

;;	reg_data[0] = (uint8_t)((inten) >>  0) | 0xc0;
CLINEA 0000H 0001H 0207H 0002H 002FH
	mov	r0,	r8
	or	r0,	#0c0h
	st	r0,	_reg_data$0[fp]

;;	reg_data[1] = (uint8_t)((inten) >>  8);
CLINEA 0000H 0001H 0208H 0002H 0028H
	st	r9,	_reg_data$0+01h[fp]

;;	reg_data[2] = (uint8_t)((inten) >> 16);
CLINEA 0000H 0001H 0209H 0002H 0028H
	st	r2,	_reg_data$0+02h[fp]

;;	reg_data[3] = (uint8_t)((inten) >> 24);
CLINEA 0000H 0001H 020AH 0002H 0028H
	st	r3,	_reg_data$0+03h[fp]

;;	reg_wr(REG_ADR_INT_EN_GRP1, reg_data, 4);
CLINEA 0000H 0001H 020BH 0002H 002AH
	mov	r0,	#04h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02ah
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 333 2 524

;;}
CLINEA 0000H 0001H 020CH 0001H 0001H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 333 1 524
CFUNCTIONEND 333


	rseg $$phy_intclr$phy_ml7396
CFUNCTION 334

_phy_intclr	:
CBLOCK 334 1 533

;;{
CLINEA 0000H 0001H 0215H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-04
	push	er8
	mov	er8,	er0
CBLOCK 334 2 533
CRET 0008H
CARGUMENT 46H 0004H 2528H "intclr" 02H 00H 02H
CLOCAL 42H 0004H 0004H 0002H "reg_data" 05H 01H 04H 00H 00H 00H

;;	reg_data[0] = ~(uint8_t)((intclr) >>  0);
CLINEA 0000H 0001H 0218H 0002H 002AH
	mov	r0,	r8
	xor	r0,	#0ffh
	st	r0,	_reg_data$0[fp]

;;	reg_data[1] = ~(uint8_t)((intclr) >>  8);
CLINEA 0000H 0001H 0219H 0002H 002AH
	mov	r0,	r9
	xor	r0,	#0ffh
	st	r0,	_reg_data$0+01h[fp]

;;	reg_data[2] = ~(uint8_t)((intclr) >> 16);
CLINEA 0000H 0001H 021AH 0002H 002AH
	mov	er0,	er2
	xor	r0,	#0ffh
	st	r0,	_reg_data$0+02h[fp]

;;	reg_data[3] = ~(uint8_t)((intclr) >> 24);
CLINEA 0000H 0001H 021BH 0002H 002AH
	mov	r0,	r3
	xor	r0,	#0ffh
	st	r0,	_reg_data$0+03h[fp]

;;	reg_wr(REG_ADR_INT_SOURCE_GRP1, reg_data, 4);
CLINEA 0000H 0001H 021CH 0002H 002EH
	mov	r0,	#04h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#024h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 334 2 541

;;}
CLINEA 0000H 0001H 021DH 0001H 0001H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 334 1 541
CFUNCTIONEND 334


	rseg $$phy_set_trx_state$phy_ml7396
CFUNCTION 335

_phy_set_trx_state	:
CBLOCK 335 1 544

;;static void phy_set_trx_state(PHY_TRX_STATE state) {
CLINEA 0000H 0001H 0220H 0001H 0034H
;;*****************************************
;;	register/stack information
;;*****************************************
	_set_data$0	set	-1
	_get_data$2	set	-2
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
	push	er4
CBLOCK 335 2 544
CRET 0006H
CARGUMENT 47H 0002H 0024H "state" 02H 00H 01H
CLOCAL 42H 0001H 0001H 0002H "set_data" 02H 00H 00H
CLOCAL 42H 0001H 0002H 0002H "get_data" 02H 00H 00H
CLOCAL 46H 0001H 0018H 0002H "i" 02H 00H 00H

;;	set_data = state;
CLINEA 0000H 0001H 0223H 0002H 0012H
	st	r0,	_set_data$0[fp]

;;	for(i=0;i < 3;i++){
CLINEA 0000H 0001H 0224H 0002H 0014H
	mov	r4,	#00h	;; _li$4
_$L52 :
CBLOCK 335 3 548

;;		reg_wr(REG_ADR_RF_STATUS, &set_data, 1);
CLINEA 0000H 0001H 0225H 0003H 002AH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#06ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		HAL_delayMicroseconds(200);
CLINEA 0000H 0001H 0226H 0003H 001DH
	mov	r0,	#0c8h
	mov	r1,	#00h
	mov	er2,	#0 
	bl	_HAL_delayMicroseconds

;;		reg_rd(REG_ADR_RF_STATUS, &get_data, 1);
CLINEA 0000H 0001H 0227H 0003H 002AH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#06ch
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;		if(set_data == (get_data&0x0F)) break;
CLINEA 0000H 0001H 0228H 0003H 0028H
	l	r0,	_get_data$2[fp]
	and	r0,	#0fh
	l	r1,	_set_data$0[fp]
	cmp	r0,	r1
	beq	_$L51
CBLOCKEND 335 3 553

;;	for(i=0;i < 3;i++){
CLINEA 0000H 0000H 0224H 0002H 0014H
	add	r4,	#01h
	cmp	r4,	#03h
	blt	_$L52

;;	}
CLINEA 0000H 0000H 0229H 0002H 0002H
_$L51 :
CBLOCKEND 335 2 557

;;}
CLINEA 0000H 0001H 022DH 0001H 0001H
	pop	er4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 335 1 557
CFUNCTIONEND 335


	rseg $$phy_rst$phy_ml7396
CFUNCTION 336

_phy_rst	:
CBLOCK 336 1 561

;;{
CLINEA 0000H 0001H 0231H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-1
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
CBLOCK 336 2 561
CRET 0004H
CLOCAL 42H 0001H 0001H 0002H "reg_data" 02H 00H 00H

;;	reg_data = 0x88;
CLINEA 0000H 0001H 0233H 0002H 0011H
	mov	r0,	#088h
	st	r0,	_reg_data$0[fp]

;;	reg_wr(REG_ADR_RST_SET, &reg_data, 1);
CLINEA 0000H 0001H 0234H 0002H 0027H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 336 2 565

;;}
CLINEA 0000H 0001H 0235H 0001H 0001H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 336 1 565
CFUNCTIONEND 336


	rseg $$vco_cal$phy_ml7396
CFUNCTION 337

_vco_cal	:
CBLOCK 337 1 568

;;static void vco_cal(void) {
CLINEA 0000H 0001H 0238H 0001H 001BH
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-04
CBLOCK 337 2 568
CRET 0006H
CLOCAL 42H 0004H 0004H 0002H "reg_data" 05H 01H 04H 00H 00H 00H

;;	reg_rd(REG_ADR_PACKET_MODE_SET, reg_data,1);
CLINEA 0000H 0001H 023CH 0002H 002DH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#045h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	reg_data[0] |=  0x3a;
CLINEA 0000H 0001H 023EH 0002H 0016H
	l	r0,	_reg_data$0[fp]
	or	r0,	#03ah
	st	r0,	_reg_data$0[fp]

;;	reg_wr(REG_ADR_PACKET_MODE_SET, reg_data,1);
CLINEA 0000H 0001H 023FH 0002H 002DH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#045h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_rd(REG_ADR_FEC_CRC_SET, reg_data,1);
CLINEA 0000H 0001H 0240H 0002H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#046h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	reg_data[0] |=  0x0b, reg_data[0] &= ~0x04;
CLINEA 0000H 0001H 0241H 0002H 002CH
	l	r0,	_reg_data$0[fp]
	or	r0,	#0bh
	and	r0,	#0fbh
	st	r0,	_reg_data$0[fp]

;;	reg_wr(REG_ADR_FEC_CRC_SET, reg_data,1);
CLINEA 0000H 0001H 0242H 0002H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#046h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0]=0x00;
CLINEA 0000H 0001H 0243H 0002H 0012H
	mov	r0,	#00h
	st	r0,	_reg_data$0[fp]

;;	reg_wr(REG_ADR_TX_ALARM_LH,reg_data,1);
CLINEA 0000H 0001H 0244H 0002H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#035h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_wr(REG_ADR_TX_ALARM_HL,reg_data,1); 
CLINEA 0000H 0001H 0245H 0002H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#036h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_wr(REG_ADR_RX_ALARM_LH,reg_data,1);
CLINEA 0000H 0001H 0246H 0002H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#037h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_wr(REG_ADR_RX_ALARM_HL,reg_data,1);
CLINEA 0000H 0001H 0247H 0002H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#038h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0]=0x01;
CLINEA 0000H 0001H 0248H 0002H 0012H
	mov	r0,	#01h
	st	r0,	_reg_data$0[fp]

;;	reg_wr(REG_ADR_VCO_CAL_START, reg_data,1);
CLINEA 0000H 0001H 0249H 0002H 002BH
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01dh
	bl	_reg_wr
	add	sp,	#2 

;;	do {
CLINEA 0000H 0001H 024AH 0002H 0005H
_$L62 :
CBLOCK 337 3 586

;;		HAL_delayMicroseconds(100);
CLINEA 0000H 0001H 024BH 0003H 001DH
	mov	r0,	#064h
	mov	r1,	#00h
	mov	er2,	#0 
	bl	_HAL_delayMicroseconds

;;		reg_rd(REG_ADR_INT_SOURCE_GRP1, reg_data, 1);
CLINEA 0000H 0001H 024CH 0003H 002FH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#024h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 
CBLOCKEND 337 3 589

;;	} while (!(reg_data[0] & 0x04));
CLINEA 0000H 0000H 024DH 0002H 0021H
	l	r0,	_reg_data$0[fp]
	tb	r0.2
	beq	_$L62

;;	phy_intclr(HW_EVENT_VCO_CAL_DONE);
CLINEA 0000H 0001H 024EH 0002H 0023H
	mov	er0,	#4 
	mov	er2,	#0 
	bl	_phy_intclr
CBLOCKEND 337 2 591

;;}
CLINEA 0000H 0001H 024FH 0001H 0001H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 337 1 591
CFUNCTIONEND 337


	rseg $$phy_backoffTimer$phy_ml7396
CFUNCTION 338

_phy_backoffTimer	:
CBLOCK 338 1 594

;;static void phy_backoffTimer(void){
CLINEA 0000H 0001H 0252H 0001H 0023H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 338 2 594
CRET 0000H
CLOCAL 46H 0002H 0024H 0002H "cca_wait" 02H 00H 08H

;;	cca_wait = ((1 << (rand()%phy_cca_be)) -1)* UNIT_BAKOFF_PERIOD;
CLINEA 0000H 0000H 0256H 0002H 0040H
	bl	_rand
	l	r2,	NEAR _phy_cca_be
	mov	r3,	#00h
	bl	__imodu8sw
	mov	er2,	er0
	mov	er0,	#1 
_$M14 :
	cmp	r2,	#07h
	cmpc	r3,	#00h
	ble	_$M13
	sllc	r1,	#07h
	sll	r0,	#07h
	add	er2,	#-7
	bne	_$M14
_$M13 :
	sllc	r1,	r2
	sll	r0,	r2
	add	er0,	#-1
	mov	er2,	er0
	sllc	r3,	#02h
	sll	r2,	#02h
	add	er2,	er0
	sllc	r3,	#06h
	sll	r2,	#06h
	mov	er0,	er2

;;	if (cca_wait) HAL_delayMicroseconds(cca_wait);
CLINEA 0000H 0001H 0257H 0002H 002FH
	beq	_$L67
	mov	er2,	#0 
	bl	_HAL_delayMicroseconds
_$L67 :
CBLOCKEND 338 2 600

;;}
CLINEA 0000H 0001H 0258H 0001H 0001H
	pop	pc
CBLOCKEND 338 1 600
CFUNCTIONEND 338


	rseg $$phy_sint_handler$phy_ml7396
CFUNCTION 67

_phy_sint_handler	:
CBLOCK 67 1 613

;;{
CLINEA 0000H 0001H 0265H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 67 2 613
CRET 0000H
CARGUMENT 47H 0002H 0024H "func" 0AH 03H 00H 02H 53H 01H 00H 00H 00H 00H 07H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	HAL_GPIO_setInterrupt(func);
CLINEA 0000H 0001H 026AH 0002H 001DH
	bl	_HAL_GPIO_setInterrupt

;;	return status;
CLINEA 0000H 0001H 026CH 0002H 000FH
CBLOCKEND 67 2 621

;;}
CLINEA 0000H 0000H 026DH 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 67 1 621
CFUNCTIONEND 67


	rseg $$phy_sint_ei$phy_ml7396
CFUNCTION 68

_phy_sint_ei	:
CBLOCK 68 1 628

;;{
CLINEA 0000H 0001H 0274H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 68 2 628
CRET 0000H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	HAL_GPIO_enableInterrupt();
CLINEA 0000H 0001H 0279H 0002H 001CH
	bl	_HAL_GPIO_enableInterrupt

;;	return status;
CLINEA 0000H 0001H 027BH 0002H 000FH
CBLOCKEND 68 2 636

;;}
CLINEA 0000H 0000H 027CH 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 68 1 636
CFUNCTIONEND 68


	rseg $$phy_sint_di$phy_ml7396
CFUNCTION 69

_phy_sint_di	:
CBLOCK 69 1 644

;;{
CLINEA 0000H 0001H 0284H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 69 2 644
CRET 0000H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	HAL_GPIO_disableInterrupt();
CLINEA 0000H 0001H 0289H 0002H 001DH
	bl	_HAL_GPIO_disableInterrupt

;;	return status;
CLINEA 0000H 0001H 028BH 0002H 000FH
CBLOCKEND 69 2 652

;;}
CLINEA 0000H 0000H 028CH 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 69 1 652
CFUNCTIONEND 69


	rseg $$phy_timer_handler$phy_ml7396
CFUNCTION 71

_phy_timer_handler	:
CBLOCK 71 1 659

;;{
CLINEA 0000H 0001H 0293H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 71 2 659
CARGUMENT 47H 0002H 0024H "func" 0AH 03H 00H 02H 57H 01H 00H 00H 00H 00H 07H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	hwif.timer.handler = func;
CLINEA 0000H 0001H 0298H 0002H 001BH
	st	er0,	NEAR _hwif

;;	return status;
CLINEA 0000H 0001H 029AH 0002H 000FH
CBLOCKEND 71 2 667

;;}
CLINEA 0000H 0000H 029BH 0001H 0001H
	mov	er0,	#0 
	rt
CBLOCKEND 71 1 667
CFUNCTIONEND 71


	rseg $$phy_timer_ei$phy_ml7396
CFUNCTION 72

_phy_timer_ei	:
CBLOCK 72 1 675

;;{
CLINEA 0000H 0001H 02A3H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 72 2 675
CRET 0000H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	switch (hwif.timer.active) {
CLINEA 0000H 0001H 02A9H 0002H 001DH
	l	er0,	NEAR _hwif+02h
	mov	er2,	er0
CBLOCK 72 3 681
	cmp	r1,	#00h
	bne	_$L77
	mov	r0,	r2
	beq	_$L79

;;	}
CLINEA 0000H 0000H 02B4H 0002H 0002H
_$L77 :

;;	return status;
CLINEA 0000H 0001H 02B9H 0002H 000FH
CBLOCKEND 72 2 698

;;}
CLINEA 0000H 0000H 02BAH 0001H 0001H
	mov	er0,	#0 
	pop	pc

;;		case Disable:
CLINEA 0000H 0001H 02AAH 0003H 000FH
_$L79 :

;;			hwif.timer.active = Enable;
CLINEA 0000H 0001H 02ABH 0004H 001EH
	mov	er0,	#1 
	st	er0,	NEAR _hwif+02h

;;			if (hwif.timer.call_count) {
CLINEA 0000H 0001H 02ACH 0004H 001FH
	l	r0,	NEAR _hwif+04h
	beq	_$L77
CBLOCK 72 4 684

;;				hwif.timer.call_count = 0;
CLINEA 0000H 0001H 02ADH 0005H 001EH
	mov	r0,	#00h
	st	r0,	NEAR _hwif+04h

;;				if (hwif.timer.handler != NULL)
CLINEA 0000H 0001H 02AEH 0005H 0023H
	l	er0,	NEAR _hwif
	beq	_$L77

;;					hwif.timer.handler();
CLINEA 0000H 0001H 02AFH 0006H 001AH
	bl	er0
CBLOCKEND 72 4 688

;;			break;
CLINEA 0000H 0001H 02B1H 0004H 0009H
	bal	_$L77

;;			break;
CLINEA 0000H 0001H 02B3H 0004H 0009H
CBLOCKEND 72 3 692
CBLOCKEND 72 1 698
CFUNCTIONEND 72


	rseg $$phy_timer_di$phy_ml7396
CFUNCTION 73

_phy_timer_di	:
CBLOCK 73 1 706

;;{
CLINEA 0000H 0001H 02C2H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 73 2 706
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	switch (hwif.timer.active) {
CLINEA 0000H 0001H 02C8H 0002H 001DH
	l	er0,	NEAR _hwif+02h
	mov	er2,	er0
CBLOCK 73 3 712
	cmp	r1,	#00h
	bne	_$L89
	mov	r0,	r2
	beq	_$L89

;;	switch (hwif.timer.active) {
CLINEA 0000H 0000H 02C8H 0002H 001DH
	cmp	r2,	#01h
	beq	_$L92

;;	}
CLINEA 0000H 0000H 02CEH 0002H 0002H
_$L89 :

;;	return status;
CLINEA 0000H 0001H 02D3H 0002H 000FH
CBLOCKEND 73 2 724

;;}
CLINEA 0000H 0000H 02D4H 0001H 0001H
	mov	er0,	#0 
	rt

;;		case Enable:
CLINEA 0000H 0001H 02CBH 0003H 000EH
_$L92 :

;;			hwif.timer.active = Disable;
CLINEA 0000H 0001H 02CCH 0004H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _hwif+02h

;;			break;
CLINEA 0000H 0001H 02CDH 0004H 0009H
	bal	_$L89
CBLOCKEND 73 3 718
CBLOCKEND 73 1 724
CFUNCTIONEND 73


	rseg $$phy_timer_start$phy_ml7396
CFUNCTION 74

_phy_timer_start	:
CBLOCK 74 1 732

;;{
CLINEA 0000H 0001H 02DCH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 74 2 732
CRET 0000H
CARGUMENT 46H 0002H 0024H "msec" 02H 00H 01H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	HAL_TIMER_start(msec, timer_handler);
CLINEA 0000H 0001H 02E2H 0002H 0026H
	mov	r2,	#BYTE1 OFFSET _timer_handler
	mov	r3,	#BYTE2 OFFSET _timer_handler
	bl	_HAL_TIMER_start

;;	return status;
CLINEA 0000H 0001H 02E7H 0002H 000FH
CBLOCKEND 74 2 744

;;}
CLINEA 0000H 0000H 02E8H 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 74 1 744
CFUNCTIONEND 74


	rseg $$phy_timer_stop$phy_ml7396
CFUNCTION 75

_phy_timer_stop	:
CBLOCK 75 1 752

;;{
CLINEA 0000H 0001H 02F0H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 75 2 752
CRET 0000H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	HAL_TIMER_stop();
CLINEA 0000H 0001H 02F2H 0002H 0012H
	bl	_HAL_TIMER_stop

;;	return status;
CLINEA 0000H 0001H 02F7H 0002H 000FH
CBLOCKEND 75 2 760

;;}
CLINEA 0000H 0000H 02F8H 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 75 1 760
CFUNCTIONEND 75


	rseg $$phy_timer_tick$phy_ml7396
CFUNCTION 76

_phy_timer_tick	:
CBLOCK 76 1 769

;;{
CLINEA 0000H 0001H 0301H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 76 2 769
CRET 0000H
CARGUMENT 46H 0002H 0024H "msec" 04H 03H 00H 00H 02H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	HAL_TIMER_getTick(msec);
CLINEA 0000H 0001H 0306H 0002H 0019H
	bl	_HAL_TIMER_getTick

;;	return status;
CLINEA 0000H 0001H 0308H 0002H 000FH
CBLOCKEND 76 2 777

;;}
CLINEA 0000H 0000H 0309H 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 76 1 777
CFUNCTIONEND 76


	rseg $$phy_wait_phy_event$phy_ml7396
CFUNCTION 77

_phy_wait_phy_event	:
CBLOCK 77 1 785

;;{
CLINEA 0000H 0001H 0311H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 77 2 785

;;	HAL_wait_event(HAL_PHY_EVENT);
CLINEA 0000H 0001H 0315H 0002H 001FH
	mov	r0,	#00h
	b	_HAL_wait_event
CBLOCKEND 77 2 790
CLINEA 0000H 0001H 0316H 0001H 0001H
CBLOCKEND 77 1 790
CFUNCTIONEND 77


	rseg $$phy_wait_mac_event$phy_ml7396
CFUNCTION 78

_phy_wait_mac_event	:
CBLOCK 78 1 794

;;{
CLINEA 0000H 0001H 031AH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 78 2 794

;;	HAL_wait_event(HAL_MAC_EVENT);
CLINEA 0000H 0001H 031EH 0002H 001FH
	mov	r0,	#01h
	b	_HAL_wait_event
CBLOCKEND 78 2 799
CLINEA 0000H 0001H 031FH 0001H 0001H
CBLOCKEND 78 1 799
CFUNCTIONEND 78


	rseg $$phy_wakeup_phy_event$phy_ml7396
CFUNCTION 79

_phy_wakeup_phy_event	:
CBLOCK 79 1 803

;;{
CLINEA 0000H 0001H 0323H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 79 2 803

;;	HAL_wakeup_event(HAL_PHY_EVENT);
CLINEA 0000H 0001H 0327H 0002H 0021H
	mov	r0,	#00h
	b	_HAL_wakeup_event
CBLOCKEND 79 2 808
CLINEA 0000H 0001H 0328H 0001H 0001H
CBLOCKEND 79 1 808
CFUNCTIONEND 79


	rseg $$phy_wakeup_mac_event$phy_ml7396
CFUNCTION 80

_phy_wakeup_mac_event	:
CBLOCK 80 1 812

;;{
CLINEA 0000H 0001H 032CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 80 2 812

;;	HAL_wakeup_event(HAL_MAC_EVENT);
CLINEA 0000H 0001H 0330H 0002H 0021H
	mov	r0,	#01h
	b	_HAL_wakeup_event
CBLOCKEND 80 2 817
CLINEA 0000H 0001H 0331H 0001H 0001H
CBLOCKEND 80 1 817
CFUNCTIONEND 80


	rseg $$phy_setup$phy_ml7396
CFUNCTION 82

_phy_setup	:
CBLOCK 82 1 831

;;{
CLINEA 0000H 0001H 033FH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_status$6	set	-18
	_reg_data$10	set	-4
	_eui64_extend_type$2	set	-5
	_freq_ch0$14	set	-14
	_freq_min$18	set	-10
	_bpf$32	set	-15
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-026
	push	xr8
	push	xr4
	push	bp
	mov	r11,	r3
	mov	r10,	r2
	mov	er8,	er0
CBLOCK 82 2 831
CRET 0026H
CARGUMENT 46H 0001H 001CH "page" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "ch" 02H 00H 00H
CARGUMENT 46H 0001H 001EH "txPower" 02H 00H 00H
CARGUMENT 46H 0001H 001FH "antsw" 02H 00H 00H
CLOCAL 46H 0001H 0018H 0002H "device_id" 02H 00H 00H
CLOCAL 42H 0001H 0005H 0002H "eui64_extend_type" 02H 00H 00H
CLOCAL 4AH 0002H 0000H 0002H "address" 02H 00H 08H
CLOCAL 43H 0002H 0012H 0002H "status" 02H 00H 01H
CLOCAL 45H 0002H 002AH 0002H "regset" 06H 03H 00H 00H 05H 22H 00H
CLOCAL 42H 0004H 0004H 0002H "reg_data" 05H 01H 04H 00H 00H 00H

;;	int status = -1;
CLINEA 0000H 0001H 0346H 0002H 0011H
	mov	er0,	#-1
	st	er0,	_status$6[fp]

;;	phy_rst();
CLINEA 0000H 0001H 034AH 0002H 000BH
	bl	_phy_rst

;;	phy_inten(HW_EVENT_ALL_MASK);
CLINEA 0000H 0001H 034CH 0002H 001EH
	mov	er0,	#0 
	mov	er2,	#0 
	bl	_phy_inten

;;	phy_intclr(~(HW_EVENT_ALL_MASK | HW_EVENT_FIFO_CLEAR));
CLINEA 0000H 0001H 034DH 0002H 0038H
	mov	r0,	#03fh
	mov	r1,	#0ffh
	mov	er2,	#-1
	bl	_phy_intclr

;;	reg_data[0]=0xC0; reg_data[1]=0x00; reg_data[2]=0x00; reg_data[3]=0x00;
CLINEA 0000H 0001H 0352H 0002H 0048H
	mov	r0,	#0c0h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#00h
	st	r0,	_reg_data$10+01h[fp]
	st	r0,	_reg_data$10+02h[fp]
	st	r0,	_reg_data$10+03h[fp]

;;	reg_wr(REG_ADR_INT_SOURCE_GRP1, reg_data, 4);
CLINEA 0000H 0001H 0353H 0002H 002EH
	mov	r0,	#04h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#024h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	HAL_I2C_read(0x23, reg_data, 1), device_id = reg_data[0];
CLINEA 0000H 0001H 0355H 0002H 003AH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#35
	bl	_HAL_I2C_read
	add	sp,	#2 
	l	r0,	_reg_data$10[fp]
	mov	r4,	r0	;; _ldevice_id$0

;;	reg_data[0] = 0x0f, reg_wr(REG_ADR_CLK_SET,             reg_data, 1);
CLINEA 0000H 0001H 0356H 0002H 0046H
	mov	r0,	#0fh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x22, reg_wr(REG_ADR_RX_PR_LEN_SFD_LEN,   reg_data, 1);
CLINEA 0000H 0001H 0357H 0002H 0046H
	mov	r0,	#022h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#043h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x00, reg_wr(REG_ADR_SYNC_CONDITION,      reg_data, 1);
CLINEA 0000H 0001H 0358H 0002H 0046H
	mov	r0,	#00h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#044h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x04, reg_wr(REG_ADR_2DIV_CNTRL,          reg_data, 1);
CLINEA 0000H 0001H 0359H 0002H 0046H
	mov	r0,	#04h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#071h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;    HAL_I2C_read(0xA0, &eui64_extend_type, 1);
CLINEA 0000H 0001H 0361H 0005H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-5
	mov	r0,	#0a0h
	mov	r1,	#00h
	bl	_HAL_I2C_read
	add	sp,	#2 

;;	if (eui64_extend_type == 0x05 && antsw == 0x00) {
CLINEA 0000H 0001H 0362H 0002H 0032H
	l	r0,	_eui64_extend_type$2[fp]
	cmp	r0,	#05h
	bne	_$L101
	cmp	r11,	#00h
	bne	_$L101
CBLOCK 82 3 866

;;		reg_data[0] = 0x06, reg_wr(REG_ADR_2DIV_CNTRL,      reg_data, 1);
CLINEA 0000H 0001H 0363H 0003H 0043H
	mov	r0,	#06h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#071h
	mov	r0,	#00h
	bl	_reg_wr
CBLOCKEND 82 3 868

;;	}else{
CLINEA 0000H 0000H 0364H 0002H 0007H
	bal	_$L108
_$L101 :
CBLOCK 82 4 868

;;		reg_data[0] = 0x02, reg_wr(REG_ADR_2DIV_CNTRL,      reg_data, 1);
CLINEA 0000H 0001H 0365H 0003H 0043H
	mov	r0,	#02h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#071h
	mov	r0,	#00h
	bl	_reg_wr
CBLOCKEND 82 4 870

;;	}
CLINEA 0000H 0000H 0366H 0002H 0002H
_$L108 :
	add	sp,	#2 

;;	reg_data[0] = 0x04, reg_wr(REG_ADR_SYNC_MODE,           reg_data, 1);
CLINEA 0000H 0001H 036BH 0002H 0046H
	mov	r0,	#04h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#012h
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x10, reg_wr(REG_ADR_RAMP_CNTRL,          reg_data, 1);
CLINEA 0000H 0001H 036CH 0002H 0046H
	mov	r0,	#010h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02ch
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x1e, reg_wr(REG_ADR_GAIN_MtoL,           reg_data, 1);
CLINEA 0000H 0001H 036DH 0002H 0046H
	mov	r0,	#01eh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x02, reg_wr(REG_ADR_GAIN_LtoM,           reg_data, 1);
CLINEA 0000H 0001H 036EH 0002H 0046H
	mov	r0,	#02h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01dh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x9e, reg_wr(REG_ADR_GAIN_HtoM,           reg_data, 1);
CLINEA 0000H 0001H 036FH 0002H 0046H
	mov	r0,	#09eh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01eh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x02, reg_wr(REG_ADR_GAIN_MtoH,           reg_data, 1);
CLINEA 0000H 0001H 0370H 0002H 0046H
	mov	r0,	#02h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01fh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x15, reg_wr(REG_ADR_RSSI_ADJ_M,          reg_data, 1);
CLINEA 0000H 0001H 0371H 0002H 0046H
	mov	r0,	#015h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#020h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x2b, reg_wr(REG_ADR_RSSI_ADJ_L,          reg_data, 1);
CLINEA 0000H 0001H 0372H 0002H 0046H
	mov	r0,	#02bh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#021h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x22, reg_wr(REG_ADR_RSSI_STABLE_TIME,    reg_data, 1);
CLINEA 0000H 0001H 0373H 0002H 0046H
	mov	r0,	#022h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#022h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xd4, reg_wr(REG_ADR_RSSI_VAL_ADJ,        reg_data, 1);
CLINEA 0000H 0001H 0374H 0002H 0046H
	mov	r0,	#0d4h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#023h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x01, reg_wr(REG_ADR_AFC_CNTRL,           reg_data, 1);
CLINEA 0000H 0001H 0375H 0002H 0046H
	mov	r0,	#01h
	st	r0,	_reg_data$10[fp]
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#034h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xaa, reg_wr(REG_ADR_PREAMBLE_SET,        reg_data, 1);
CLINEA 0000H 0001H 0376H 0002H 0046H
	mov	r0,	#0aah
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#039h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x09, reg_wr(REG_ADR_SFD1_SET1,           reg_data, 1);
CLINEA 0000H 0001H 0377H 0002H 0046H
	mov	r0,	#09h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03ah
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x72, reg_wr(REG_ADR_SFD1_SET2,           reg_data, 1);
CLINEA 0000H 0001H 0378H 0002H 0046H
	mov	r0,	#072h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03bh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xf6, reg_wr(REG_ADR_SFD1_SET3,           reg_data, 1);
CLINEA 0000H 0001H 0379H 0002H 0046H
	mov	r0,	#0f6h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x72, reg_wr(REG_ADR_SFD1_SET4,           reg_data, 1);
CLINEA 0000H 0001H 037AH 0002H 0046H
	mov	r0,	#072h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03dh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x5e, reg_wr(REG_ADR_SFD2_SET1,           reg_data, 1);
CLINEA 0000H 0001H 037BH 0002H 0046H
	mov	r0,	#05eh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03eh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x70, reg_wr(REG_ADR_SFD2_SET2,           reg_data, 1);
CLINEA 0000H 0001H 037CH 0002H 0046H
	mov	r0,	#070h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03fh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xc6, reg_wr(REG_ADR_SFD2_SET3,           reg_data, 1);
CLINEA 0000H 0001H 037DH 0002H 0046H
	mov	r0,	#0c6h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#040h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xb4, reg_wr(REG_ADR_SFD2_SET4,           reg_data, 1);
CLINEA 0000H 0001H 037EH 0002H 0046H
	mov	r0,	#0b4h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#041h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xb6, reg_wr(REG_ADR_2DIV_GAIN_CNTRL,     reg_data, 1);
CLINEA 0000H 0001H 037FH 0002H 0046H
	mov	r0,	#0b6h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#06eh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x84, reg_wr(1,0x39,                      reg_data, 1);  /* Hidden register */
CLINEA 0000H 0001H 0380H 0002H 005DH
	mov	r0,	#084h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#039h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x8f, reg_wr(REG_ADR_PLL_CTRL,            reg_data, 1);
CLINEA 0000H 0001H 0381H 0002H 0046H
	mov	r0,	#08fh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03ah
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x32, reg_wr(REG_ADR_RX_ON_ADJ2,          reg_data, 1);
CLINEA 0000H 0001H 0382H 0002H 0046H
	mov	r0,	#032h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#03fh
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x0f, reg_wr(REG_ADR_LNA_GAIN_ADJ_M,      reg_data, 1);
CLINEA 0000H 0001H 0383H 0002H 0046H
	mov	r0,	#0fh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#049h
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x01, reg_wr(REG_ADR_LNA_GAIN_ADJ_L,      reg_data, 1);
CLINEA 0000H 0001H 0384H 0002H 0046H
	mov	r0,	#01h
	st	r0,	_reg_data$10[fp]
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#04ah
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xff, reg_wr(REG_ADR_MIX_GAIN_ADJ_M,      reg_data, 1);
CLINEA 0000H 0001H 0385H 0002H 0046H
	mov	r0,	#0ffh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#04eh
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xff, reg_wr(REG_ADR_MIX_GAIN_ADJ_L,      reg_data, 1);
CLINEA 0000H 0001H 0386H 0002H 0046H
	mov	r0,	#0ffh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#04fh
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xb4, reg_wr(REG_ADR_TX_OFF_ADJ1,         reg_data, 1);
CLINEA 0000H 0001H 0387H 0002H 0046H
	mov	r0,	#0b4h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#055h
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x01, reg_wr(REG_ADR_RSSI_SLOPE_ADJ,      reg_data, 1);
CLINEA 0000H 0001H 0388H 0002H 0046H
	mov	r0,	#01h
	st	r0,	_reg_data$10[fp]
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#05ah
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x04, reg_wr(REG_ADR_PA_ON_ADJ,           reg_data, 1);
CLINEA 0000H 0001H 0389H 0002H 0046H
	mov	r0,	#04h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01eh
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x0a, reg_wr(REG_ADR_RX_ON_ADJ,           reg_data, 1);
CLINEA 0000H 0001H 038AH 0002H 0046H
	mov	r0,	#0ah
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#022h
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x00, reg_wr(REG_ADR_RXD_ADJ,             reg_data, 1);
CLINEA 0000H 0001H 038BH 0002H 0046H
	mov	r0,	#00h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#024h
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x2c, reg_wr(2,0x2d,                      reg_data, 1);  /* Hidden register */
CLINEA 0000H 0001H 038CH 0002H 005DH
	mov	r0,	#02ch
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02dh
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xc0, reg_wr(2,0x2e,                      reg_data, 1);  /* Hidden register */
CLINEA 0000H 0001H 038DH 0002H 005DH
	mov	r0,	#0c0h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02eh
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x17, reg_wr(2,0x2f,                      reg_data, 1);  /* Hidden register */
CLINEA 0000H 0001H 038EH 0002H 005DH
	mov	r0,	#017h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02fh
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x17, reg_wr(2,0x30,                      reg_data, 1);  /* Hidden register */
CLINEA 0000H 0001H 038FH 0002H 005DH
	mov	r0,	#017h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#030h
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;	HAL_I2C_read(0x2b, reg_data, 1), reg_wr(REG_ADR_PA_ADJ1, reg_data, 1);  /*  1mW rough adjustment */
CLINEA 0000H 0001H 0390H 0002H 0064H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#43
	bl	_HAL_I2C_read
	add	sp,	#2 
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#04h
	bl	_reg_wr
	add	sp,	#2 

;;	HAL_I2C_read(0x29, reg_data, 1), reg_wr(REG_ADR_PA_ADJ3, reg_data, 1);  /* 20mW rough adjustment */
CLINEA 0000H 0001H 0391H 0002H 0064H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#41
	bl	_HAL_I2C_read
	add	sp,	#2 
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#06h
	bl	_reg_wr
	add	sp,	#2 

;;	switch (txPower) {
CLINEA 0000H 0001H 0392H 0002H 0013H
CBLOCK 82 5 914
	cmp	r10,	#01h
	bne	_$M29
	b	_$L114
_$M29 :

;;	switch (txPower) {
CLINEA 0000H 0000H 0392H 0002H 0013H
	cmp	r10,	#014h
	bne	_$M30
	b	_$L115
_$M30 :

;;			goto error;
CLINEA 0000H 0001H 039CH 0004H 000EH
	b	_$L116
CBLOCKEND 82 5 925

;;	}
CLINEA 0000H 0000H 039DH 0002H 0002H
_$L112 :
	add	sp,	#2 

;;	reg_data[0] = 0x0f, reg_wr(REG_ADR_SW_OUT_RAMP_ADJ,     reg_data, 1);
CLINEA 0000H 0001H 039EH 0002H 0046H
	mov	r0,	#0fh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#08h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x08, reg_wr(REG_ADR_IQ_MAG_ADJ,          reg_data, 1);
CLINEA 0000H 0001H 039FH 0002H 0046H
	mov	r0,	#08h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#014h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x20, reg_wr(REG_ADR_IQ_PHASE_ADJ,        reg_data, 1);
CLINEA 0000H 0001H 03A0H 0002H 0046H
	mov	r0,	#020h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#015h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x07, reg_wr(REG_ADR_PA_REG_ADJ1,         reg_data, 1);
CLINEA 0000H 0001H 03A2H 0002H 0046H
	mov	r0,	#07h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#033h
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x07, reg_wr(REG_ADR_PA_REG_ADJ2,         reg_data, 1);
CLINEA 0000H 0001H 03A3H 0002H 0046H
	mov	r0,	#07h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#034h
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x07, reg_wr(REG_ADR_PA_REG_ADJ3,         reg_data, 1);
CLINEA 0000H 0001H 03A4H 0002H 0046H
	mov	r0,	#07h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#035h
	mov	r0,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x30, reg_wr(REG_ADR_CCA_LEVEL,           reg_data, 1);
CLINEA 0000H 0001H 03A5H 0002H 0046H
	mov	r0,	#030h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#013h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x04, reg_wr(REG_ADR_TX_PR_LEN,           reg_data, 1);  /* more than 0x04 */
CLINEA 0000H 0001H 03ACH 0002H 005CH
	mov	r0,	#04h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#042h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x1f, reg_wr(REG_ADR_RSSI_LPF_ADJ,        reg_data, 1);
CLINEA 0000H 0001H 03ADH 0002H 0046H
	mov	r0,	#01fh
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#012h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x44, reg_wr(REG_ADR_PLL_CP_ADJ,          reg_data, 1);
CLINEA 0000H 0001H 03AEH 0002H 0046H
	mov	r0,	#044h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#09h
	bl	_reg_wr
	add	sp,	#2 

;;	HAL_I2C_read(0x2d, reg_data, 1), reg_wr(REG_ADR_OSC_ADJ, reg_data, 1);  /* XA */
CLINEA 0000H 0001H 03AFH 0002H 0051H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#45
	bl	_HAL_I2C_read
	add	sp,	#2 
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#0bh
	mov	r0,	#08h
	bl	_reg_wr
	add	sp,	#2 

;;	if (device_id == DEIVE_ID_LAPIS) {
CLINEA 0000H 0001H 03B0H 0002H 0023H
	cmp	r4,	#0d0h
	bne	_$L117
CBLOCK 82 6 944

;;		HAL_I2C_read(0x80, reg_data, 1), reg_wr(REG_ADR_OSC_ADJ2, reg_data, 1);  /* XA */
CLINEA 0000H 0001H 03B1H 0003H 0053H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r0,	#080h
	mov	r1,	#00h
	bl	_HAL_I2C_read
	add	sp,	#2 
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#0ah
	mov	r0,	#08h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 82 6 948

;;	}
CLINEA 0000H 0000H 03B4H 0002H 0002H
_$L117 :

;;	switch (page) {
CLINEA 0000H 0001H 03BBH 0002H 0010H
CBLOCK 82 7 955
	cmp	r8,	#01h
	bne	_$M31
	b	_$L124
_$M31 :

;;	switch (page) {
CLINEA 0000H 0000H 03BBH 0002H 0010H
	cmp	r8,	#02h
	bne	_$M32
	b	_$L125
_$M32 :

;;			goto error;
CLINEA 0000H 0001H 03C3H 0004H 000EH
	b	_$L116
CBLOCKEND 82 7 964

;;	}
CLINEA 0000H 0000H 03C4H 0002H 0002H
_$L122 :

;;	reg_data[0] = regset->rate, reg_wr(REG_ADR_DATA_SET, reg_data, 1);
CLINEA 0000H 0001H 03C6H 0002H 0043H
	l	r0,	[bp]
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#047h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCK 82 8 967
CLOCAL 42H 0004H 000EH 0008H "freq_ch0" 02H 00H 02H
CLOCAL 42H 0004H 000AH 0008H "freq_min" 02H 00H 02H
CLOCAL 4AH 0001H 0000H 0008H "n4" 02H 00H 00H
CLOCAL 4AH 0001H 0000H 0008H "a" 02H 00H 00H
CLOCAL 4AH 0004H 0000H 0008H "f" 02H 00H 02H

;;		if (ch < 24 || ch > 61)
CLINEA 0000H 0001H 03CCH 0003H 0019H
	cmp	r9,	#018h
	bge	_$M33
	b	_$L116
_$M33 :
	cmp	r9,	#03dh
	ble	_$L126

;;			goto error;
CLINEA 0000H 0001H 03CDH 0004H 000EH
	b	_$L116
_$L126 :

;;		if (page == 2 && ch == 32)
CLINEA 0000H 0001H 03CEH 0003H 001CH
	cmp	r8,	#02h
	bne	_$L133
	cmp	r9,	#020h
	bne	_$M34
	b	_$L116
_$M34 :

;;			goto error;
CLINEA 0000H 0001H 03CFH 0004H 000EH
_$L133 :

;;		if (ch <= 32) {
CLINEA 0000H 0001H 03D1H 0003H 0011H
	cmp	r9,	#020h
	bgt	_$L140
CBLOCK 82 9 977

;;			reg_data[0] = 0x01, reg_wr(REG_ADR_IDLE_WAIT_H, reg_data, 1);
CLINEA 0000H 0001H 03D2H 0004H 0040H
	mov	r0,	#01h
	st	r0,	_reg_data$10[fp]
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#018h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;			reg_data[0] = 0x18, reg_wr(REG_ADR_IDLE_WAIT_L, reg_data, 1);
CLINEA 0000H 0001H 03D3H 0004H 0040H
	mov	r0,	#018h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#017h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		} else
CLINEA 0000H 0000H 03D4H 0003H 0008H
	bal	_$L143
_$L140 :

;;			if (ch <= 61 ) {
CLINEA 0000H 0001H 03D5H 0004H 0013H
	cmp	r9,	#03dh
	bgt	_$L143
CBLOCK 82 10 981

;;				reg_data[0] = 0x00, reg_wr(REG_ADR_IDLE_WAIT_H, reg_data, 1);
CLINEA 0000H 0001H 03D6H 0005H 0041H
	mov	r0,	#00h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#018h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;				reg_data[0] = 0x64, reg_wr(REG_ADR_IDLE_WAIT_L, reg_data, 1);
CLINEA 0000H 0001H 03D8H 0005H 0041H
	mov	r0,	#064h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#017h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 82 10 985

;;			}
CLINEA 0000H 0000H 03D9H 0004H 0004H
_$L143 :

;;		freq_ch0 = regset->freq[ch - 24];
CLINEA 0000H 0001H 03DAH 0003H 0023H
	mov	r0,	r9
	mov	r1,	#00h
	sllc	r1,	#02h
	sll	r0,	#02h
	add	er0,	bp
	l	er4,	0ffa2h[er0]
	l	er6,	0ffa4h[er0]
	st	er4,	_freq_ch0$14[fp]
	st	er6,	_freq_ch0$14+02h[fp]

;;		freq_min = freq_ch0 - FIXQ(2.0, 20, uint32_t);
CLINEA 0000H 0001H 03DEH 0003H 0030H
	mov	er0,	er4
	mov	er2,	er6
	add	er0,	#0 
	addc	r2,	#0e0h
	addc	r3,	#0ffh
	st	er0,	_freq_min$18[fp]
	st	er2,	_freq_min$18+02h[fp]

;;		freq_ch0 /= 36;
CLINEA 0000H 0001H 03DFH 0003H 0011H
	push	xr4
	mov	er0,	#36
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	_freq_ch0$14[fp]
	st	er2,	_freq_ch0$14+02h[fp]

;;		freq_min /= 36;
CLINEA 0000H 0001H 03E0H 0003H 0011H
	l	er0,	_freq_min$18[fp]
	l	er2,	_freq_min$18+02h[fp]
	push	xr0
	mov	er0,	#36
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	_freq_min$18[fp]
	st	er2,	_freq_min$18+02h[fp]

;;		if (INTQ(freq_min, 20) != INTQ(freq_ch0, 20))  /* invalid as for the setting to step over the 36MHz border */
CLINEA 0000H 0000H 03E1H 0000H 0000H
	mov	er0,	er2
	srlc	r0,	#04h
	srl	r1,	#04h
	mov	er2,	#0 
	st	er0,	-26[fp]
	st	er2,	-24[fp]
	l	er4,	_freq_ch0$14+02h[fp]
	srlc	r4,	#04h
	srl	r5,	#04h
	mov	er6,	#0 
	st	er4,	-22[fp]
	st	er6,	-20[fp]

;;		if (INTQ(freq_min, 20) != INTQ(freq_ch0, 20))  /* invalid as for the setting to step over the 36MHz border */
CLINEA 0000H 0001H 03E1H 0003H 006FH
	cmp	er0,	er4
	cmpc	r2,	r6
	cmpc	r3,	r7
	beq	_$M35
	b	_$L116
_$M35 :
CBLOCKEND 82 9 1068

;;		reg_data[0] = f >>  0 & 0xff, reg_data[1] = f >>  8 & 0xff, reg_data[2] = f >> 16 & 0x0f;
CLINEA 0000H 0001H 03E6H 0003H 005BH
	l	r0,	_freq_ch0$14[fp]
	st	r0,	_reg_data$10[fp]
	l	er0,	_freq_ch0$14[fp]
	l	er2,	_freq_ch0$14+02h[fp]
	and	r2,	#0fh
	and	r3,	#00h
	st	r1,	_reg_data$10+01h[fp]
	mov	er0,	er2
	and	r0,	#0fh
	st	r0,	_reg_data$10+02h[fp]

;;		reg_data[3] = n4 << 2 | a;
CLINEA 0000H 0001H 03E7H 0003H 001CH
	l	er2,	_freq_ch0$14+02h[fp]
	srlc	r2,	#02h
	srl	r3,	#02h
	mov	er0,	er2
	srlc	r0,	#04h
	and	r0,	#0fh
	sll	r0,	#02h
	l	r4,	-22[fp]
	sub	r4,	r0
	and	r4,	#03h
	sll	r0,	#02h
	or	r0,	r4
	st	r0,	_reg_data$10+03h[fp]

;;		reg_wr(REG_ADR_CH0_FL, reg_data, 4);  /* A special command: I set a value of bp.param[BP_PARAM_CH0_FL] */
CLINEA 0000H 0001H 03E8H 0003H 006BH
	mov	r0,	#04h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#048h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data[0] = f >>  0 & 0xff, reg_data[1] = f >>  8 & 0xff, reg_data[2] = f >> 16 & 0x0f;
CLINEA 0000H 0001H 03ECH 0003H 005BH
	l	r0,	_freq_min$18[fp]
	st	r0,	_reg_data$10[fp]
	l	er0,	_freq_min$18[fp]
	l	er2,	_freq_min$18+02h[fp]
	and	r2,	#0fh
	and	r3,	#00h
	st	r1,	_reg_data$10+01h[fp]
	mov	er0,	er2
	and	r0,	#0fh
	st	r0,	_reg_data$10+02h[fp]

;;		reg_data[3] = n4 << 2 | a;  /* These data are not used */
CLINEA 0000H 0001H 03EDH 0003H 003BH
	l	er2,	_freq_min$18+02h[fp]
	srlc	r2,	#02h
	srl	r3,	#02h
	mov	er0,	er2
	srlc	r0,	#04h
	and	r0,	#0fh
	sll	r0,	#02h
	l	r4,	-26[fp]
	sub	r4,	r0
	and	r4,	#03h
	sll	r0,	#02h
	or	r0,	r4
	st	r0,	_reg_data$10+03h[fp]

;;		reg_wr(REG_ADR_VCO_CAL_MIN_FL, reg_data, 3);
CLINEA 0000H 0001H 03EFH 0003H 002EH
	mov	r0,	#03h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#016h
	mov	r0,	#01h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data[0] = 0x07, reg_wr(REG_ADR_VCO_CAL_MAX_N, reg_data, 1);
CLINEA 0000H 0001H 03F1H 0003H 0041H
	mov	r0,	#07h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#019h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 82 8 1010
CBLOCK 82 11 1011
CLOCAL 46H 0002H 0025H 000BH "n" 02H 00H 08H

;;		n = regset->chspc / 36;
CLINEA 0000H 0001H 03F7H 0003H 0019H
	mov	er0,	bp
	l	er4,	09ah[er0]
	l	er6,	09ch[er0]
	push	xr4
	mov	er0,	#36
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0

;;		reg_data[0] = n >>  0 & 0xff, reg_data[1] = n >>  8 & 0xff;
CLINEA 0000H 0001H 03F8H 0003H 003DH
	st	r0,	_reg_data$10[fp]
	st	r1,	_reg_data$10+01h[fp]

;;		reg_wr(REG_ADR_CH_SPACE_L, reg_data, 2);
CLINEA 0000H 0001H 03F9H 0003H 002AH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#04ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		n = regset->iffreq / 36;
CLINEA 0000H 0001H 03FBH 0003H 001AH
	mov	er0,	bp
	l	er4,	09eh[er0]
	l	er6,	0a0h[er0]
	push	xr4
	mov	er0,	#36
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0

;;		reg_data[0] = n >>  8 & 0xff, reg_data[1] = n >>  0 & 0xff;
CLINEA 0000H 0001H 03FCH 0003H 003DH
	st	r1,	_reg_data$10[fp]
	st	r0,	_reg_data$10+01h[fp]

;;		reg_wr(REG_ADR_IF_FREQ_H, reg_data, 2);
CLINEA 0000H 0001H 03FDH 0003H 0029H
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#0ah
	mov	r0,	#01h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_wr(REG_ADR_IF_FREQ_AFC_H, reg_data, 2);
CLINEA 0000H 0001H 03FEH 0003H 002DH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#030h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		n = regset->iffreq_cca / 36;
CLINEA 0000H 0001H 03FFH 0003H 001EH
	mov	er0,	bp
	l	er4,	0a2h[er0]
	l	er6,	0a4h[er0]
	push	xr4
	mov	er0,	#36
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0

;;		reg_data[0] = n >>  8 & 0xff, reg_data[1] = n >>  0 & 0xff;
CLINEA 0000H 0001H 0400H 0003H 003DH
	st	r1,	_reg_data$10[fp]
	st	r0,	_reg_data$10+01h[fp]

;;		reg_wr(REG_ADR_IF_FREQ_CCA_H, reg_data, 2);
CLINEA 0000H 0001H 0401H 0003H 002DH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#0ch
	mov	r0,	#01h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 82 11 1026
CBLOCK 82 12 1027
CLOCAL 42H 0001H 000FH 000CH "bpf" 02H 00H 00H
CLOCAL 46H 0002H 0025H 000CH "n" 02H 00H 08H

;;		reg_rd(REG_ADR_BPF_ADJ_OFFSET, reg_data, 1), bpf = reg_data[0];
CLINEA 0000H 0001H 0407H 0003H 0041H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#01eh
	bl	_reg_rd
	add	sp,	#2 
	l	r0,	_reg_data$10[fp]
	st	r0,	_bpf$32[fp]

;;		if (bpf & 0x80)
CLINEA 0000H 0001H 0408H 0003H 0011H
	tb	r0.7
	beq	_$L147

;;			n = regset->ref + (uint16_t)INTQ((uint32_t)(bpf & 0x7f) * regset->coef, 14);
CLINEA 0000H 0001H 0409H 0004H 004FH
	mov	er0,	bp
	l	er4,	0a6h[er0]
	mov	er6,	#0 
	l	r0,	_bpf$32[fp]
	mov	r1,	#00h
	and	r0,	#07fh
	and	r1,	#00h
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	push	xr4
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	mov	r0,	r1
	mov	r1,	r2
	mov	r2,	r3
	srlc	r0,	#06h
	srlc	r1,	#06h
	mov	er2,	bp
	l	er2,	0a8h[er2]
	add	er0,	er2

;;		else
CLINEA 0000H 0001H 040AH 0003H 0006H
	bal	_$L149
_$L147 :

;;			n = regset->ref - (uint16_t)INTQ((uint32_t)(bpf & 0x7f) * regset->coef, 14);
CLINEA 0000H 0001H 040BH 0004H 004FH
	mov	er0,	bp
	l	er4,	0a6h[er0]
	mov	er6,	#0 
	l	r0,	_bpf$32[fp]
	mov	r1,	#00h
	and	r0,	#07fh
	and	r1,	#00h
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	push	xr4
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	mov	r0,	r1
	mov	r1,	r2
	mov	r2,	r3
	srlc	r0,	#06h
	srlc	r1,	#06h
	mov	er2,	er0
	mov	er0,	bp
	l	er0,	0a8h[er0]
	sub	r0,	r2
	subc	r1,	r3
_$L149 :

;;		reg_data[0] = n >> 8 & 0xff, reg_data[1] = n >> 0 & 0xff;
CLINEA 0000H 0001H 040CH 0003H 003BH
	st	r1,	_reg_data$10[fp]
	st	r0,	_reg_data$10+01h[fp]

;;		reg_wr(REG_ADR_BPF_ADJ_H,     reg_data, 2);
CLINEA 0000H 0001H 040DH 0003H 002DH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#0eh
	mov	r0,	#01h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_wr(REG_ADR_BPF_AFC_ADJ_H, reg_data, 2);
CLINEA 0000H 0001H 040EH 0003H 002DH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#032h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		if (bpf & 0x80)
CLINEA 0000H 0001H 040FH 0003H 0011H
	l	r0,	_bpf$32[fp]
	tb	r0.7
	beq	_$L150

;;			n = regset->ref_cca + (uint16_t)INTQ((uint32_t)(bpf & 0x7f) * regset->coef_cca, 14);
CLINEA 0000H 0001H 0410H 0004H 0057H
	mov	er0,	bp
	l	er4,	0aah[er0]
	mov	er6,	#0 
	l	r0,	_bpf$32[fp]
	mov	r1,	#00h
	and	r0,	#07fh
	and	r1,	#00h
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	push	xr4
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	mov	r0,	r1
	mov	r1,	r2
	mov	r2,	r3
	srlc	r0,	#06h
	srlc	r1,	#06h
	mov	er2,	bp
	l	er2,	0ach[er2]
	add	er0,	er2

;;		else
CLINEA 0000H 0001H 0411H 0003H 0006H
	bal	_$L152
_$L150 :

;;			n = regset->ref_cca - (uint16_t)INTQ((uint32_t)(bpf & 0x7f) * regset->coef_cca, 14);
CLINEA 0000H 0001H 0412H 0004H 0057H
	mov	er0,	bp
	l	er4,	0aah[er0]
	mov	er6,	#0 
	l	r0,	_bpf$32[fp]
	mov	r1,	#00h
	and	r0,	#07fh
	and	r1,	#00h
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	push	xr4
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	mov	r0,	r1
	mov	r1,	r2
	mov	r2,	r3
	srlc	r0,	#06h
	srlc	r1,	#06h
	mov	er2,	er0
	mov	er0,	bp
	l	er0,	0ach[er0]
	sub	r0,	r2
	subc	r1,	r3
_$L152 :

;;		reg_data[0] = n >> 8 & 0xff, reg_data[1] = n >> 0 & 0xff;
CLINEA 0000H 0001H 0413H 0003H 003BH
	st	r1,	_reg_data$10[fp]
	st	r0,	_reg_data$10+01h[fp]

;;		reg_wr(REG_ADR_BPF_CCA_ADJ_H, reg_data, 2);
CLINEA 0000H 0001H 0414H 0003H 002DH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#010h
	mov	r0,	#01h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 82 12 1045

;;	reg_data[0] = 0x2c, reg_wr(REG_ADR_PRIVATE_BPF_CAP1,  reg_data, 1);
CLINEA 0000H 0001H 0417H 0002H 0044H
	mov	r0,	#02ch
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02dh
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0xc0, reg_wr(REG_ADR_PRIVATE_BPF_CAP2,  reg_data, 1);
CLINEA 0000H 0001H 0418H 0002H 0044H
	mov	r0,	#0c0h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02eh
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x17, reg_wr(REG_ADR_PRIVATE_BPF_ADJ1,  reg_data, 1);
CLINEA 0000H 0001H 0419H 0002H 0044H
	mov	r0,	#017h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#02fh
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = 0x17, reg_wr(REG_ADR_PRIVATE_BPF_ADJ2,  reg_data, 1);
CLINEA 0000H 0001H 041AH 0002H 0044H
	mov	r0,	#017h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#030h
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = regset->fdev >> 0 & 0xff, reg_data[1] = regset->fdev >> 8 & 0xff;
CLINEA 0000H 0001H 041DH 0002H 0050H
	mov	er0,	bp
	l	r0,	0aeh[er0]
	st	r0,	_reg_data$10[fp]
	mov	er0,	bp
	l	r0,	0afh[er0]
	st	r0,	_reg_data$10+01h[fp]

;;	reg_data[0] = 0xb0, reg_wr(REG_ADR_F_DEV_L, reg_data, 2);
CLINEA 0000H 0001H 041EH 0002H 003AH
	mov	r0,	#0b0h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#04eh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = regset->reg1, reg_wr(2,0x0e, reg_data, 1);
CLINEA 0000H 0001H 0420H 0002H 0039H
	mov	er0,	bp
	l	r0,	0b0h[er0]
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#0eh
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_data[0] = regset->div, reg_wr(REG_ADR_2DIV_SEARCH, reg_data, 1);
CLINEA 0000H 0001H 0422H 0002H 0045H
	mov	er0,	bp
	l	r0,	0b1h[er0]
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#06fh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	HAL_I2C_read(0x26, reg_data, 2), address = H2LS(*reg_data);
CLINEA 0000H 0001H 0425H 0002H 003CH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#38
	bl	_HAL_I2C_read
	add	sp,	#2 

;;	vco_cal();
CLINEA 0000H 0001H 0427H 0002H 000BH
	bl	_vco_cal

;;	status = 0;
CLINEA 0000H 0001H 0429H 0002H 000CH
	mov	er0,	#0 
	st	er0,	_status$6[fp]

;;error:
CLINEA 0000H 0001H 042AH 0001H 0006H
CLABEL 0074H "error"
_$L116 :

;;	return status;
CLINEA 0000H 0001H 042BH 0002H 000FH
	l	er0,	_status$6[fp]
CBLOCKEND 82 2 1068

;;}
CLINEA 0000H 0000H 042CH 0001H 0001H
	pop	bp
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc

;;		case  1:  /*  1mW */
CLINEA 0000H 0001H 0393H 0003H 0016H
_$L114 :

;;			HAL_I2C_read(0x2c, reg_data, 1), reg_wr(REG_ADR_PA_REG_FINE_ADJ, reg_data, 1);
CLINEA 0000H 0001H 0394H 0004H 0051H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#44
	bl	_HAL_I2C_read
	add	sp,	#2 
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#013h
	bl	_reg_wr
	add	sp,	#2 

;;			reg_data[0] = 0x01, reg_wr(REG_ADR_PA_CNTRL,                    reg_data, 1);
CLINEA 0000H 0001H 0395H 0004H 0050H
	mov	r0,	#01h
	st	r0,	_reg_data$10[fp]
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#07h
	bl	_reg_wr

;;			break;
CLINEA 0000H 0001H 0396H 0004H 0009H
	b	_$L112

;;		case 20:  /* 20mW */
CLINEA 0000H 0001H 0397H 0003H 0016H
_$L115 :

;;			HAL_I2C_read(0x2a, reg_data, 1), reg_wr(REG_ADR_PA_REG_FINE_ADJ, reg_data, 1);
CLINEA 0000H 0001H 0398H 0004H 0051H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	er0,	#42
	bl	_HAL_I2C_read
	add	sp,	#2 
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#013h
	bl	_reg_wr
	add	sp,	#2 

;;			reg_data[0] = 0x13, reg_wr(REG_ADR_PA_CNTRL,                    reg_data, 1);
CLINEA 0000H 0001H 0399H 0004H 0050H
	mov	r0,	#013h
	st	r0,	_reg_data$10[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-4
	mov	r1,	#07h
	bl	_reg_wr

;;			break;
CLINEA 0000H 0001H 039AH 0004H 0009H
	b	_$L112

;;		case  1:  /*  50kbps */
CLINEA 0000H 0001H 03BCH 0003H 0019H
_$L124 :

;;			regset = &regset_50kbps;
CLINEA 0000H 0001H 03BDH 0004H 001BH
	mov	r12,	#BYTE1 OFFSET _regset_50kbps
	mov	r13,	#BYTE2 OFFSET _regset_50kbps

;;			break;
CLINEA 0000H 0001H 03BEH 0004H 0009H
	b	_$L122

;;		case 2:  /* 100kbps */
CLINEA 0000H 0001H 03BFH 0003H 0018H
_$L125 :

;;			regset = &regset_100kbps;
CLINEA 0000H 0001H 03C0H 0004H 001CH
	mov	r12,	#BYTE1 OFFSET _regset_100kbps
	mov	r13,	#BYTE2 OFFSET _regset_100kbps

;;			break;
CLINEA 0000H 0001H 03C1H 0004H 0009H
	b	_$L122
CBLOCKEND 82 1 1068
CFUNCTIONEND 82


	rseg $$phy_init$phy_ml7396
CFUNCTION 81

_phy_init	:
CBLOCK 81 1 1072

;;{
CLINEA 0000H 0001H 0430H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_wait_t$2	set	-4
	_reg_data$0	set	-5
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-06
CBLOCK 81 2 1072
CRET 0008H
CLOCAL 42H 0001H 0005H 0002H "reg_data" 02H 00H 00H
CLOCAL 42H 0004H 0004H 0002H "wait_t" 02H 00H 02H
CLOCAL 47H 0002H 0024H 0002H "status" 02H 00H 01H

;;	hwif.timer.handler = NULL;
CLINEA 0000H 0001H 0435H 0002H 001BH
	mov	er0,	#0 
	st	er0,	NEAR _hwif

;;	hwif.timer.active = Disable;
CLINEA 0000H 0001H 0437H 0002H 001DH
	st	er0,	NEAR _hwif+02h

;;	hwif.timer.call_count = 0;
CLINEA 0000H 0001H 0438H 0002H 001BH
	st	r0,	NEAR _hwif+04h

;;	status = HAL_init();
CLINEA 0000H 0000H 043AH 0002H 0015H
	bl	_HAL_init

;;	if(status == 0){
CLINEA 0000H 0001H 043BH 0002H 0011H
	mov	er0,	er0
	bne	_$L154
CBLOCK 81 3 1083

;;		HAL_TIMER_setup();
CLINEA 0000H 0001H 043EH 0003H 0014H
	bl	_HAL_TIMER_setup

;;		phy_timer_tick(&wait_t);
CLINEA 0000H 0001H 0440H 0003H 001AH
	mov	er0,	fp
	add	er0,	#-4
	bl	_phy_timer_tick

;;		regbank(0xff);
CLINEA 0000H 0001H 0441H 0003H 0010H
	mov	r0,	#0ffh
	bl	_regbank

;;		do {
CLINEA 0000H 0001H 0442H 0003H 0006H
_$L158 :
CBLOCK 81 4 1090

;;			HAL_delayMicroseconds(100);
CLINEA 0000H 0001H 0443H 0004H 001EH
	mov	r0,	#064h
	mov	r1,	#00h
	mov	er2,	#0 
	bl	_HAL_delayMicroseconds

;;			reg_rd(REG_ADR_CLK_SET, &reg_data, 1);
CLINEA 0000H 0001H 0444H 0004H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-5
	mov	r1,	#02h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 
CBLOCKEND 81 4 1093

;;		} while (!(reg_data & 0x80));
CLINEA 0000H 0000H 0445H 0003H 001FH
	l	r0,	_reg_data$0[fp]
	tb	r0.7
	beq	_$L158

;;		reg_data = 0x00; reg_wr(REG_ADR_INT_SOURCE_GRP1, &reg_data, 1);
CLINEA 0000H 0001H 0446H 0003H 0041H
	mov	r0,	#00h
	st	r0,	_reg_data$0[fp]
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-5
	mov	r1,	#024h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 81 3 1095

;;	}
CLINEA 0000H 0000H 0447H 0002H 0002H
_$L154 :

;;	memset(reg.rdata,0,sizeof(reg.rdata));
CLINEA 0000H 0001H 0449H 0002H 0027H
	mov	er0,	#8 
	push	er0
	mov	er2,	#0 
	mov	r0,	#BYTE1 OFFSET (_reg+02h)
	mov	r1,	#BYTE2 OFFSET (_reg+02h)
	bl	_memset_n
	add	sp,	#2 

;;	memset(reg.wdata,0,sizeof(reg.wdata));
CLINEA 0000H 0001H 044AH 0002H 0027H
	mov	er0,	#8 
	push	er0
	mov	er2,	#0 
	mov	r0,	#BYTE1 OFFSET (_reg+0ah)
	mov	r1,	#BYTE2 OFFSET (_reg+0ah)
	bl	_memset_n
	add	sp,	#2 

;;	memset(reg.rfifo,0,sizeof(reg.rfifo));
CLINEA 0000H 0001H 044BH 0002H 0027H
	mov	r0,	#04h
	mov	r1,	#01h
	push	er0
	mov	er2,	#0 
	mov	r0,	#BYTE1 OFFSET (_reg+012h)
	mov	r1,	#BYTE2 OFFSET (_reg+012h)
	bl	_memset_n
	add	sp,	#2 

;;	memset(reg.wfifo,0,sizeof(reg.wfifo));
CLINEA 0000H 0001H 044CH 0002H 0027H
	mov	r0,	#04h
	mov	r1,	#01h
	push	er0
	mov	er2,	#0 
	mov	r0,	#BYTE1 OFFSET (_reg+0116h)
	mov	r1,	#BYTE2 OFFSET (_reg+0116h)
	bl	_memset_n
	add	sp,	#2 

;;	phy.in.size = BUFFER_SIZE;
CLINEA 0000H 0001H 044DH 0002H 001BH
	mov	r0,	#00h
	mov	r1,	#01h
	st	er0,	NEAR _phy+08h

;;	phy.in.data = reg.rfifo+1;
CLINEA 0000H 0001H 044EH 0002H 001BH
	mov	r0,	#BYTE1 OFFSET (_reg+013h)
	mov	r1,	#BYTE2 OFFSET (_reg+013h)
	st	er0,	NEAR _phy+04h

;;	phy.in.len = 0;
CLINEA 0000H 0001H 044FH 0002H 0010H
	mov	er0,	#0 
	st	er0,	NEAR _phy+06h

;;	phy.out.size = BUFFER_SIZE;
CLINEA 0000H 0001H 0450H 0002H 001CH
	mov	r1,	#01h
	st	er0,	NEAR _phy+0eh

;;	phy.out.len = 0;
CLINEA 0000H 0001H 0451H 0002H 0011H
	mov	er0,	#0 
	st	er0,	NEAR _phy+0ch

;;	phy.out.data = reg.wfifo+1;
CLINEA 0000H 0001H 0452H 0002H 001CH
	mov	r0,	#BYTE1 OFFSET (_reg+0117h)
	mov	r1,	#BYTE2 OFFSET (_reg+0117h)
	st	er0,	NEAR _phy+0ah

;;	reg_rd(REG_ADR_RF_STATUS, &reg_data, 1);
CLINEA 0000H 0001H 0454H 0002H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-5
	mov	r1,	#06ch
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	return &phy;
CLINEA 0000H 0001H 045AH 0002H 000DH
	mov	r0,	#BYTE1 OFFSET _phy
	mov	r1,	#BYTE2 OFFSET _phy
CBLOCKEND 81 2 1115

;;}
CLINEA 0000H 0000H 045BH 0001H 0001H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 81 1 1115
CFUNCTIONEND 81


	rseg $$phy_rxStart$phy_ml7396
CFUNCTION 83

_phy_rxStart	:
CBLOCK 83 1 1132

;;{
CLINEA 0000H 0001H 046CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 83 2 1132
CRET 0000H

;;	phy_intclr(~(HW_EVENT_ALL_MASK | HW_EVENT_FIFO_CLEAR));
CLINEA 0000H 0001H 046DH 0002H 0038H
	mov	r0,	#03fh
	mov	r1,	#0ffh
	mov	er2,	#-1
	bl	_phy_intclr

;;	phy_inten(HW_EVENT_RX_DONE | HW_EVENT_ADD_FIL_DONE);
CLINEA 0000H 0001H 0471H 0002H 0035H
	mov	er0,	#8 
	mov	er2,	#12
	bl	_phy_inten

;;	phy_rst();
CLINEA 0000H 0001H 0472H 0002H 000BH
	bl	_phy_rst

;;	phy_set_trx_state(PHY_ST_RXON);
CLINEA 0000H 0001H 0473H 0002H 0020H
	mov	er0,	#6 
	bl	_phy_set_trx_state
CBLOCKEND 83 2 1143

;;}
CLINEA 0000H 0001H 0477H 0001H 0001H
	pop	pc
CBLOCKEND 83 1 1143
CFUNCTIONEND 83


	rseg $$phy_txStart$phy_ml7396
CFUNCTION 84

_phy_txStart	:
CBLOCK 84 1 1152

;;{
CLINEA 0000H 0001H 0480H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-2
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
	push	xr8
	push	xr4
	mov	er8,	er0
	mov	r10,	r2
CBLOCK 84 2 1152
CRET 000CH
CARGUMENT 47H 0002H 0028H "buff" 06H 03H 00H 00H 05H 01H 00H
CARGUMENT 46H 0001H 001EH "mode" 02H 00H 00H
CLOCAL 42H 0002H 0002H 0002H "reg_data" 05H 01H 02H 00H 00H 00H
CLOCAL 46H 0002H 0026H 0002H "length" 02H 00H 08H
CLOCAL 46H 0002H 0027H 0002H "payload" 04H 03H 00H 00H 00H

;;	uint16_t length = buff->len;
CLINEA 0000H 0001H 0482H 0002H 001DH
	l	er0,	02h[er0]
	mov	er4,	er0	;; _llength$2

;;	uint8_t *payload = buff->data;
CLINEA 0000H 0001H 0483H 0002H 001FH
	l	er6,	[er8]

;;	reg_data[0] = PHY_REG_SET_TX_DONE_OFF;
CLINEA 0000H 0001H 048AH 0002H 0027H
	mov	r0,	#010h
	st	r0,	_reg_data$0[fp]

;;	reg_wr(REG_ADR_ACK_TIMER_EN, reg_data, 1);
CLINEA 0000H 0001H 048BH 0002H 002BH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#052h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	if(mode == 1) {
CLINEA 0000H 0001H 048EH 0002H 0010H
	cmp	r10,	#01h
	bne	_$L164
CBLOCK 84 3 1166

;;		phy_inten(HW_EVENT_TX_FIFO_DONE);
CLINEA 0000H 0001H 048FH 0003H 0023H
	mov	er0,	#0 
	mov	r2,	#0c0h
	mov	r3,	#00h
	bl	_phy_inten

;;	}else
CLINEA 0000H 0000H 0490H 0002H 0006H
	bal	_$L169
_$L164 :

;;		if(mode == 2) {
CLINEA 0000H 0001H 0491H 0003H 0011H
	cmp	r10,	#02h
	bne	_$L167
CBLOCK 84 4 1169

;;			reg_rd(REG_ADR_PACKET_MODE_SET, reg_data, 1);
CLINEA 0000H 0001H 0492H 0004H 0030H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#045h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;			reg_data[0] |= 0x04;    // auto tx on
CLINEA 0000H 0001H 0493H 0004H 0028H
	l	r0,	_reg_data$0[fp]
	or	r0,	#04h
	st	r0,	_reg_data$0[fp]

;;			reg_wr(REG_ADR_PACKET_MODE_SET, reg_data, 1);
CLINEA 0000H 0001H 0494H 0004H 0030H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#045h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;			phy_inten(HW_EVENT_TX_DONE);
CLINEA 0000H 0001H 0496H 0004H 001FH
	mov	er0,	#0 
	mov	er2,	#3 
	bl	_phy_inten
CBLOCKEND 84 4 1175

;;		}else
CLINEA 0000H 0000H 0497H 0003H 0007H
	bal	_$L169
_$L167 :
CBLOCK 84 5 1176

;;			reg_rd(REG_ADR_PACKET_MODE_SET, reg_data, 1);
CLINEA 0000H 0001H 0499H 0004H 0030H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#045h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;			reg_data[0] &= ~0x04;    // auto tx off
CLINEA 0000H 0001H 049AH 0004H 002AH
	l	r0,	_reg_data$0[fp]
	and	r0,	#0fbh
	st	r0,	_reg_data$0[fp]

;;			reg_wr(REG_ADR_PACKET_MODE_SET, reg_data, 1);
CLINEA 0000H 0001H 049BH 0004H 0030H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#045h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 84 5 1180

;;		}
CLINEA 0000H 0000H 049CH 0003H 0003H
_$L169 :

;;	reg_data[0] = 0x18;             // PHR
CLINEA 0000H 0001H 049FH 0002H 0027H
	mov	r0,	#018h
	st	r0,	_reg_data$0[fp]

;;	reg_data[1] = 2 + length;       // length : crc size + payload length
CLINEA 0000H 0001H 04A0H 0002H 0046H
	mov	r0,	r4
	add	r0,	#02h
	st	r0,	_reg_data$0+01h[fp]

;;	reg_wr(REG_ADR_WR_TX_FIFO, reg_data, 2);
CLINEA 0000H 0001H 04A1H 0002H 0029H
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#07eh
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 84 3 1196

;;	fifo_wr(REG_ADR_WR_TX_FIFO, payload, length);
CLINEA 0000H 0001H 04A4H 0002H 002EH
	push	r4
	mov	er2,	er6
	mov	r1,	#07eh
	mov	r0,	#00h
	bl	_fifo_wr
	add	sp,	#2 

;;	if(mode == 2) phy_set_trx_state(PHY_ST_TXON);
CLINEA 0000H 0001H 04A5H 0002H 002EH
	cmp	r10,	#02h
	bne	_$L170
	mov	er0,	#9 
	bl	_phy_set_trx_state
_$L170 :
CBLOCKEND 84 2 1196

;;}
CLINEA 0000H 0001H 04ACH 0001H 0001H
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 84 1 1196
CFUNCTIONEND 84


	rseg $$phy_ccaCtrl$phy_ml7396
CFUNCTION 85

_phy_ccaCtrl	:
CBLOCK 85 1 1199

;;void phy_ccaCtrl(CCA_STATE state) {
CLINEA 0000H 0001H 04AFH 0001H 0023H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$4	set	-1
	_reg_cca_cntl$0	set	-2
	_reg_idl_wait$2	set	-3
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-04
	push	er8
	mov	er8,	er0
CBLOCK 85 2 1199
CRET 0008H
CARGUMENT 47H 0002H 0028H "state" 02H 00H 01H
CLOCAL 42H 0001H 0002H 0002H "reg_cca_cntl" 02H 00H 00H
CLOCAL 42H 0001H 0003H 0002H "reg_idl_wait" 02H 00H 00H
CLOCAL 42H 0001H 0001H 0002H "reg_data" 02H 00H 00H

;;	if (state == CCA_FAILURE) {
CLINEA 0000H 0001H 04B5H 0002H 001CH
	cmp	r0,	#04h
	cmpc	r1,	#00h
	bne	_$L173
CBLOCK 85 3 1205

;;		reg_data = PHY_ST_TRXOFF;
CLINEA 0000H 0001H 04B7H 0003H 001BH
	mov	r0,	#08h
	st	r0,	_reg_data$4[fp]

;;		reg_wr(REG_ADR_RF_STATUS, &reg_data, 1);
CLINEA 0000H 0001H 04B8H 0003H 002AH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#06ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 85 3 1209

;;	}
CLINEA 0000H 0000H 04B9H 0002H 0002H
_$L173 :

;;	if (state == CCA_FAILURE || state == CCA_IDLE){
CLINEA 0000H 0001H 04BBH 0002H 0030H
	mov	er0,	er8
	cmp	r8,	#04h
	cmpc	r9,	#00h
	beq	_$L176
	mov	er8,	er8
	bne	_$L175
_$L176 :
CBLOCK 85 4 1211

;;		reg_data = 0x64;
CLINEA 0000H 0001H 04BCH 0003H 0012H
	mov	r0,	#064h
	st	r0,	_reg_data$4[fp]

;;		reg_wr(REG_ADR_DEMSET3, &reg_data, 1);
CLINEA 0000H 0001H 04BDH 0003H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#03h
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data = 0x27;
CLINEA 0000H 0001H 04BEH 0003H 0012H
	mov	r0,	#027h
	st	r0,	_reg_data$4[fp]

;;		reg_wr(REG_ADR_DEMSET14, &reg_data, 1);
CLINEA 0000H 0001H 04BFH 0003H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#0eh
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;		reg_cca_cntl = 0x00;
CLINEA 0000H 0001H 04C0H 0003H 0016H
	mov	r0,	#00h
	st	r0,	_reg_cca_cntl$0[fp]

;;		reg_idl_wait = 0x00;
CLINEA 0000H 0001H 04C1H 0003H 0016H
	st	r0,	_reg_idl_wait$2[fp]

;;		reg_wr(REG_ADR_IDLE_WAIT_L, &reg_idl_wait, 1);
CLINEA 0000H 0001H 04C2H 0003H 0030H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-3
	mov	r1,	#017h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_wr(REG_ADR_CCA_CNTRL, &reg_cca_cntl, 1);
CLINEA 0000H 0001H 04C3H 0003H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#015h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		if(state == CCA_IDLE){
CLINEA 0000H 0001H 04C5H 0003H 0018H
	mov	er8,	er8
	beq	_$M40
	b	_$L184
_$M40 :
CBLOCK 85 5 1221

;;			phy_inten(HW_EVENT_TX_DONE);
CLINEA 0000H 0001H 04C6H 0004H 001FH
	mov	er0,	#0 
	mov	er2,	#3 
	bl	_phy_inten

;;			phy_set_trx_state(PHY_ST_TXON);
CLINEA 0000H 0001H 04C7H 0004H 0022H
	mov	er0,	#9 
	bl	_phy_set_trx_state
CBLOCKEND 85 5 1224

;;		}
CLINEA 0000H 0000H 04C8H 0003H 0003H
CBLOCKEND 85 4 1225

;;	}else{
CLINEA 0000H 0000H 04C9H 0002H 0007H
	b	_$L184
_$L175 :
CBLOCK 85 6 1225

;;		if (state == CCA_FAST) {
CLINEA 0000H 0001H 04CAH 0003H 001AH
	cmp	r0,	#01h
	cmpc	r1,	#00h
	bne	_$L185
CBLOCK 85 7 1226

;;			reg_data = 0x00;
CLINEA 0000H 0001H 04CBH 0004H 0013H
	mov	r0,	#00h
	st	r0,	_reg_data$4[fp]

;;			reg_wr(REG_ADR_DEMSET3, &reg_data, 1);
CLINEA 0000H 0001H 04CCH 0004H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#03h
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;			reg_wr(REG_ADR_DEMSET14,&reg_data, 1);
CLINEA 0000H 0001H 04CDH 0004H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#0eh
	mov	r0,	#0ah
	bl	_reg_wr
	add	sp,	#2 

;;			reg_cca_cntl = 0x10;
CLINEA 0000H 0001H 04CFH 0004H 0017H
	mov	r0,	#010h
	st	r0,	_reg_cca_cntl$0[fp]

;;			reg_idl_wait = 0x00;
CLINEA 0000H 0001H 04D0H 0004H 0017H
	mov	r0,	#00h
	st	r0,	_reg_idl_wait$2[fp]

;;		} else
CLINEA 0000H 0000H 04D1H 0003H 0008H
	bal	_$L191
_$L185 :

;;			if (state == IDLE_DETECT) {
CLINEA 0000H 0001H 04D2H 0004H 001EH
	cmp	r0,	#02h
	cmpc	r1,	#00h
	bne	_$L188
CBLOCK 85 8 1234

;;				reg_cca_cntl = 0x18;
CLINEA 0000H 0001H 04D3H 0005H 0018H
	mov	r0,	#018h
	st	r0,	_reg_cca_cntl$0[fp]

;;				reg_idl_wait = 250;
CLINEA 0000H 0001H 04D4H 0005H 0017H
	mov	r0,	#0fah
	st	r0,	_reg_idl_wait$2[fp]

;;			} else
CLINEA 0000H 0000H 04D5H 0004H 0009H
	bal	_$L191
_$L188 :

;;				if (state == CCA_RETRY) {
CLINEA 0000H 0001H 04D6H 0005H 001DH
	cmp	r0,	#03h
	cmpc	r1,	#00h
	bne	_$L191
CBLOCK 85 9 1238

;;					phy_backoffTimer();
CLINEA 0000H 0001H 04D7H 0006H 0018H
	bl	_phy_backoffTimer

;;					reg_cca_cntl = 0x10;
CLINEA 0000H 0001H 04D8H 0006H 0019H
	mov	r0,	#010h
	st	r0,	_reg_cca_cntl$0[fp]

;;					reg_idl_wait = 250;
CLINEA 0000H 0001H 04D9H 0006H 0018H
	mov	r0,	#0fah
	st	r0,	_reg_idl_wait$2[fp]
CBLOCKEND 85 9 1242

;;				}
CLINEA 0000H 0000H 04DAH 0005H 0005H
_$L191 :
CBLOCKEND 85 8 1250

;;		phy_inten(HW_EVENT_CCA_DONE);
CLINEA 0000H 0001H 04DBH 0003H 001FH
	mov	r0,	#00h
	mov	r1,	#01h
	mov	er2,	#0 
	bl	_phy_inten
CBLOCKEND 85 7 1250

;;		reg_wr(REG_ADR_IDLE_WAIT_L, &reg_idl_wait, 1);
CLINEA 0000H 0001H 04DCH 0003H 0030H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-3
	mov	r1,	#017h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_wr(REG_ADR_CCA_CNTRL, &reg_cca_cntl, 1);
CLINEA 0000H 0001H 04DDH 0003H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#015h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data = 0x06;
CLINEA 0000H 0001H 04DFH 0003H 0012H
	mov	r0,	#06h
	st	r0,	_reg_data$4[fp]

;;		reg_wr(REG_ADR_RF_STATUS, &reg_data, 1);
CLINEA 0000H 0001H 04E0H 0003H 002AH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#06ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 85 6 1249

;;	}
CLINEA 0000H 0000H 04E1H 0002H 0002H
_$L184 :
CBLOCKEND 85 2 1250

;;}
CLINEA 0000H 0001H 04E2H 0001H 0001H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 85 1 1250
CFUNCTIONEND 85


	rseg $$phy_ccadone$phy_ml7396
CFUNCTION 86

_phy_ccadone	:
CBLOCK 86 1 1254

;;{
CLINEA 0000H 0001H 04E6H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$2	set	-1
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
	push	xr8
	mov	r9,	r1
	mov	r10,	r2
CBLOCK 86 2 1254
CRET 0008H
CARGUMENT 46H 0001H 0014H "be" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "count" 02H 00H 00H
CARGUMENT 46H 0001H 001EH "retry" 02H 00H 00H
CLOCAL 47H 0002H 0024H 0002H "state" 02H 00H 01H
CLOCAL 42H 0001H 0001H 0002H "reg_data" 02H 00H 00H

;;	phy_cca_be = be;
CLINEA 0000H 0001H 04EAH 0002H 0011H
	st	r0,	NEAR _phy_cca_be

;;	reg_rd(REG_ADR_CCA_CNTRL, &reg_data, 1);
CLINEA 0000H 0001H 04EDH 0002H 0029H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#015h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	phy_intclr(HW_EVENT_CCA_DONE | HW_EVENT_RF_STATUS);
CLINEA 0000H 0001H 04EEH 0002H 0034H
	mov	r0,	#00h
	mov	r1,	#05h
	mov	er2,	#0 
	bl	_phy_intclr

;;	if(reg_data&0x03){
CLINEA 0000H 0001H 04F0H 0002H 0013H
	l	r0,	_reg_data$2[fp]
	and	r0,	#03h
	beq	_$L194
CBLOCK 86 3 1264

;;		if(!count){
CLINEA 0000H 0000H 04F2H 0003H 000DH
	cmp	r9,	#00h
	bne	_$L196
CBLOCK 86 4 1266

;;			state = IDLE_DETECT;
CLINEA 0000H 0001H 04F3H 0004H 0017H
	mov	er0,	#2 

;;		}else
CLINEA 0000H 0000H 04F4H 0003H 0007H
	bal	_$L203
_$L196 :

;;			if(count < retry){
CLINEA 0000H 0001H 04F6H 0004H 0015H
	cmp	r9,	r10
	bge	_$L201
CBLOCK 86 5 1270

;;				state = CCA_RETRY;
CLINEA 0000H 0001H 04F7H 0005H 0016H
	mov	er0,	#3 
CBLOCKEND 86 5 1272

;;			}else{
CLINEA 0000H 0000H 04F8H 0004H 0009H
	bal	_$L203
_$L201 :
CBLOCK 86 6 1272

;;				state = CCA_FAILURE;
CLINEA 0000H 0001H 04F9H 0005H 0018H
	mov	er0,	#4 
CBLOCKEND 86 6 1274

;;			}
CLINEA 0000H 0000H 04FAH 0004H 0004H
_$L203 :
CBLOCKEND 86 3 1275

;;	}else{
CLINEA 0000H 0000H 04FBH 0002H 0007H
	bal	_$L204
CBLOCKEND 86 4 1282
_$L194 :
CBLOCK 86 7 1275

;;		state = CCA_IDLE;
CLINEA 0000H 0001H 04FCH 0003H 0013H
	mov	er0,	#0 
CBLOCKEND 86 7 1277

;;	}
CLINEA 0000H 0000H 04FDH 0002H 0002H
_$L204 :

;;	return state;
CLINEA 0000H 0001H 0501H 0002H 000EH
CBLOCKEND 86 2 1282

;;}
CLINEA 0000H 0000H 0502H 0001H 0001H
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 86 1 1282
CFUNCTIONEND 86


	rseg $$phy_txdone$phy_ml7396
CFUNCTION 87

_phy_txdone	:
CBLOCK 87 1 1286

;;{
CLINEA 0000H 0001H 0506H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 87 2 1286

;;	phy_intclr(HW_EVENT_TX_DONE | HW_EVENT_TX_FIFO_DONE | HW_EVENT_RF_STATUS);
CLINEA 0000H 0001H 0507H 0002H 004BH
	mov	r0,	#00h
	mov	r1,	#04h
	mov	r2,	#0c3h
	mov	r3,	#00h
	b	_phy_intclr
CBLOCKEND 87 2 1288
CLINEA 0000H 0001H 0508H 0001H 0001H
CBLOCKEND 87 1 1288
CFUNCTIONEND 87


	rseg $$phy_rxdone$phy_ml7396
CFUNCTION 88

_phy_rxdone	:
CBLOCK 88 1 1292

;;{
CLINEA 0000H 0001H 050CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$4	set	-2
	_intsrc$8	set	-6
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-06
	push	xr4
	push	er8
	mov	er8,	er0
CBLOCK 88 2 1292
CRET 000EH
CARGUMENT 47H 0002H 0028H "buff" 06H 03H 00H 00H 05H 01H 00H
CLOCAL 47H 0002H 0027H 0002H "status" 02H 00H 01H
CLOCAL 4AH 0002H 0000H 0002H "data_size" 02H 00H 08H
CLOCAL 42H 0002H 0002H 0002H "reg_data" 05H 01H 02H 00H 00H 00H
CLOCAL 46H 0001H 0014H 0002H "rx_done" 02H 00H 00H
CLOCAL 43H 0004H 0006H 0002H "intsrc" 04H 00H 06H 24H 00H
CUNIONTAG 0058H 0002H 0024H 0002H 00000004H "_Notag"
CUNIONMEM 42H 00000004H "d32" 02H 00H 02H
CUNIONMEM 42H 00000004H "d8" 05H 01H 04H 00H 00H 00H

;;	int status=STATUS_OK;
CLINEA 0000H 0001H 050DH 0002H 0016H
	mov	er6,	#0 	;; _lstatus$0

;;	reg_data[0] = 0x03;
CLINEA 0000H 0001H 0518H 0002H 0014H
	mov	r0,	#03h
	st	r0,	_reg_data$4[fp]

;;	reg_wr(REG_ADR_RF_STATUS, reg_data, 1);
CLINEA 0000H 0001H 0519H 0002H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#06ch
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;	reg_rd(REG_ADR_INT_SOURCE_GRP1, reg_data, 1);
CLINEA 0000H 0001H 051CH 0002H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#024h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	intsrc.d8[0] = reg_data[0];
CLINEA 0000H 0001H 051DH 0002H 001CH
	l	r0,	_reg_data$4[fp]
	st	r0,	_intsrc$8[fp]

;;	reg_rd(REG_ADR_INT_SOURCE_GRP2, reg_data, 1);
CLINEA 0000H 0001H 051EH 0002H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#025h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	intsrc.d8[1] = reg_data[0];
CLINEA 0000H 0001H 051FH 0002H 001CH
	l	r0,	_reg_data$4[fp]
	st	r0,	_intsrc$8+01h[fp]

;;	reg_rd(REG_ADR_INT_SOURCE_GRP4, reg_data, 1);
CLINEA 0000H 0001H 0520H 0002H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#027h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	intsrc.d8[3] = reg_data[0];
CLINEA 0000H 0001H 0521H 0002H 001CH
	l	r0,	_reg_data$4[fp]
	st	r0,	_intsrc$8+03h[fp]

;;	reg_rd(REG_ADR_INT_SOURCE_GRP3, reg_data, 1);
CLINEA 0000H 0001H 0522H 0002H 002EH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#026h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;	intsrc.d8[2] = reg_data[0];
CLINEA 0000H 0001H 0523H 0002H 001CH
	l	r0,	_reg_data$4[fp]
	st	r0,	_intsrc$8+02h[fp]

;;	if(intsrc.d8[2] == 0x08){
CLINEA 0000H 0001H 052BH 0002H 001AH
	cmp	r0,	#08h
	bne	_$L207
CBLOCK 88 3 1323

;;		rx_done = false;
CLINEA 0000H 0001H 052CH 0003H 0012H
	mov	r0,	#00h

;;	}else{
CLINEA 0000H 0000H 052DH 0002H 0007H
	bal	_$L212
_$L207 :
CBLOCK 88 4 1325

;;		if(intsrc.d8[2] == 0x04) {
CLINEA 0000H 0001H 052EH 0003H 001CH
	cmp	r0,	#04h
	bne	_$L210
CBLOCK 88 5 1326

;;			rx_done = true;
CLINEA 0000H 0001H 052FH 0004H 0012H
	mov	r0,	#01h
CBLOCKEND 88 5 1328

;;		}else{
CLINEA 0000H 0000H 0530H 0003H 0008H
	bal	_$L212
_$L210 :
CBLOCK 88 6 1328

;;			rx_done = false;
CLINEA 0000H 0001H 0531H 0004H 0013H
	mov	r0,	#00h
CBLOCKEND 88 6 1330

;;		}
CLINEA 0000H 0000H 0532H 0003H 0003H
_$L212 :
CBLOCKEND 88 4 1331

;;	if (!rx_done) {
CLINEA 0000H 0000H 0535H 0002H 0010H
	cmp	r0,	#00h
	bne	_$L213
CBLOCKEND 88 3 1370
CBLOCK 88 7 1333

;;		phy_rst();
CLINEA 0000H 0001H 0538H 0003H 000CH
	bl	_phy_rst

;;		status=-EBADE;
CLINEA 0000H 0001H 0539H 0003H 0010H
	mov	er6,	#-52	;; _lstatus$0
CBLOCKEND 88 7 1338

;;	}else{
CLINEA 0000H 0000H 053AH 0002H 0007H
	bal	_$L217
_$L213 :
CBLOCK 88 8 1338

;;		reg_rd(REG_ADR_RD_RX_FIFO, reg_data, 2);
CLINEA 0000H 0001H 0544H 0003H 002AH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-2
	mov	r1,	#07fh
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;		buff->len = data_size + 1; // add ED vale
CLINEA 0000H 0001H 0546H 0003H 002BH
	l	r0,	_reg_data$4+01h[fp]
	mov	r1,	#00h
	l	r2,	_reg_data$4[fp]
	or	r1,	r2
	and	r1,	#07h
	add	er0,	#1 
	st	er0,	02h[er8]

;;		fifo_rd(REG_ADR_RD_RX_FIFO, buff->data, buff->len);
CLINEA 0000H 0001H 0547H 0003H 0035H
	l	r0,	02h[er8]
	push	r0
	l	er2,	[er8]
	mov	r1,	#07fh
	mov	r0,	#00h
	bl	_fifo_rd
	add	sp,	#2 

;;		buff->data[buff->len-3] = buff->data[buff->len-1];
CLINEA 0000H 0001H 0549H 0003H 0034H
	l	er0,	02h[er8]
	l	er2,	[er8]
	add	er0,	er2
	l	er2,	02h[er8]
	l	er4,	[er8]
	add	er2,	er4
	l	r0,	0ffffh[er0]
	st	r0,	0fffdh[er2]

;;		buff->len -= 2;
CLINEA 0000H 0001H 054AH 0003H 0011H
	l	er0,	02h[er8]
	add	er0,	#-2
	st	er0,	02h[er8]

;;		phy_rst();
CLINEA 0000H 0001H 054BH 0003H 000CH
	bl	_phy_rst
CBLOCKEND 88 8 1356

;;	}
CLINEA 0000H 0000H 054CH 0002H 0002H
_$L217 :

;;	phy_intclr(HW_EVENT_RX_DONE | HW_EVENT_CRC_ERROR | HW_EVENT_RF_STATUS | HW_EVENT_ADD_FIL_DONE);
CLINEA 0000H 0001H 0550H 0002H 0060H
	mov	r0,	#08h
	mov	r1,	#04h
	mov	er2,	#60
	bl	_phy_intclr

;;	return status;
CLINEA 0000H 0001H 0559H 0002H 000FH
	mov	er0,	er6
CBLOCKEND 88 2 1370

;;	}
CLINEA 0000H 0000H 055AH 0002H 0002H
	pop	er8
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 88 1 1370
CFUNCTIONEND 88


	rseg $$phy_stop$phy_ml7396
CFUNCTION 89

_phy_stop	:
CBLOCK 89 1 1374

;;	{
CLINEA 0000H 0001H 055EH 0002H 0002H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 89 2 1374
CRET 0000H

;;		phy_set_trx_state(PHY_ST_FORCE_TRXOFF);
CLINEA 0000H 0001H 055FH 0003H 0029H
	mov	er0,	#3 
	bl	_phy_set_trx_state

;;		phy_intclr(~(HW_EVENT_ALL_MASK | HW_EVENT_FIFO_CLEAR));
CLINEA 0000H 0001H 0560H 0003H 0039H
	mov	r0,	#03fh
	mov	r1,	#0ffh
	mov	er2,	#-1
	bl	_phy_intclr

;;		phy_inten(HW_EVENT_ALL_MASK);
CLINEA 0000H 0001H 0561H 0003H 001FH
	mov	er0,	#0 
	mov	er2,	#0 
	bl	_phy_inten

;;		phy_rst();
CLINEA 0000H 0001H 0562H 0003H 000CH
	bl	_phy_rst
CBLOCKEND 89 2 1382

;;	}
CLINEA 0000H 0001H 0566H 0002H 0002H
	pop	pc
CBLOCKEND 89 1 1382
CFUNCTIONEND 89


	rseg $$phy_clrAddrFilt$phy_ml7396
CFUNCTION 90

_phy_clrAddrFilt	:
CBLOCK 90 1 1386

;;	{
CLINEA 0000H 0001H 056AH 0002H 0002H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-1
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
CBLOCK 90 2 1386
CRET 0004H
CLOCAL 42H 0001H 0001H 0002H "reg_data" 02H 00H 00H

;;		reg_data = 0x00;
CLINEA 0000H 0001H 056CH 0003H 0012H
	mov	r0,	#00h
	st	r0,	_reg_data$0[fp]

;;		reg_wr(REG_ADR_ADDFIL_CNTRL, &reg_data, 1);
CLINEA 0000H 0001H 056DH 0003H 002DH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#060h
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 90 2 1390

;;	}
CLINEA 0000H 0001H 056EH 0002H 0002H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 90 1 1390
CFUNCTIONEND 90


	rseg $$phy_addrFilt$phy_ml7396
CFUNCTION 91

_phy_addrFilt	:
CBLOCK 91 1 1394

;;	{
CLINEA 0000H 0001H 0572H 0002H 0002H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-8
	_uc_addr$4	set	4
	_bc_addr$6	set	6
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-08
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 91 2 1394
CRET 000EH
CARGUMENT 46H 0002H 0028H "panid" 02H 00H 01H
CARGUMENT 46H 0002H 0029H "ieee_addr" 04H 03H 00H 00H 00H
CARGUMENT 42H 0002H 0004H "uc_addr" 02H 00H 01H
CARGUMENT 42H 0002H 0006H "bc_addr" 02H 00H 01H
CLOCAL 42H 0008H 0008H 0002H "reg_data" 05H 01H 08H 00H 00H 00H

;;		reg_data[0] = 0x1E;
CLINEA 0000H 0001H 0575H 0003H 0015H
	mov	r0,	#01eh
	st	r0,	_reg_data$0[fp]

;;		reg_wr(REG_ADR_ADDFIL_CNTRL, reg_data, 1);
CLINEA 0000H 0001H 0576H 0003H 002CH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	r1,	#060h
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data[0] = panid>>0&0xff;
CLINEA 0000H 0001H 0578H 0003H 001EH
	st	r8,	_reg_data$0[fp]

;;		reg_data[1] = panid>>8&0xff;
CLINEA 0000H 0001H 0579H 0003H 001EH
	st	r9,	_reg_data$0+01h[fp]

;;		reg_wr(REG_ADR_PANID_L, reg_data, 2);
CLINEA 0000H 0001H 057AH 0003H 0027H
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	r1,	#061h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_wr(REG_ADR_64ADDR1, ieee_addr, 8);
CLINEA 0000H 0001H 0587H 0003H 0028H
	mov	r0,	#08h
	push	r0
	mov	er2,	er10
	mov	r1,	#063h
	mov	r0,	#02h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data[0] = uc_addr>>0&0xff;
CLINEA 0000H 0001H 0589H 0003H 0020H
	l	r0,	_uc_addr$4[fp]
	st	r0,	_reg_data$0[fp]

;;		reg_data[1] = uc_addr>>8&0xff;
CLINEA 0000H 0001H 058AH 0003H 0020H
	l	r0,	_uc_addr$4+01h[fp]
	st	r0,	_reg_data$0+01h[fp]

;;		reg_wr(REG_ADR_SHT_ADDR0_L, reg_data, 2);
CLINEA 0000H 0001H 058BH 0003H 002BH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	r1,	#06bh
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data[0] = bc_addr>>0&0xff;
CLINEA 0000H 0001H 058DH 0003H 0020H
	l	r0,	_bc_addr$6[fp]
	st	r0,	_reg_data$0[fp]

;;		reg_data[1] = bc_addr>>8&0xff;
CLINEA 0000H 0001H 058EH 0003H 0020H
	l	r0,	_bc_addr$6+01h[fp]
	st	r0,	_reg_data$0+01h[fp]

;;		reg_wr(REG_ADR_SHT_ADDR1_L, reg_data, 2);
CLINEA 0000H 0001H 058FH 0003H 002BH
	mov	r0,	#02h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	r1,	#06dh
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 91 2 1446

;;	}
CLINEA 0000H 0001H 05A6H 0002H 0002H
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 91 1 1446
CFUNCTIONEND 91


	rseg $$phy_ed$phy_ml7396
CFUNCTION 92

_phy_ed	:
CBLOCK 92 1 1450

;;	{
CLINEA 0000H 0001H 05AAH 0002H 0002H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	mov	r10,	r2
	mov	er8,	er0
CBLOCK 92 2 1450
CRET 0004H
CARGUMENT 46H 0002H 0028H "level" 04H 03H 00H 00H 00H
CARGUMENT 46H 0001H 001EH "rfMode" 02H 00H 00H

;;		if(!rfMode)phy_set_trx_state(PHY_ST_RXON);
CLINEA 0000H 0000H 05ABH 0003H 002CH
	cmp	r2,	#00h
	bne	_$L222
	mov	er0,	#6 
	bl	_phy_set_trx_state
_$L222 :

;;		reg_rd(REG_ADR_ED_RSLT, level, 1);
CLINEA 0000H 0001H 05ACH 0003H 0024H
	mov	r0,	#01h
	push	r0
	mov	er2,	er8
	mov	r1,	#016h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;		if(!rfMode)phy_set_trx_state(PHY_ST_FORCE_TRXOFF);
CLINEA 0000H 0000H 05ADH 0003H 0034H
	cmp	r10,	#00h
	bne	_$L226
	mov	er0,	#3 
	bl	_phy_set_trx_state
_$L226 :
CBLOCKEND 92 2 1457

;;	}
CLINEA 0000H 0001H 05B1H 0002H 0002H
	pop	xr8
	pop	pc
CBLOCKEND 92 1 1457
CFUNCTIONEND 92


	rseg $$phy_sleep$phy_ml7396
CFUNCTION 93

_phy_sleep	:
CBLOCK 93 1 1461

;;	{
CLINEA 0000H 0001H 05B5H 0002H 0002H
;;*****************************************
;;	register/stack information
;;*****************************************
	_reg_data$0	set	-1
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
CBLOCK 93 2 1461
CRET 0004H
CLOCAL 42H 0001H 0001H 0002H "reg_data" 02H 00H 00H

;;		phy_set_trx_state(PHY_ST_FORCE_TRXOFF);
CLINEA 0000H 0001H 05B8H 0003H 0029H
	mov	er0,	#3 
	bl	_phy_set_trx_state

;;		reg_rd(REG_ADR_CLK_SET, &reg_data, 1);
CLINEA 0000H 0001H 05B9H 0003H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#02h
	mov	r0,	#00h
	bl	_reg_rd
	add	sp,	#2 

;;		reg_data |=  0x20;
CLINEA 0000H 0001H 05BAH 0003H 0014H
	l	r0,	_reg_data$0[fp]
	or	r0,	#020h
	st	r0,	_reg_data$0[fp]

;;		reg_wr(REG_ADR_CLK_SET, &reg_data, 1);
CLINEA 0000H 0001H 05BBH 0003H 0028H
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#02h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 

;;		reg_data = 0x00;
CLINEA 0000H 0001H 05BCH 0003H 0012H
	mov	r0,	#00h
	st	r0,	_reg_data$0[fp]

;;		reg_wr(REG_ADR_2DIV_CNTRL, &reg_data, 1);
CLINEA 0000H 0001H 05BDH 0003H 002BH
	mov	r0,	#01h
	push	r0
	mov	er2,	fp
	add	er2,	#-1
	mov	r1,	#071h
	mov	r0,	#00h
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 93 2 1473

;;	}
CLINEA 0000H 0001H 05C1H 0002H 0002H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 93 1 1473
CFUNCTIONEND 93


	rseg $$phy_monitor$phy_ml7396
CFUNCTION 94

_phy_monitor	:
CBLOCK 94 1 1476

;;	void phy_monitor(void){
CLINEA 0000H 0001H 05C4H 0002H 0018H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 94 2 1476
CBLOCKEND 94 2 1488

;;	}
CLINEA 0000H 0001H 05D0H 0002H 0002H
	rt
CBLOCKEND 94 1 1488
CFUNCTIONEND 94


	rseg $$phy_regread$phy_ml7396
CFUNCTION 95

_phy_regread	:
CBLOCK 95 1 1493

;;	void phy_regread(uint8_t bank, uint8_t addr, uint8_t *data, uint8_t size) {
CLINEA 0000H 0001H 05D5H 0002H 004CH
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	er8
	mov	r8,	r0
CBLOCK 95 2 1493
CRET 0004H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H
CARGUMENT 46H 0001H 0015H "addr" 02H 00H 00H
CARGUMENT 46H 0002H 0025H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H

;;		reg_rd(bank, addr, data, size);
CLINEA 0000H 0001H 05D6H 0003H 0021H
	l	r0,	_size$4[fp]
	push	r0
	mov	r0,	r8
	bl	_reg_rd
	add	sp,	#2 
CBLOCKEND 95 2 1495

;;	}
CLINEA 0000H 0001H 05D7H 0002H 0002H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 95 1 1495
CFUNCTIONEND 95


	rseg $$phy_regwrite$phy_ml7396
CFUNCTION 96

_phy_regwrite	:
CBLOCK 96 1 1498

;;	void phy_regwrite(uint8_t bank, uint8_t addr, uint8_t *data, uint8_t size) {
CLINEA 0000H 0001H 05DAH 0002H 004DH
;;*****************************************
;;	register/stack information
;;*****************************************
	_size$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	er8
	mov	r8,	r0
CBLOCK 96 2 1498
CRET 0004H
CARGUMENT 46H 0001H 001CH "bank" 02H 00H 00H
CARGUMENT 46H 0001H 0015H "addr" 02H 00H 00H
CARGUMENT 46H 0002H 0025H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "size" 02H 00H 00H

;;		reg_wr(bank, addr, data, size);
CLINEA 0000H 0001H 05DBH 0003H 0021H
	l	r0,	_size$4[fp]
	push	r0
	mov	r0,	r8
	bl	_reg_wr
	add	sp,	#2 
CBLOCKEND 96 2 1500

;;	}
CLINEA 0000H 0001H 05DCH 0002H 0002H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 96 1 1500
CFUNCTIONEND 96

	public _phy_monitor
	public _phy_timer_start
	public _phy_init
	public _phy_ccaCtrl
	public _phy_timer_handler
	public _phy_clrAddrFilt
	public _phy_timer_stop
	public _phy_regwrite
	public _phy_setup
	public _phy_sleep
	public _phy_sint_di
	public _phy_sint_ei
	public _phy_rxStart
	public _phy_txStart
	public _phy_timer_di
	public _phy_timer_ei
	public _phy_regread
	public _phy_wakeup_mac_event
	public _phy_wakeup_phy_event
	public _phy_wait_phy_event
	public _phy_wait_mac_event
	public _phy_txdone
	public _phy_rxdone
	public _phy_ccadone
	public _phy_addrFilt
	public _phy_ed
	public _phy_sint_handler
	public _phy_stop
	public _phy_timer_tick
	extrn code near : _HAL_delayMicroseconds
	extrn code near : _HAL_GPIO_enableInterrupt
	extrn code near : _HAL_GPIO_disableInterrupt
	extrn code near : _HAL_init
	extrn code near : _HAL_TIMER_start
	extrn code near : _HAL_TIMER_stop
	extrn code near : _memcpy_nn
	extrn code near : _memset_n
	extrn code near : _HAL_wait_event
	extrn code near : _HAL_I2C_read
	extrn code near : _rand
	extrn code near : _HAL_wakeup_event
	extrn code near : _HAL_SPI_transfer
	extrn code near : _HAL_TIMER_getTick
	extrn code near : _HAL_GPIO_setInterrupt
	extrn code near : _HAL_TIMER_setup
	extrn code near : _main

	rseg $$NINITTAB
	db	00h
	db	0ffh
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	db	00h
	align

	rseg $$TABevent_enable$phy_ml7396
_event_enable :
	dw	00h
	dw	00h
	dw	020h
	dw	03ch
	dw	010h
	dw	03h
	dw	0110h
	dw	08003h
	dw	020h
	dw	0803ch
	dw	00h
	dw	00h

	rseg $$TABregset_50kbps$phy_ml7396
_regset_50kbps :
	db	010h
	align
	dw	0999ah
	dw	03989h
	dw	0cccdh
	dw	0398ch
	dw	00h
	dw	03990h
	dw	03333h
	dw	03993h
	dw	06666h
	dw	03996h
	dw	0999ah
	dw	03999h
	dw	0cccdh
	dw	0399ch
	dw	00h
	dw	039a0h
	dw	03333h
	dw	039a3h
	dw	06666h
	dw	039a6h
	dw	0999ah
	dw	039a9h
	dw	0cccdh
	dw	039ach
	dw	00h
	dw	039b0h
	dw	03333h
	dw	039b3h
	dw	06666h
	dw	039b6h
	dw	0999ah
	dw	039b9h
	dw	0cccdh
	dw	039bch
	dw	00h
	dw	039c0h
	dw	03333h
	dw	039c3h
	dw	06666h
	dw	039c6h
	dw	0999ah
	dw	039c9h
	dw	0cccdh
	dw	039cch
	dw	00h
	dw	039d0h
	dw	03333h
	dw	039d3h
	dw	06666h
	dw	039d6h
	dw	0999ah
	dw	039d9h
	dw	0cccdh
	dw	039dch
	dw	00h
	dw	039e0h
	dw	03333h
	dw	039e3h
	dw	06666h
	dw	039e6h
	dw	0999ah
	dw	039e9h
	dw	0cccdh
	dw	039ech
	dw	00h
	dw	039f0h
	dw	03333h
	dw	039f3h
	dw	06666h
	dw	039f6h
	dw	0999ah
	dw	039f9h
	dw	0cccdh
	dw	039fch
	dw	00h
	dw	03a00h
	dw	03333h
	dw	03h
	dw	00h
	dw	04h
	dw	00h
	dw	04h
	dw	05c29h
	dw	034bh
	dw	05c29h
	dw	034bh
	dw	02d8h
	db	024h
	db	011h

	rseg $$TABregset_100kbps$phy_ml7396
_regset_100kbps :
	db	011h
	align
	dw	03333h
	dw	0398bh
	dw	06666h
	dw	0398eh
	dw	0999ah
	dw	03991h
	dw	0cccdh
	dw	03994h
	dw	00h
	dw	03998h
	dw	03333h
	dw	0399bh
	dw	06666h
	dw	0399eh
	dw	0999ah
	dw	039a1h
	dw	0cccdh
	dw	039a4h
	dw	00h
	dw	039a8h
	dw	03333h
	dw	039abh
	dw	06666h
	dw	039aeh
	dw	0999ah
	dw	039b1h
	dw	0cccdh
	dw	039b4h
	dw	00h
	dw	039b8h
	dw	03333h
	dw	039bbh
	dw	06666h
	dw	039beh
	dw	0999ah
	dw	039c1h
	dw	0cccdh
	dw	039c4h
	dw	00h
	dw	039c8h
	dw	03333h
	dw	039cbh
	dw	06666h
	dw	039ceh
	dw	0999ah
	dw	039d1h
	dw	0cccdh
	dw	039d4h
	dw	00h
	dw	039d8h
	dw	03333h
	dw	039dbh
	dw	06666h
	dw	039deh
	dw	0999ah
	dw	039e1h
	dw	0cccdh
	dw	039e4h
	dw	00h
	dw	039e8h
	dw	03333h
	dw	039ebh
	dw	06666h
	dw	039eeh
	dw	0999ah
	dw	039f1h
	dw	0cccdh
	dw	039f4h
	dw	00h
	dw	039f8h
	dw	03333h
	dw	039fbh
	dw	06666h
	dw	039feh
	dw	06666h
	dw	039feh
	dw	06666h
	dw	06h
	dw	0e148h
	dw	02h
	dw	00h
	dw	04h
	dw	04000h
	dw	024ah
	dw	01eb8h
	dw	0119h
	dw	05b0h
	db	027h
	db	016h

	rseg $$NINITVAR
_reg :
	ds	021ah
_hwif :
	ds	06h

	rseg $$NVARphy_ml7396
_phy :
	ds	010h
_phy_cca_be :
	ds	01h
	extrn code : __imodu8sw
	extrn code : __lmulu8sw
	extrn code : __uldivu8sw

	end
