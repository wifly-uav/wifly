;; Compile Options : /TML620504F /MS /near /IC:\LAZURI~1\LIBRAR~1\BM1383 /IC:\LAZURI~1\LIBRAR~1\BM1422 /IC:\LAZURI~1\LIBRAR~1\HARDWA~1 /IC:\LAZURI~1\LIBRAR~1\HARDWA~2 /IC:\LAZURI~1\LIBRAR~1\KXG03_~1 /IC:\LAZURI~1\LIBRAR~1\VL53L0X /IC:\LAZURI~1\LIBRAR~1\Wire /IC:\LAZURI~1\hardware\LAZURI~2 /IC:\LAZURI~1\hardware\LAZURI~2\lazurite /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\clock /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\common /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\irq /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\lp /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\MCU_SM~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\wdt /IC:\LAZURI~1\hardware\LAZURI~2\sub_ghz\ /D_ML620Q504 /DLAZURITE_MINI /DLAZURITE_IDE /DSUBGHZ /DPWR_LED /DLDO_CNT /SS 512 /SL 65 /SD /Oa /Ot /W 3 /Faobj\ /Lv 
;; Version Number  : Ver.3.53.1
;; File Name       : subghz_api.c

	type (ML620504F) 
	model small, near
	$$NVARsubghz_api segment data 2h #0h
	$$NINITVAR segment data 2h #0h
	$$NINITTAB segment table 2h any
	$$TABSubGHz$subghz_api segment table 2h #0h
	$$TABsubghz_msg0$subghz_api segment table 2h #0h
	$$TABsubghz_msg1$subghz_api segment table 2h #0h
	$$TABsubghz_msg10$subghz_api segment table 2h #0h
	$$TABsubghz_msg11$subghz_api segment table 2h #0h
	$$TABsubghz_msg12$subghz_api segment table 2h #0h
	$$TABsubghz_msg13$subghz_api segment table 2h #0h
	$$TABsubghz_msg14$subghz_api segment table 2h #0h
	$$TABsubghz_msg15$subghz_api segment table 2h #0h
	$$TABsubghz_msg16$subghz_api segment table 2h #0h
	$$TABsubghz_msg2$subghz_api segment table 2h #0h
	$$TABsubghz_msg3$subghz_api segment table 2h #0h
	$$TABsubghz_msg4$subghz_api segment table 2h #0h
	$$TABsubghz_msg5$subghz_api segment table 2h #0h
	$$TABsubghz_msg6$subghz_api segment table 2h #0h
	$$TABsubghz_msg7$subghz_api segment table 2h #0h
	$$TABsubghz_msg8$subghz_api segment table 2h #0h
	$$TABsubghz_msg9$subghz_api segment table 2h #0h
	$$mach_rx_irq$subghz_api segment code 2h #0h
	$$subghz_begin$subghz_api segment code 2h #0h
	$$subghz_close$subghz_api segment code 2h #0h
	$$subghz_decMac$subghz_api segment code 2h #0h
	$$subghz_getMyAddr64$subghz_api segment code 2h #0h
	$$subghz_getMyAddress$subghz_api segment code 2h #0h
	$$subghz_getSendMode$subghz_api segment code 2h #0h
	$$subghz_getStatus$subghz_api segment code 2h #0h
	$$subghz_get_ed_value$subghz_api segment code 2h #0h
	$$subghz_get_enhance_ack$subghz_api segment code 2h #0h
	$$subghz_get_my_ieee_addr$subghz_api segment code 2h #0h
	$$subghz_get_my_short_addr$subghz_api segment code 2h #0h
	$$subghz_init$subghz_api segment code 2h #0h
	$$subghz_msgOut$subghz_api segment code 2h #0h
	$$subghz_readData$subghz_api segment code 2h #0h
	$$subghz_remove$subghz_api segment code 2h #0h
	$$subghz_rxDisable$subghz_api segment code 2h #0h
	$$subghz_rxEnable$subghz_api segment code 2h #0h
	$$subghz_setAckReq$subghz_api segment code 2h #0h
	$$subghz_setBroadcastEnb$subghz_api segment code 2h #0h
	$$subghz_setKey$subghz_api segment code 2h #0h
	$$subghz_setMyAddress$subghz_api segment code 2h #0h
	$$subghz_setPromiscuous$subghz_api segment code 2h #0h
	$$subghz_setSendMode$subghz_api segment code 2h #0h
	$$subghz_set_ack_tx_interval$subghz_api segment code 2h #0h
	$$subghz_set_ant_sw$subghz_api segment code 2h #0h
	$$subghz_set_enhance_ack$subghz_api segment code 2h #0h
	$$subghz_tx$subghz_api segment code 2h #0h
	$$subghz_tx64be$subghz_api segment code 2h #0h
	$$subghz_tx64le$subghz_api segment code 2h #0h
CVERSION 3.53.1
CSGLOBAL 03H 0000H "subghz_close" 08H 02H 66H 01H 81H 04H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_msgOut" 08H 02H 77H 01H 81H 08H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_tx64be" 08H 02H 6AH 01H 83H 12H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_tx64le" 08H 02H 68H 01H 83H 0eH 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_getSendMode" 08H 02H 78H 01H 80H 02H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_getStatus" 08H 02H 72H 01H 81H 08H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_set_ant_sw" 08H 02H 84H 01H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_remove" 08H 02H 64H 01H 80H 00H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_init" 08H 02H 63H 01H 81H 08H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_set_ack_tx_interval" 08H 02H 82H 01H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_decMac" 08H 02H 60H 01H 83H 40H 00H 00H 07H
CGLOBAL 01H 03H 0000H "mach_rx_irq" 08H 02H 90H 00H 83H 10H 01H 00H 01H
CSGLOBAL 03H 0000H "subghz_tx" 08H 02H 6CH 01H 83H 1aH 00H 00H 01H
CGLOBAL 01H 03H 0000H "subghz_get_my_ieee_addr" 08H 02H 73H 01H 81H 06H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_readData" 08H 02H 6EH 01H 81H 0aH 00H 00H 08H
CSGLOBAL 02H 0000H "subghz_getMyAddress" 08H 02H 75H 01H 80H 00H 00H 00H 08H
CSGLOBAL 03H 0000H "subghz_setMyAddress" 08H 02H 7CH 01H 80H 00H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_get_enhance_ack" 08H 02H 81H 01H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_setSendMode" 08H 02H 79H 01H 80H 04H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_get_ed_value" 08H 02H 83H 01H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_setKey" 08H 02H 7BH 01H 81H 02H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_begin" 08H 02H 65H 01H 83H 0aH 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_rxEnable" 08H 02H 70H 01H 81H 06H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_rxDisable" 08H 02H 71H 01H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "subghz_get_my_short_addr" 08H 02H 74H 01H 80H 02H 00H 00H 07H
CSGLOBAL 03H 0000H "subghz_getMyAddr64" 08H 02H 76H 01H 80H 04H 00H 00H 07H
CSGLOBAL 02H 0000H "subghz_set_enhance_ack" 08H 02H 80H 01H 80H 00H 00H 00H 00H
CSGLOBAL 03H 0000H "subghz_setBroadcastEnb" 08H 02H 7FH 01H 80H 00H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_setPromiscuous" 08H 02H 7DH 01H 81H 02H 00H 00H 01H
CSGLOBAL 03H 0000H "subghz_setAckReq" 08H 02H 7EH 01H 80H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0013H 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000002H "status" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 000DH 000CH 00000016H "rf_param"
CSTRUCTMEM 42H 00000001H 00000000H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "cca_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "cca_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "cca_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "tx_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "tx_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "tx_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "ant_sw" 02H 00H 00H
CSTRUCTMEM 42H 00000004H 0000000AH "ack_timeout" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 0000000EH "cca_level" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000012H "tx_power" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0001H 0003H 00000006H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "data" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "len" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "size" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0002H 0004H 00000010H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "id" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf_size" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 00000004H "in" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 0000000AH "out" 04H 00H 05H 01H 00H
CSTRUCTTAG 0000H 0000H 0005H 0015H 00000028H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "condition" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "ccaRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "ccaBe" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "ccaCount" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "txPower" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "txMode" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000009H "sequnceNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000AH "resendingNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000BH "rxOnEnable" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "promiscuousMode" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "ack_timeout" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000010H "status" 02H 00H 01H
CSTRUCTMEM 42H 00000004H 00000012H "total_send_bytes" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000016H "start_send_time" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000001AH "last_send_time" 02H 00H 02H
CSTRUCTMEM 43H 00000002H 0000001EH "phy" 06H 03H 00H 00H 05H 02H 00H
CSTRUCTMEM 43H 00000006H 00000020H "ack" 04H 00H 05H 01H 00H
CSTRUCTMEM 42H 00000002H 00000026H "tx_ack_interval" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 000EH 0005H 0000000EH "mac_addr"
CSTRUCTMEM 42H 00000001H 00000000H "pan_coord" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "lddn_addr" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 000AH 000BH 00000002H "mac_fc_alignment"
CSTRUCTMEM 52H 00000003H 00000000H "frame_type" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "sec_enb" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "pending" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "ack_req" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "panid_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "nop" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000008H "seq_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000009H "ielist" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000AH "dst_addr_type" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000CH "frame_ver" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000EH "src_addr_type" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0008H 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "enb" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "data" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0007H 0003H 0000000EH "fc_addr"
CSTRUCTMEM 43H 00000004H 00000000H "panid" 04H 00H 05H 08H 00H
CSTRUCTMEM 42H 00000001H 00000004H "addr_type" 02H 00H 00H
CSTRUCTMEM 43H 00000008H 00000006H "addr" 04H 00H 06H 09H 00H
CSTRUCTTAG 0000H 0000H 000CH 000AH 00000036H "mac_header"
CSTRUCTMEM 43H 00000002H 00000000H "fc" 04H 00H 06H 0BH 00H
CSTRUCTMEM 43H 0000000EH 00000002H "dst" 04H 00H 05H 07H 00H
CSTRUCTMEM 43H 0000000EH 00000010H "src" 04H 00H 05H 07H 00H
CSTRUCTMEM 42H 00000001H 0000001EH "seq" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000001FH "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000020H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000006H 00000022H "payload" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 00000028H "raw" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 0000002EH "input" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000002H 00000034H "payload_offset" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 000FH 000AH 000000FAH "mach_param"
CSTRUCTMEM 43H 00000002H 00000000H "macl" 06H 03H 00H 00H 05H 05H 00H
CSTRUCTMEM 43H 0000000EH 00000002H "my_addr" 04H 00H 05H 0EH 00H
CSTRUCTMEM 43H 0000000EH 00000010H "coord_addr" 04H 00H 05H 0EH 00H
CSTRUCTMEM 43H 00000036H 0000001EH "tx" 04H 00H 05H 0CH 00H
CSTRUCTMEM 43H 00000036H 00000054H "rx" 04H 00H 05H 0CH 00H
CSTRUCTMEM 43H 00000036H 0000008AH "rx_prev" 04H 00H 05H 0CH 00H
CSTRUCTMEM 43H 00000036H 000000C0H "ack" 04H 00H 05H 0CH 00H
CSTRUCTMEM 42H 00000001H 000000F6H "coordinator" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000F7H "sending" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 000000F8H "rf" 06H 03H 00H 00H 05H 0DH 00H
CSTRUCTTAG 0000H 0000H 001EH 0010H 0000003AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "read" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ack_req" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "broadcast_enb" 02H 00H 00H
CSTRUCTMEM 43H 00000004H 00000004H "tx_stat" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000004H 00000008H "rx_stat" 04H 00H 05H 13H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "sending" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000DH "open" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 0000000EH "rx_callback" 0AH 03H 00H 02H 61H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000010H "tx_callback" 0AH 03H 00H 02H 62H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000016H 00000012H "rf" 04H 00H 05H 0DH 00H
CSTRUCTMEM 43H 00000002H 00000028H "mach" 06H 03H 00H 00H 05H 0FH 00H
CSTRUCTMEM 42H 00000002H 0000002AH "panid" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000002CH "short_addr" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 0000002EH "tx" 04H 00H 05H 01H 00H
CSTRUCTMEM 43H 00000006H 00000034H "rx" 04H 00H 05H 01H 00H
CSTRUCTTAG 0000H 0000H 001BH 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 001AH 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0019H 0005H 0000000AH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "write" 0AH 03H 00H 02H 0DEH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "read" 0AH 03H 00H 02H 0DFH 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "erase" 0AH 03H 00H 02H 0E0H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000006H "write_byte" 0AH 03H 00H 02H 0E1H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000008H "read_byte" 0AH 03H 00H 02H 0E2H 00H 00H 00H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0018H 0008H 00000010H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 0CBH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "p" 0AH 03H 00H 02H 0CCH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "l" 0AH 03H 00H 02H 0CDH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "f" 0AH 03H 00H 02H 0CEH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "d" 0AH 03H 00H 02H 0CFH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "ln" 0AH 03H 00H 02H 0D0H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "status" 0AH 03H 00H 02H 0D1H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "len" 0AH 03H 00H 02H 0D2H 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0017H 000FH 0000001EH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 0BCH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "end" 0AH 03H 00H 02H 0BDH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 0BEH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 0BFH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "peek" 0AH 03H 00H 02H 0C0H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "flush" 0AH 03H 00H 02H 0C1H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000CH "print" 0AH 03H 00H 02H 0C2H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "println" 0AH 03H 00H 02H 0C3H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000010H "print_long" 0AH 03H 00H 02H 0C4H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000012H "println_long" 0AH 03H 00H 02H 0C5H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000014H "print_double" 0AH 03H 00H 02H 0C6H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000016H "println_double" 0AH 03H 00H 02H 0C7H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000018H "write" 0AH 03H 00H 02H 0C8H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000001AH "write_byte" 0AH 03H 00H 02H 0C9H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000001CH "tx_available" 0AH 03H 00H 02H 0CAH 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0016H 001BH 00000036H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 95H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "remove" 0AH 03H 00H 02H 96H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "begin" 0AH 03H 00H 02H 97H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "close" 0AH 03H 00H 02H 98H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "send" 0AH 03H 00H 02H 9AH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "send64le" 0AH 03H 00H 02H 9CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "send64be" 0AH 03H 00H 02H 9EH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "rxEnable" 0AH 03H 00H 02H 0A0H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000010H "setPromiscuous" 0AH 03H 00H 02H 0A1H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000012H "setAckReq" 0AH 03H 00H 02H 0A2H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000014H "setBroadcastEnb" 0AH 03H 00H 02H 0A3H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000016H "rxDisable" 0AH 03H 00H 02H 0A4H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000018H "readData" 0AH 03H 00H 02H 0A5H 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001AH "getMyAddress" 0AH 03H 00H 02H 0A6H 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 0000001CH "getMyAddr64" 0AH 03H 00H 02H 0A7H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000001EH "setMyAddress" 0AH 03H 00H 02H 0A8H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000020H "getStatus" 0AH 03H 00H 02H 0A9H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000022H "msgOut" 0AH 03H 00H 02H 0AAH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000024H "setSendMode" 0AH 03H 00H 02H 0ABH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000026H "getSendMode" 0AH 03H 00H 02H 0ACH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000028H "decMac" 0AH 03H 00H 02H 0ADH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000002AH "setKey" 0AH 03H 00H 02H 0AEH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000002CH "setEnhanceAck" 0AH 03H 00H 02H 0AFH 00H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000002EH "getEnhanceAck" 0AH 03H 00H 02H 0B0H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000030H "setAckTxInterval" 0AH 03H 00H 02H 0B1H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000032H "getEdValue" 0AH 03H 00H 02H 0B2H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000034H "antSwitch" 0AH 03H 00H 02H 0B3H 00H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0015H 000BH 00000020H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "mac_header" 04H 00H 06H 0BH 00H
CSTRUCTMEM 42H 00000001H 00000002H "seq_num" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "dst_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "dst_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "src_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000010H "src_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000018H "raw" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001AH "raw_len" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001CH "payload" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001EH "payload_len" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0014H 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addrType" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "senseTime" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "txInterval" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "myAddress" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "ccaWait" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0006H 0004H 0000000EH "ieee802154_my_addr"
CSTRUCTMEM 42H 00000002H 00000000H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000004H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "pan_coord" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 001CH 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CUNIONTAG 0000H 0000H 000BH 0003H 00000002H "mac_frame_control"
CUNIONMEM 42H 00000002H "fc8" 05H 01H 02H 00H 00H 00H
CUNIONMEM 42H 00000002H "fc16" 02H 00H 08H
CUNIONMEM 43H 00000002H "fc_bit" 04H 00H 05H 0AH 00H
CUNIONTAG 0000H 0000H 0009H 0003H 00000008H "_Notag"
CUNIONMEM 42H 00000002H "short_addr" 02H 00H 08H
CUNIONMEM 42H 00000002H "lddn_addr" 02H 00H 08H
CUNIONMEM 42H 00000008H "ieee_addr" 05H 01H 08H 00H 00H 00H
CENUMTAG 0000H 0000H 001DH 0003H "_Notag"
CENUMMEM 00000001H "HALT_I2C1_END"
CENUMMEM 00000002H "HALT_I2C0_END"
CENUMMEM 00000003H "HALT_DELAY"
CENUMTAG 0000H 0000H 0012H 0002H "_Notag"
CENUMMEM 00000014H "SUBGHZ_PWR_20MW"
CENUMMEM 00000001H "SUBGHZ_PWR_1MW"
CENUMTAG 0000H 0000H 0011H 0002H "_Notag"
CENUMMEM 00000064H "SUBGHZ_100KBPS"
CENUMMEM 00000032H "SUBGHZ_50KBPS"
CENUMTAG 0000H 0000H 0010H 0012H "_Notag"
CENUMMEM 00000000H "SUBGHZ_OK"
CENUMMEM 00000001H "SUBGHZ_RESET_FAIL"
CENUMMEM 00000002H "SUBGHZ_SETUP_FAIL"
CENUMMEM 00000003H "SUBGHZ_SLEEP_FAIL"
CENUMMEM 00000004H "SUBGHZ_WAKEUP_FAIL"
CENUMMEM 00000005H "SUBGHZ_MYADDR_FAIL"
CENUMMEM 00000006H "SUBGHZ_SETFIL_FAIL"
CENUMMEM 00000007H "SUBGHZ_TX_COMP_FAIL"
CENUMMEM 00000008H "SUBGHZ_TX_FAIL"
CENUMMEM 00000009H "SUBGHZ_TX_CCA_FAIL"
CENUMMEM 0000000AH "SUBGHZ_TX_ACK_FAIL"
CENUMMEM 0000000BH "SUBGHZ_RX_ENB_FAIL"
CENUMMEM 0000000CH "SUBGHZ_RX_DIS_FAIL"
CENUMMEM 0000000DH "SUBGHZ_RX_COMP_FAIL"
CENUMMEM 0000000EH "SUBGHZ_PANID"
CENUMMEM 0000000FH "SUBGHZ_ERR_ADDRTYPE"
CENUMMEM 00000010H "SUBGHZ_TTL_SEND_OVR"
CENUMMEM 00000011H "SUBGHZ_DUMMY"
CENUMTAG 0000H 0000H 0004H 000EH "_Notag"
CENUMMEM 00000000H "SUBGHZ_ST_TX_START"
CENUMMEM 00000001H "SUBGHZ_ST_CCA_FAST"
CENUMMEM 00000002H "SUBGHZ_ST_CCA_IDLE_DETECT"
CENUMMEM 00000003H "SUBGHZ_ST_CCA_ABORT"
CENUMMEM 00000004H "SUBGHZ_ST_CCA_RETRY"
CENUMMEM 00000005H "SUBGHZ_ST_CCA_FAILURE"
CENUMMEM 00000006H "SUBGHZ_ST_CCA_DONE"
CENUMMEM 00000007H "SUBGHZ_ST_TX_DONE"
CENUMMEM 00000008H "SUBGHZ_ST_TX_ACK_TIMEOUT"
CENUMMEM 00000009H "SUBGHZ_ST_TX_ACK_DONE"
CENUMMEM 0000000AH "SUBGHZ_ST_RX_START"
CENUMMEM 0000000BH "SUBGHZ_ST_RX_DONE"
CENUMMEM 0000000CH "SUBGHZ_ST_RX_ACK_DONE"
CENUMMEM 0000000DH "SUBGHZ_ST_NONE"
CENUMTAG 0000H 0000H 0003H 0005H "_Notag"
CENUMMEM 00000000H "CCA_IDLE"
CENUMMEM 00000001H "CCA_FAST"
CENUMMEM 00000002H "IDLE_DETECT"
CENUMMEM 00000003H "CCA_RETRY"
CENUMMEM 00000004H "CCA_FAILURE"
CTYPEDEF 0000H 0000H 43H "SUBGHZ_POWER" 04H 00H 0AH 12H 00H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 1CH 00H
CTYPEDEF 0000H 0000H 43H "SubGHz_CTRL" 04H 00H 05H 16H 00H
CTYPEDEF 0000H 0000H 43H "INT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "PHY_PARAM" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_PARAM" 04H 00H 05H 14H 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MSG" 04H 00H 0AH 10H 00H
CTYPEDEF 0000H 0000H 42H "bool" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "t_print" 04H 00H 05H 18H 00H
CTYPEDEF 0000H 0000H 42H "byte" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "INT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "INT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_STATE" 04H 00H 0AH 04H 00H
CTYPEDEF 0000H 0000H 43H "MACL_PARAM" 04H 00H 05H 05H 00H
CTYPEDEF 0000H 0000H 42H "BOOLEAN" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_PARAM" 04H 00H 05H 15H 00H
CTYPEDEF 0000H 0000H 42H "UCHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_STATUS" 04H 00H 05H 13H 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "uint8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_RATE" 04H 00H 0AH 11H 00H
CTYPEDEF 0000H 0000H 43H "BUFFER" 04H 00H 05H 01H 00H
CTYPEDEF 0000H 0000H 43H "int8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "int16_t" 02H 00H 08H
CTYPEDEF 0000H 0000H 43H "int32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "UINT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "DATAFLASH" 04H 00H 05H 19H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 0E7H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 0E6H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "CHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HardwareSerial" 04H 00H 05H 17H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 0E9H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 0E8H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "boolean" 02H 00H 00H
CTYPEDEF 0000H 0000H 42H "word" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "BOOL" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HALT_EVENT" 04H 00H 0AH 1DH 00H
CTYPEDEF 0000H 0000H 43H "CCA_STATE" 04H 00H 0AH 03H 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 1AH 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 1BH 00H
CTYPEDEF 0000H 0000H 42H "uint32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CTYPEDEF 0000H 0000H 42H "uint16_t" 02H 00H 08H
CSGLOBAL 41H 0022H "subghz_msg" 07H 01H 11H 00H 03H 00H 00H 00H
CGLOBAL 01H 42H 0001H "subghz_api_status" 02H 00H 00H
CSGLOBAL 01H 000AH "subghz_msg0" 05H 01H 0AH 00H 00H 00H
CSGLOBAL 01H 0012H "subghz_msg1" 05H 01H 12H 00H 00H 00H
CSGLOBAL 01H 0012H "subghz_msg2" 05H 01H 12H 00H 00H 00H
CSGLOBAL 01H 0012H "subghz_msg3" 05H 01H 12H 00H 00H 00H
CSGLOBAL 01H 000FH "subghz_msg8" 05H 01H 0FH 00H 00H 00H
CSGLOBAL 01H 0013H "subghz_msg9" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0013H "subghz_msg4" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0013H "subghz_msg5" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0013H "subghz_msg6" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0014H "subghz_msg7" 05H 01H 14H 00H 00H 00H
CGLOBAL 02H 01H 001EH "Serial" 04H 00H 05H 17H 00H
CSGLOBAL 43H 003AH "subghz_param" 04H 00H 05H 1EH 00H
CSGLOBAL 01H 0013H "subghz_msg10" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0013H "subghz_msg11" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0013H "subghz_msg12" 05H 01H 13H 00H 00H 00H
CSGLOBAL 01H 0014H "subghz_msg13" 05H 01H 14H 00H 00H 00H
CSGLOBAL 01H 000DH "subghz_msg14" 05H 01H 0DH 00H 00H 00H
CSGLOBAL 01H 0014H "subghz_msg15" 05H 01H 14H 00H 00H 00H
CSGLOBAL 01H 0014H "subghz_msg16" 05H 01H 14H 00H 00H 00H
CGLOBAL 01H 01H 0036H "SubGHz" 04H 00H 05H 16H 00H
CFILE 0001H 0000007BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\common.h"
CFILE 0002H 00000F42H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\ml620504F.h"
CFILE 0003H 000000C9H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\string.h"
CFILE 0004H 0000007AH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\yvals.h"
CFILE 0005H 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\lp\\lp_manage.h"
CFILE 0006H 0000006FH "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\driver_irq.h"
CFILE 0007H 00000331H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\irq\\irq.h"
CFILE 0008H 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\common\\rdwr_reg.h"
CFILE 0009H 00000032H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\common_subghz.h"
CFILE 000AH 0000009EH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\mach.h"
CFILE 000BH 00000064H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\macl.h"
CFILE 000CH 00000062H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy.h"
CFILE 000DH 0000003DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\endian.h"
CFILE 000EH 00000082H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\subghz_api.h"
CFILE 000FH 00000024H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\errno.h"
CFILE 0010H 00000064H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\hwif/hal.h"
CFILE 0011H 00000051H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite_system.h"
CFILE 0012H 00000042H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite.h"
CFILE 0013H 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\analogio.h"
CFILE 0014H 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\MCU_SM~1\\mcu.h"
CFILE 0015H 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\digitalio.h"
CFILE 0016H 00000041H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\pin_assignment.h"
CFILE 0017H 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\serial.h"
CFILE 0018H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\print.h"
CFILE 0019H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_shift.h"
CFILE 001AH 0000002CH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_pulse.h"
CFILE 001BH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WInterrupts.h"
CFILE 001CH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WMath.h"
CFILE 001DH 00000031H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\flash.h"
CFILE 001EH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\tone.h"
CFILE 001FH 000000DAH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\stdlib.h"
CFILE 0020H 0000004FH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\math.h"
CFILE 0021H 00000048H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\aes/aes.h"
CFILE 0000H 000002F1H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\subghz_api.c"

	rseg $$subghz_init$subghz_api
CFUNCTION 355

_subghz_init	:
CBLOCK 355 1 88

;;{
CLINEA 0000H 0001H 0058H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	bp
	push	er4
CBLOCK 355 2 88
CRET 0004H
CLOCAL 47H 0002H 0025H 0002H "msg" 02H 00H 01H
CLOCAL 47H 0002H 0026H 0002H "result" 02H 00H 01H

;;	memset(&subghz_param,0,sizeof(subghz_param));
CLINEA 0000H 0001H 005DH 0002H 002EH
	mov	er0,	#58
	push	er0
	mov	er2,	#0 
	mov	r0,	#BYTE1 OFFSET _subghz_param
	mov	r1,	#BYTE2 OFFSET _subghz_param
	bl	_memset_n
	add	sp,	#2 

;;	subghz_param.addr_type = 6;
CLINEA 0000H 0001H 005EH 0002H 001CH
	mov	r0,	#06h
	st	r0,	NEAR _subghz_param

;;	subghz_param.ack_req = true;
CLINEA 0000H 0001H 005FH 0002H 001DH
	mov	r0,	#01h
	st	r0,	NEAR _subghz_param+02h

;;	subghz_param.broadcast_enb = true;
CLINEA 0000H 0001H 0060H 0002H 0023H
	st	r0,	NEAR _subghz_param+03h

;;	subghz_param.rf.cca_min_be = 0;
CLINEA 0000H 0001H 0061H 0002H 0020H
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+014h

;;	subghz_param.rf.cca_max_be = 5;
CLINEA 0000H 0001H 0062H 0002H 0020H
	mov	r0,	#05h
	st	r0,	NEAR _subghz_param+015h

;;	subghz_param.rf.cca_retry = 20;
CLINEA 0000H 0001H 0063H 0002H 0020H
	mov	r0,	#014h
	st	r0,	NEAR _subghz_param+016h

;;	subghz_param.rf.cca_level = DBM_TO_MBM(-80);
CLINEA 0000H 0001H 0064H 0002H 002DH
	mov	r0,	#0c0h
	mov	r1,	#0e0h
	mov	er2,	#-1
	st	er0,	NEAR _subghz_param+020h
	st	er2,	NEAR _subghz_param+022h

;;	subghz_param.rf.tx_min_be = 0;
CLINEA 0000H 0001H 0065H 0002H 001FH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+017h

;;	subghz_param.rf.tx_max_be = 7;
CLINEA 0000H 0001H 0066H 0002H 001FH
	mov	r0,	#07h
	st	r0,	NEAR _subghz_param+018h

;;	subghz_param.rf.tx_power = DBM_TO_MBM(13);
CLINEA 0000H 0001H 0068H 0002H 002BH
	mov	r0,	#014h
	mov	r1,	#05h
	mov	er2,	#0 
	st	er0,	NEAR _subghz_param+024h
	st	er2,	NEAR _subghz_param+026h

;;	subghz_param.rf.ack_timeout = 0;
CLINEA 0000H 0001H 0069H 0002H 0021H
	mov	er0,	#0 
	st	er0,	NEAR _subghz_param+01ch
	st	er0,	NEAR _subghz_param+01eh

;;	subghz_param.rf.tx_retry = 3;
CLINEA 0000H 0001H 006AH 0002H 001EH
	mov	r0,	#03h
	st	r0,	NEAR _subghz_param+019h

;;	subghz_param.rf.ant_sw = 0;
CLINEA 0000H 0001H 006BH 0002H 001CH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+01ah

;;	AES128_setKey(NULL);
CLINEA 0000H 0001H 006CH 0002H 0015H
	bl	_AES128_setKey

;;	if((subghz_param.mach = mach_init())==NULL)
CLINEA 0000H 0000H 006FH 0002H 002CH
	bl	_mach_init
	st	er0,	NEAR _subghz_param+028h
	mov	er0,	er0
	bne	_$L1
CBLOCK 355 3 112

;;		result = -EIO;
CLINEA 0000H 0001H 0071H 0003H 0010H
	mov	er4,	#-5	;; _lresult$2

;;		msg = SUBGHZ_RESET_FAIL;
CLINEA 0000H 0001H 0072H 0003H 001AH
	mov	er0,	#1 

;;		goto error;
CLINEA 0000H 0001H 0073H 0003H 000DH
	bal	_$L3
CBLOCKEND 355 3 116

;;	}
CLINEA 0000H 0000H 0074H 0002H 0002H
_$L1 :

;;	subghz_param.sending = false;
CLINEA 0000H 0001H 0077H 0002H 001EH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+0ch

;;	subghz_param.read = false;
CLINEA 0000H 0001H 0078H 0002H 001BH
	st	r0,	NEAR _subghz_param+01h

;;	subghz_param.open = false;
CLINEA 0000H 0001H 0079H 0002H 001BH
	st	r0,	NEAR _subghz_param+0dh

;;		((uint16_t)subghz_param.mach->my_addr.ieee_addr[1]<<8);
CLINEA 0000H 0001H 007DH 0003H 0039H
	l	bp,	NEAR _subghz_param+028h
	l	r2,	8[bp]
	l	r0,	9[bp]
	mov	r1,	r0
	mov	r0,	#00h
	or	r0,	r2
	st	er0,	NEAR _subghz_param+02ch

;;	srand((uint16_t)subghz_param.short_addr);
CLINEA 0000H 0001H 007EH 0002H 002AH
	bl	_srand

;;	msg =  SUBGHZ_OK;
CLINEA 0000H 0001H 007FH 0002H 0012H
	mov	er0,	#0 

;;error:
CLINEA 0000H 0001H 0081H 0001H 0006H
CLABEL 0003H "error"
_$L3 :

;;	subghz_param.tx_stat.status = result;
CLINEA 0000H 0001H 0082H 0002H 0026H
	st	er4,	NEAR _subghz_param+06h

;;	return msg;
CLINEA 0000H 0001H 0083H 0002H 000CH
CBLOCKEND 355 2 132

;;}
CLINEA 0000H 0000H 0084H 0001H 0001H
	pop	er4
	pop	bp
	pop	pc
CBLOCKEND 355 1 132
CFUNCTIONEND 355


	rseg $$subghz_remove$subghz_api
CFUNCTION 356

_subghz_remove	:
CBLOCK 356 1 135

;;{
CLINEA 0000H 0001H 0087H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 356 2 135
CLOCAL 47H 0002H 0024H 0002H "msg" 02H 00H 01H

;;	msg = (SUBGHZ_MSG)HAL_remove();
CLINEA 0000H 0000H 008AH 0002H 0020H
	b	_HAL_remove
CLINEA 0000H 0001H 008CH 0002H 000CH
CBLOCKEND 356 2 141

;;}
CLINEA 0000H 0000H 008DH 0001H 0001H
CBLOCKEND 356 1 141
CFUNCTIONEND 356


	rseg $$subghz_begin$subghz_api
CFUNCTION 357

_subghz_begin	:
CBLOCK 357 1 143

;;{
CLINEA 0000H 0001H 008FH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_rate$4	set	4
	_txPower$6	set	6
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	push	er4
	mov	r8,	r0
	mov	er10,	er2
CBLOCK 357 2 143
CRET 0008H
CARGUMENT 46H 0001H 001CH "ch" 02H 00H 00H
CARGUMENT 46H 0002H 0029H "panid" 02H 00H 01H
CARGUMENT 43H 0002H 0004H "rate" 02H 00H 01H
CARGUMENT 43H 0002H 0006H "txPower" 02H 00H 01H
CLOCAL 47H 0002H 0026H 0002H "msg" 02H 00H 01H
CLOCAL 47H 0002H 0025H 0002H "result" 02H 00H 01H

;;	SUBGHZ_MSG msg = SUBGHZ_OK;
CLINEA 0000H 0001H 0090H 0002H 001CH
	mov	er4,	#0 	;; _lmsg$0

;;	if(subghz_param.open == false)
CLINEA 0000H 0001H 0093H 0002H 001FH
	l	r0,	NEAR _subghz_param+0dh
	bne	_$L8
CBLOCK 357 3 148

;;		if((result = mach_sleep(false))!=STATUS_OK)
CLINEA 0000H 0000H 0096H 0003H 002DH
	mov	r0,	#00h
	bl	_mach_sleep
	mov	er2,	er0	;; _lresult$2
	mov	er0,	er0
	beq	_$L8
CBLOCK 357 4 151

;;			subghz_param.open = true;
CLINEA 0000H 0001H 0098H 0004H 001CH
	mov	r0,	#01h
	st	r0,	NEAR _subghz_param+0dh

;;			msg = SUBGHZ_WAKEUP_FAIL;
CLINEA 0000H 0001H 0099H 0004H 001CH
	mov	er4,	#4 	;; _lmsg$0

;;			goto error;
CLINEA 0000H 0001H 009AH 0004H 000EH
	bal	_$L10
CBLOCKEND 357 4 155

;;		}
CLINEA 0000H 0000H 009BH 0003H 0003H
_$L8 :
CBLOCKEND 357 3 156

;;	subghz_param.sending = false;
CLINEA 0000H 0001H 009EH 0002H 001EH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+0ch

;;	subghz_param.read = false;
CLINEA 0000H 0001H 009FH 0002H 001BH
	st	r0,	NEAR _subghz_param+01h

;;	subghz_param.rf.ch = ch;
CLINEA 0000H 0001H 00A1H 0002H 0019H
	st	r8,	NEAR _subghz_param+012h

;;	if(rate == 50) {
CLINEA 0000H 0001H 00A2H 0002H 0011H
	l	er0,	_rate$4[fp]
	cmp	r0,	#032h
	cmpc	r1,	#00h
	bne	_$L11
CBLOCK 357 5 162

;;		subghz_param.rf.pages = 1;
CLINEA 0000H 0001H 00A3H 0003H 001CH
	mov	r0,	#01h
CBLOCKEND 357 5 164

;;	} else if (rate == 100) {
CLINEA 0000H 0000H 00A4H 0002H 001AH
	bal	_$L13
_$L11 :
	cmp	r0,	#064h
	cmpc	r1,	#00h
	bne	_$L14
CBLOCK 357 6 164

;;		subghz_param.rf.pages = 2;
CLINEA 0000H 0001H 00A5H 0003H 001CH
	mov	r0,	#02h
CBLOCKEND 357 6 166

;;	}
CLINEA 0000H 0000H 00A9H 0002H 0002H
_$L13 :
	st	r0,	NEAR _subghz_param+013h

;;	subghz_param.panid = panid;
CLINEA 0000H 0001H 00ABH 0002H 001CH
	st	er10,	NEAR _subghz_param+02ah

;;	if((result = mach_set_my_short_addr(subghz_param.panid,subghz_param.short_addr)) != STATUS_OK) {
CLINEA 0000H 0000H 00ACH 0002H 0061H
	l	er2,	NEAR _subghz_param+02ch
	mov	er0,	er10
	bl	_mach_set_my_short_addr
	mov	er2,	er0	;; _lresult$2
	mov	er0,	er0
	beq	_$L17
CBLOCK 357 8 172

;;		msg = SUBGHZ_MYADDR_FAIL;
CLINEA 0000H 0001H 00ADH 0003H 001BH
	mov	er4,	#5 	;; _lmsg$0

;;		goto error;
CLINEA 0000H 0001H 00AEH 0003H 000DH
	bal	_$L10
CBLOCKEND 357 8 175

;;	}
CLINEA 0000H 0000H 00AFH 0002H 0002H
_$L17 :

;;	if(txPower == 1) 
CLINEA 0000H 0001H 00B1H 0002H 0012H
	l	er0,	_txPower$6[fp]
	cmp	r0,	#01h
	cmpc	r1,	#00h
	bne	_$L19

;;		subghz_param.rf.tx_power = DBM_TO_MBM(1);
CLINEA 0000H 0001H 00B2H 0003H 002BH
	mov	r0,	#064h
	mov	r1,	#00h

;;	else if(txPower == 20) 
CLINEA 0000H 0001H 00B3H 0002H 0018H
	bal	_$L21
_$L19 :
	cmp	r0,	#014h
	cmpc	r1,	#00h
	bne	_$L10

;;		subghz_param.rf.tx_power = DBM_TO_MBM(13);
CLINEA 0000H 0001H 00B4H 0003H 002CH
	mov	r0,	#014h
	mov	r1,	#05h

;;	else goto error;
CLINEA 0000H 0000H 00B5H 0002H 0011H
_$L21 :
	mov	er2,	#0 
	st	er0,	NEAR _subghz_param+024h
	st	er2,	NEAR _subghz_param+026h

;;	if((result = mach_setup(&subghz_param.rf)) != STATUS_OK) {
CLINEA 0000H 0000H 00B7H 0002H 003BH
	mov	r0,	#BYTE1 OFFSET (_subghz_param+012h)
	mov	r1,	#BYTE2 OFFSET (_subghz_param+012h)
	bl	_mach_setup
	mov	er2,	er0	;; _lresult$2
	mov	er0,	er0
	beq	_$L25
CBLOCK 357 9 183

;;		msg = SUBGHZ_SETUP_FAIL;
CLINEA 0000H 0001H 00B8H 0003H 001AH
	mov	er4,	#2 	;; _lmsg$0

;;		goto error;
CLINEA 0000H 0001H 00B9H 0003H 000DH
	bal	_$L10
CBLOCKEND 357 9 186

;;	}
CLINEA 0000H 0000H 00BAH 0002H 0002H
_$L25 :

;;	msg = SUBGHZ_OK;
CLINEA 0000H 0001H 00BCH 0002H 0011H
	mov	er4,	#0 	;; _lmsg$0

;;error:
CLINEA 0000H 0001H 00BEH 0001H 0006H
CLABEL 000AH "error"
_$L10 :

;;	subghz_param.tx_stat.status = result;
CLINEA 0000H 0001H 00BFH 0002H 0026H
	st	er2,	NEAR _subghz_param+06h

;;	return msg;
CLINEA 0000H 0001H 00C5H 0002H 000CH
	mov	er0,	er4
CBLOCKEND 357 2 198

;;}
CLINEA 0000H 0000H 00C6H 0001H 0001H
	pop	er4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc

;;	} else {
CLINEA 0000H 0000H 00A6H 0002H 0009H
_$L14 :
CBLOCK 357 7 166

;;		msg = SUBGHZ_SETUP_FAIL;
CLINEA 0000H 0001H 00A7H 0003H 001AH
	mov	er4,	#2 	;; _lmsg$0

;;		goto error;
CLINEA 0000H 0001H 00A8H 0003H 000DH
	bal	_$L10
CBLOCKEND 357 7 169

;;	else goto error;
CLINEA 0000H 0000H 00B5H 0002H 0011H
CBLOCKEND 357 1 198
CFUNCTIONEND 357


	rseg $$subghz_close$subghz_api
CFUNCTION 358

_subghz_close	:
CBLOCK 358 1 201

;;{
CLINEA 0000H 0001H 00C9H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er4
CBLOCK 358 2 201
CRET 0002H
CLOCAL 47H 0002H 0026H 0002H "msg" 02H 00H 01H
CLOCAL 47H 0002H 0025H 0002H "result" 02H 00H 01H

;;	result = mach_sleep(true);
CLINEA 0000H 0000H 00CCH 0002H 001BH
	mov	r0,	#01h
	bl	_mach_sleep
	mov	er2,	er0	;; _lresult$2

;;	if( result != STATUS_OK)
CLINEA 0000H 0001H 00CDH 0002H 0019H
	mov	er0,	er0
	beq	_$L28
CBLOCK 358 3 206

;;		msg = SUBGHZ_SLEEP_FAIL;
CLINEA 0000H 0001H 00CFH 0003H 001AH
	mov	er0,	#3 

;;		goto error;
CLINEA 0000H 0001H 00D0H 0003H 000DH
	bal	_$L30
CBLOCKEND 358 3 209

;;	}
CLINEA 0000H 0000H 00D1H 0002H 0002H
_$L28 :

;;	subghz_param.open = false;
CLINEA 0000H 0001H 00D2H 0002H 001BH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+0dh

;;	msg = SUBGHZ_OK;
CLINEA 0000H 0001H 00D4H 0002H 0011H
	mov	er0,	#0 

;;error:
CLINEA 0000H 0001H 00D5H 0001H 0006H
CLABEL 001EH "error"
_$L30 :
	mov	er4,	er0	;; _lmsg$0

;;	subghz_param.tx_stat.status = result;
CLINEA 0000H 0001H 00D6H 0002H 0026H
	st	er2,	NEAR _subghz_param+06h

;;	subghz_api_status = 0;
CLINEA 0000H 0001H 00D7H 0002H 0017H
	mov	r0,	#00h
	st	r0,	NEAR _subghz_api_status

;;	return msg;
CLINEA 0000H 0001H 00D8H 0002H 000CH
	mov	er0,	er4
CBLOCKEND 358 2 217

;;}
CLINEA 0000H 0000H 00D9H 0001H 0001H
	pop	er4
	pop	pc
CBLOCKEND 358 1 217
CFUNCTIONEND 358


	rseg $$subghz_tx64le$subghz_api
CFUNCTION 360

_subghz_tx64le	:
CBLOCK 360 1 219

;;static SUBGHZ_MSG subghz_tx64le(uint8_t *addr_le, uint8_t *data, uint16_t len, void (*callback)(uint8_t rssi, int status)) {
CLINEA 0000H 0001H 00DBH 0001H 007CH
;;*****************************************
;;	register/stack information
;;*****************************************
	_len$4	set	4
	_callback$6	set	6
	_fc$6	set	-2
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
	push	xr4
	push	er8
	mov	er8,	er0
CBLOCK 360 2 219
CRET 000AH
CARGUMENT 46H 0002H 0028H "addr_le" 04H 03H 00H 00H 00H
CARGUMENT 46H 0002H 0025H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0002H 0004H "len" 02H 00H 01H
CARGUMENT 43H 0002H 0006H "callback" 0AH 03H 00H 02H 67H 01H 00H 00H 00H 00H 07H
CLOCAL 47H 0002H 0027H 0002H "msg" 02H 00H 01H
CLOCAL 47H 0002H 0025H 0002H "result" 02H 00H 01H
CLOCAL 46H 0001H 0018H 0002H "addr_type" 02H 00H 00H
CLOCAL 43H 0002H 0002H 0002H "fc" 04H 00H 05H 0AH 00H

;;	subghz_api_status |= SUBGHZ_API_SEND64LE;
CLINEA 0000H 0001H 00E1H 0002H 002AH
	sb	NEAR _subghz_api_status.1

;;	subghz_param.tx.data = data;
CLINEA 0000H 0001H 00E4H 0002H 001DH
	st	er2,	NEAR _subghz_param+02eh

;;	subghz_param.tx.size = len;
CLINEA 0000H 0001H 00E5H 0002H 001CH
	l	er0,	_len$4[fp]
	st	er0,	NEAR _subghz_param+032h

;;	subghz_param.tx.len = len;
CLINEA 0000H 0001H 00E6H 0002H 001BH
	st	er0,	NEAR _subghz_param+030h

;;	subghz_param.tx_callback = callback;
CLINEA 0000H 0001H 00E7H 0002H 0025H
	l	er0,	_callback$6[fp]
	st	er0,	NEAR _subghz_param+010h

;;	memset(&fc,0,sizeof(fc));
CLINEA 0000H 0001H 00EAH 0002H 001AH
	mov	er0,	#2 
	push	er0
	mov	er2,	#0 
	mov	er0,	fp
	add	er0,	#-2
	bl	_memset_n
	add	sp,	#2 

;;	fc.frame_type = IEEE802154_FC_TYPE_DATA;
CLINEA 0000H 0001H 00EBH 0002H 0029H
	l	r0,	_fc$6[fp]
	and	r0,	#0f8h
	or	r0,	#01h
	st	r0,	_fc$6[fp]

;;	fc.frame_ver = IEEE802154_FC_VER_4E;
CLINEA 0000H 0001H 00ECH 0002H 0025H
	l	r0,	_fc$6+01h[fp]
	and	r0,	#0cfh
	or	r0,	#020h
	st	r0,	_fc$6+01h[fp]

;;	fc.ack_req = subghz_param.ack_req;
CLINEA 0000H 0001H 00EDH 0002H 0023H
	l	r1,	_fc$6[fp]
	rb	r1.5
	l	r0,	NEAR _subghz_param+02h
	and	r0,	#01h
	beq	_$M5
	sb	r1.5
_$M5 :
	st	r1,	_fc$6[fp]

;;	mach_set_dst_ieee_addr(0xffff,addr_le);
CLINEA 0000H 0001H 00EFH 0002H 0028H
	mov	er2,	er8
	mov	er0,	#-1
	bl	_mach_set_dst_ieee_addr

;;	mach_set_src_addr(IEEE802154_FC_ADDR_IEEE);
CLINEA 0000H 0001H 00F0H 0002H 002CH
	mov	r0,	#03h
	bl	_mach_set_src_addr

;;	subghz_param.sending = true;
CLINEA 0000H 0001H 00F1H 0002H 001DH
	mov	r0,	#01h
	st	r0,	NEAR _subghz_param+0ch

;;	addr_type = subghz_param.addr_type;
CLINEA 0000H 0001H 00F2H 0002H 0024H
	l	r0,	NEAR _subghz_param
	mov	r4,	r0	;; _laddr_type$4

;;	result = mach_tx(fc,addr_type,&subghz_param.tx);
CLINEA 0000H 0000H 00F4H 0002H 0031H
	l	er0,	_fc$6[fp]
	push	er0
	mov	r2,	#BYTE1 OFFSET (_subghz_param+02eh)
	mov	r3,	#BYTE2 OFFSET (_subghz_param+02eh)
	mov	r0,	r4
	bl	_mach_tx
	add	sp,	#2 
	mov	er2,	er0	;; _lresult$2

;;	subghz_param.sending = false;
CLINEA 0000H 0001H 00F8H 0002H 001EH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+0ch

;;	if(result >= 0){
CLINEA 0000H 0001H 00FAH 0002H 0011H
	mov	er0,	er2
	bns	_$L32
CBLOCK 360 3 250

;;		msg = SUBGHZ_OK;
CLINEA 0000H 0001H 00FBH 0003H 0012H
	mov	er0,	#0 
	mov	er6,	#0 	;; _lmsg$0

;;		subghz_param.tx_stat.rssi = result;
CLINEA 0000H 0001H 00FCH 0003H 0025H
	st	r2,	NEAR _subghz_param+04h

;;		subghz_param.tx_stat.status = 0;
CLINEA 0000H 0001H 00FDH 0003H 0022H
	st	er0,	NEAR _subghz_param+06h

;;	} else {
CLINEA 0000H 0000H 00FEH 0002H 0009H
	bal	_$L40
_$L32 :
CBLOCK 360 4 254

;;		subghz_param.tx_stat.rssi = 0;
CLINEA 0000H 0001H 00FFH 0003H 0020H
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+04h

;;		if(result == -EBUSY) msg = SUBGHZ_TX_CCA_FAIL;
CLINEA 0000H 0001H 0100H 0003H 0030H
	mov	er0,	er2
	cmp	r2,	#0f0h
	cmpc	r3,	#0ffh
	bne	_$L35
	mov	er6,	#9 	;; _lmsg$0

;;		else if(result == -ETIMEDOUT) msg = SUBGHZ_TX_ACK_FAIL;
CLINEA 0000H 0001H 0101H 0003H 0039H
	bal	_$L40
_$L35 :
	cmp	r0,	#092h
	cmpc	r1,	#0ffh
	bne	_$L38
	mov	er6,	#10	;; _lmsg$0

;;		else msg = SUBGHZ_TX_FAIL;
CLINEA 0000H 0001H 0102H 0003H 001CH
	bal	_$L40
_$L38 :
	mov	er6,	#8 	;; _lmsg$0
_$L40 :
CBLOCKEND 360 4 259

;;	if(callback) {
CLINEA 0000H 0001H 010AH 0002H 000FH
	l	er0,	_callback$6[fp]
	beq	_$L41
CBLOCKEND 360 3 273
CBLOCK 360 5 266

;;		callback(subghz_param.tx_stat.rssi,msg);
CLINEA 0000H 0001H 010BH 0003H 002AH
	mov	er2,	er6
	l	r0,	NEAR _subghz_param+04h
	l	er4,	_callback$6[fp]
	bl	er4
CBLOCKEND 360 5 268

;;	}
CLINEA 0000H 0000H 010CH 0002H 0002H
_$L41 :

;;	subghz_api_status &= ~SUBGHZ_API_SEND64LE;
CLINEA 0000H 0001H 010EH 0002H 002BH
	rb	NEAR _subghz_api_status.1

;;	return msg;
CLINEA 0000H 0001H 0110H 0002H 000CH
	mov	er0,	er6
CBLOCKEND 360 2 273

;;}
CLINEA 0000H 0000H 0111H 0001H 0001H
	pop	er8
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 360 1 273
CFUNCTIONEND 360


	rseg $$subghz_tx64be$subghz_api
CFUNCTION 362

_subghz_tx64be	:
CBLOCK 362 1 275

;;static SUBGHZ_MSG subghz_tx64be(uint8_t *addr_be, uint8_t *data, uint16_t len, void (*callback)(uint8_t rssi, int status)) {
CLINEA 0000H 0001H 0113H 0001H 007CH
;;*****************************************
;;	register/stack information
;;*****************************************
	_addr_le$0	set	-8
	_callback$6	set	6
	_len$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-08
	push	er8
	mov	er8,	er0
CBLOCK 362 2 275
CRET 000CH
CARGUMENT 46H 0002H 0028H "addr_be" 04H 03H 00H 00H 00H
CARGUMENT 46H 0002H 0025H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0002H 0004H "len" 02H 00H 01H
CARGUMENT 43H 0002H 0006H "callback" 0AH 03H 00H 02H 69H 01H 00H 00H 00H 00H 07H
CLOCAL 42H 0008H 0008H 0002H "addr_le" 05H 01H 08H 00H 00H 00H
CLOCAL 47H 0002H 0024H 0002H "msg" 02H 00H 01H

;;	subghz_api_status |= SUBGHZ_API_SEND64BE;
CLINEA 0000H 0001H 0117H 0002H 002AH
	sb	NEAR _subghz_api_status.2

;;	addr_le[7] = addr_be[0];
CLINEA 0000H 0001H 0118H 0002H 0019H
	l	r0,	[er0]
	st	r0,	_addr_le$0+07h[fp]

;;	addr_le[6] = addr_be[1];
CLINEA 0000H 0001H 0119H 0002H 0019H
	l	r0,	01h[er8]
	st	r0,	_addr_le$0+06h[fp]

;;	addr_le[5] = addr_be[2];
CLINEA 0000H 0001H 011AH 0002H 0019H
	l	r0,	02h[er8]
	st	r0,	_addr_le$0+05h[fp]

;;	addr_le[4] = addr_be[3];
CLINEA 0000H 0001H 011BH 0002H 0019H
	l	r0,	03h[er8]
	st	r0,	_addr_le$0+04h[fp]

;;	addr_le[3] = addr_be[4];
CLINEA 0000H 0001H 011CH 0002H 0019H
	l	r0,	04h[er8]
	st	r0,	_addr_le$0+03h[fp]

;;	addr_le[2] = addr_be[5];
CLINEA 0000H 0001H 011DH 0002H 0019H
	l	r0,	05h[er8]
	st	r0,	_addr_le$0+02h[fp]

;;	addr_le[1] = addr_be[6];
CLINEA 0000H 0001H 011EH 0002H 0019H
	l	r0,	06h[er8]
	st	r0,	_addr_le$0+01h[fp]

;;	addr_le[0] = addr_be[7];
CLINEA 0000H 0001H 011FH 0002H 0019H
	l	r0,	07h[er8]
	st	r0,	_addr_le$0[fp]

;;	msg = subghz_tx64le(addr_le,data,len,callback);
CLINEA 0000H 0000H 0120H 0002H 0030H
	l	er0,	_callback$6[fp]
	push	er0
	l	er0,	_len$4[fp]
	push	er0
	mov	er0,	fp
	add	er0,	#-8
	bl	_subghz_tx64le
	add	sp,	#4 

;;	subghz_api_status &= ~SUBGHZ_API_SEND64BE;
CLINEA 0000H 0001H 0121H 0002H 002BH
	rb	NEAR _subghz_api_status.2

;;	return msg;
CLINEA 0000H 0001H 0123H 0002H 000CH
CBLOCKEND 362 2 292

;;}
CLINEA 0000H 0000H 0124H 0001H 0001H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 362 1 292
CFUNCTIONEND 362


	rseg $$subghz_tx$subghz_api
CFUNCTION 364

_subghz_tx	:
CBLOCK 364 1 295

;;{
CLINEA 0000H 0001H 0127H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_data$4	set	4
	_len$6	set	6
	_callback$8	set	8
	_fc$4	set	-2
	_broadcast_addr$6	set	-10
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-010
	push	xr8
	push	xr4
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 364 2 295
CRET 0014H
CARGUMENT 46H 0002H 0028H "panid" 02H 00H 01H
CARGUMENT 46H 0002H 0029H "dstAddr" 02H 00H 01H
CARGUMENT 42H 0002H 0004H "data" 04H 03H 00H 00H 00H
CARGUMENT 42H 0002H 0006H "len" 02H 00H 01H
CARGUMENT 43H 0002H 0008H "callback" 0AH 03H 00H 02H 6BH 01H 00H 00H 00H 00H 07H
CLOCAL 47H 0002H 0027H 0002H "msg" 02H 00H 01H
CLOCAL 47H 0002H 0025H 0002H "result" 02H 00H 01H
CLOCAL 43H 0002H 0002H 0002H "fc" 04H 00H 05H 0AH 00H

;;	subghz_api_status |= SUBGHZ_API_SEND;
CLINEA 0000H 0001H 012CH 0002H 0026H
	sb	NEAR _subghz_api_status.0

;;	subghz_param.tx.data = data;
CLINEA 0000H 0001H 012FH 0002H 001DH
	l	er0,	_data$4[fp]
	st	er0,	NEAR _subghz_param+02eh

;;	subghz_param.tx.size = len;
CLINEA 0000H 0001H 0130H 0002H 001CH
	l	er0,	_len$6[fp]
	st	er0,	NEAR _subghz_param+032h

;;	subghz_param.tx.len = len;
CLINEA 0000H 0001H 0131H 0002H 001BH
	st	er0,	NEAR _subghz_param+030h

;;	subghz_param.tx_callback = callback;
CLINEA 0000H 0001H 0132H 0002H 0025H
	l	er0,	_callback$8[fp]
	st	er0,	NEAR _subghz_param+010h

;;	memset(&fc,0,sizeof(fc));
CLINEA 0000H 0001H 0135H 0002H 001AH
	mov	er0,	#2 
	push	er0
	mov	er2,	#0 
	mov	er0,	fp
	add	er0,	#-2
	bl	_memset_n
	add	sp,	#2 

;;	fc.frame_type = IEEE802154_FC_TYPE_DATA;
CLINEA 0000H 0001H 0136H 0002H 0029H
	l	r0,	_fc$4[fp]
	and	r0,	#0f8h
	or	r0,	#01h
	st	r0,	_fc$4[fp]

;;	fc.frame_ver = IEEE802154_FC_VER_4E;
CLINEA 0000H 0001H 0137H 0002H 0025H
	l	r0,	_fc$4+01h[fp]
	and	r0,	#0cfh
	or	r0,	#020h
	st	r0,	_fc$4+01h[fp]

;;	fc.ack_req = subghz_param.ack_req;
CLINEA 0000H 0001H 0138H 0002H 0023H
	l	r1,	_fc$4[fp]
	rb	r1.5
	l	r0,	NEAR _subghz_param+02h
	and	r0,	#01h
	beq	_$M8
	sb	r1.5
_$M8 :
	st	r1,	_fc$4[fp]

;;	if(panid < 0xFFFE) {
CLINEA 0000H 0001H 0139H 0002H 0015H
	mov	er0,	er8
	cmp	r8,	#0feh
	cmpc	r9,	#0ffh
	bge	_$L45
CBLOCK 364 3 313

;;		mach_set_dst_short_addr(panid,dstAddr);
CLINEA 0000H 0001H 013AH 0003H 0029H
	mov	er2,	er10
	bl	_mach_set_dst_short_addr

;;		mach_set_src_addr(IEEE802154_FC_ADDR_SHORT);
CLINEA 0000H 0001H 013BH 0003H 002EH
	mov	r0,	#02h
	bl	_mach_set_src_addr

;;		subghz_param.sending = true;
CLINEA 0000H 0001H 013CH 0003H 001EH
	mov	r0,	#01h
	st	r0,	NEAR _subghz_param+0ch

;;		result = mach_tx(fc,subghz_param.addr_type,&subghz_param.tx);
CLINEA 0000H 0000H 013DH 0003H 003FH
	l	er0,	_fc$4[fp]
	push	er0
	mov	r2,	#BYTE1 OFFSET (_subghz_param+02eh)
	mov	r3,	#BYTE2 OFFSET (_subghz_param+02eh)
	l	r0,	NEAR _subghz_param
	bl	_mach_tx
CBLOCKEND 364 3 318

;;	} else {
CLINEA 0000H 0000H 013EH 0002H 0009H
	bal	_$L47
_$L45 :
CBLOCK 364 4 318
CLOCAL 42H 0008H 000AH 0004H "broadcast_addr" 05H 01H 08H 00H 00H 00H

;;			0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
CLINEA 0000H 0001H 0140H 0004H 002AH
	mov	r0,	#0ffh
	st	r0,	_broadcast_addr$6[fp]
	st	r0,	_broadcast_addr$6+01h[fp]
	st	r0,	_broadcast_addr$6+02h[fp]
	st	r0,	_broadcast_addr$6+03h[fp]
	st	r0,	_broadcast_addr$6+04h[fp]
	st	r0,	_broadcast_addr$6+05h[fp]
	st	r0,	_broadcast_addr$6+06h[fp]
	st	r0,	_broadcast_addr$6+07h[fp]

;;		mach_set_dst_ieee_addr(0xffff,broadcast_addr);
CLINEA 0000H 0001H 0142H 0003H 0030H
	mov	er2,	fp
	add	er2,	#-10
	mov	er0,	#-1
	bl	_mach_set_dst_ieee_addr

;;		mach_set_src_addr(IEEE802154_FC_ADDR_IEEE);
CLINEA 0000H 0001H 0143H 0003H 002DH
	mov	r0,	#03h
	bl	_mach_set_src_addr

;;		subghz_param.sending = true;
CLINEA 0000H 0001H 0144H 0003H 001EH
	mov	r0,	#01h
	st	r0,	NEAR _subghz_param+0ch

;;		result = mach_tx(fc,subghz_param.addr_type,&subghz_param.tx);
CLINEA 0000H 0000H 0145H 0003H 003FH
	l	er0,	_fc$4[fp]
	push	er0
	mov	r2,	#BYTE1 OFFSET (_subghz_param+02eh)
	mov	r3,	#BYTE2 OFFSET (_subghz_param+02eh)
	l	r0,	NEAR _subghz_param
	bl	_mach_tx
CBLOCKEND 364 4 326

;;	}
CLINEA 0000H 0000H 0146H 0002H 0002H
_$L47 :
	add	sp,	#2 
	mov	er2,	er0	;; _lresult$2

;;	subghz_param.sending = false;
CLINEA 0000H 0001H 014AH 0002H 001EH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+0ch

;;	if(result >= 0){
CLINEA 0000H 0001H 014CH 0002H 0011H
	mov	er0,	er2
	bns	_$L48
CBLOCK 364 5 332

;;		msg = SUBGHZ_OK;
CLINEA 0000H 0001H 014DH 0003H 0012H
	mov	er0,	#0 
	mov	er6,	#0 	;; _lmsg$0

;;		subghz_param.tx_stat.rssi = result;
CLINEA 0000H 0001H 014EH 0003H 0025H
	st	r2,	NEAR _subghz_param+04h

;;		subghz_param.tx_stat.status = 0;
CLINEA 0000H 0001H 014FH 0003H 0022H
	st	er0,	NEAR _subghz_param+06h

;;	} else {
CLINEA 0000H 0000H 0150H 0002H 0009H
	bal	_$L56
_$L48 :
CBLOCK 364 6 336

;;		subghz_param.tx_stat.rssi = 0;
CLINEA 0000H 0001H 0151H 0003H 0020H
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+04h

;;		if(result == -EBUSY) msg = SUBGHZ_TX_CCA_FAIL;
CLINEA 0000H 0001H 0152H 0003H 0030H
	mov	er0,	er2
	cmp	r2,	#0f0h
	cmpc	r3,	#0ffh
	bne	_$L51
	mov	er6,	#9 	;; _lmsg$0

;;		else if(result == -ETIMEDOUT) msg = SUBGHZ_TX_ACK_FAIL;
CLINEA 0000H 0001H 0153H 0003H 0039H
	bal	_$L56
_$L51 :
	cmp	r0,	#092h
	cmpc	r1,	#0ffh
	bne	_$L54
	mov	er6,	#10	;; _lmsg$0

;;		else msg = SUBGHZ_TX_FAIL;
CLINEA 0000H 0001H 0154H 0003H 001CH
	bal	_$L56
_$L54 :
	mov	er6,	#8 	;; _lmsg$0
_$L56 :
CBLOCKEND 364 6 341

;;	if(callback) {
CLINEA 0000H 0001H 015CH 0002H 000FH
	l	er0,	_callback$8[fp]
	beq	_$L57
CBLOCKEND 364 5 355
CBLOCK 364 7 348

;;		callback(subghz_param.tx_stat.rssi,msg);
CLINEA 0000H 0001H 015DH 0003H 002AH
	mov	er2,	er6
	l	r0,	NEAR _subghz_param+04h
	l	er4,	_callback$8[fp]
	bl	er4
CBLOCKEND 364 7 350

;;	}
CLINEA 0000H 0000H 015EH 0002H 0002H
_$L57 :

;;	subghz_api_status &= ~SUBGHZ_API_SEND;
CLINEA 0000H 0001H 0160H 0002H 0027H
	rb	NEAR _subghz_api_status.0

;;	return msg;
CLINEA 0000H 0001H 0162H 0002H 000CH
	mov	er0,	er6
CBLOCKEND 364 2 355

;;}
CLINEA 0000H 0000H 0163H 0001H 0001H
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 364 1 355
CFUNCTIONEND 364


	rseg $$mach_rx_irq$subghz_api
CFUNCTION 144

_mach_rx_irq	:
CBLOCK 144 1 358

;;{
CLINEA 0000H 0001H 0166H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_outbuf$4	set	-256
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-128
	add	sp,	#-128
	push	bp
	push	er8
	push	er4
	mov	er8,	er0
CBLOCK 144 2 358
CRET 0108H
CARGUMENT 47H 0002H 0028H "rx" 06H 03H 00H 00H 05H 0CH 00H

;;	subghz_param.rx_stat.rssi = rx->rssi;
CLINEA 0000H 0001H 0168H 0002H 0026H
	l	r0,	020h[er0]
	st	r0,	NEAR _subghz_param+08h

;;	subghz_param.rx_stat.status = rx->raw.len;
CLINEA 0000H 0001H 0169H 0002H 002BH
	l	er0,	02ah[er8]
	st	er0,	NEAR _subghz_param+0ah

;;			)) {
CLINEA 0000H 0000H 0178H 0004H 0007H
	l	bp,	NEAR _subghz_param+028h
	l	bp,	[bp]
	l	r0,	12[bp]
	bne	_$L60
	l	r0,	NEAR _subghz_param+03h
	bne	_$L60
	l	r0,	02h[er8]
	beq	_$L60
	l	er0,	04h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$L60
	l	r0,	06h[er8]
	cmp	r0,	#02h
	bne	_$L77
	l	er0,	08h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$M10
	b	_$L106
_$M10 :
_$L77 :
	l	r0,	06h[er8]
	cmp	r0,	#03h
	bne	_$L60
	l	r0,	08h[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	09h[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	0ah[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	0bh[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	0ch[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	0dh[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	0eh[er8]
	cmp	r0,	#0ffh
	bne	_$L60
	l	r0,	0fh[er8]
	cmp	r0,	#0ffh
	bne	_$L60
CBLOCK 144 3 376
CBLOCKEND 144 3 383

;;	} else {
CLINEA 0000H 0000H 017FH 0002H 0009H
	b	_$L106
_$L60 :
CBLOCK 144 4 383

;;		if (rx->fc.fc_bit.sec_enb && AES128_getStatus()){
CLINEA 0000H 0000H 0186H 0003H 0033H
	l	r0,	[er8]
	tb	r0.3
	beq	_$L107
	bl	_AES128_getStatus
	cmp	r0,	#00h
	beq	_$L107
CBLOCK 144 5 390
CLOCAL 46H 0001H 0018H 0005H "mhr_len" 02H 00H 00H
CLOCAL 46H 0001H 0014H 0005H "pad" 02H 00H 00H
CLOCAL 42H 0100H 0100H 0005H "outbuf" 05H 01H 00H 01H 00H 00H

;;			if (rx->fc.fc_bit.seq_comp){
CLINEA 0000H 0001H 018AH 0004H 001FH
	l	r0,	01h[er8]
	tb	r0.0
	beq	_$L114
CBLOCK 144 6 394

;;				rx->seq=0;
CLINEA 0000H 0001H 018BH 0005H 000EH
	mov	r0,	#00h
	st	r0,	01eh[er8]
CBLOCKEND 144 6 396

;;			}
CLINEA 0000H 0000H 018CH 0004H 0004H
_$L114 :

;;			mhr_len = rx->raw.len - rx->payload.len;
CLINEA 0000H 0001H 018DH 0004H 002BH
	l	r0,	02ah[er8]
	l	r1,	024h[er8]
	sub	r0,	r1
	mov	r4,	r0	;; _lmhr_len$0

;;			memcpy(outbuf, rx->raw.data,mhr_len);
CLINEA 0000H 0001H 018EH 0004H 0028H
	mov	r1,	#00h
	push	er0
	l	er2,	028h[er8]
	mov	er0,	fp
	add	r0,	#00h
	addc	r1,	#0ffh
	bl	_memcpy_nn
	add	sp,	#2 

;;			pad = AES128_CBC_decrypt(outbuf+mhr_len, rx->payload.data, rx->payload.len, rx->seq);
CLINEA 0000H 0000H 018FH 0004H 0058H
	l	r0,	01eh[er8]
	push	r0
	l	er0,	024h[er8]
	mov	er2,	#0 
	push	xr0
	l	er2,	022h[er8]
	mov	r0,	r4
	mov	r1,	#00h
	mov	bp,	fp
	add	r12,	#00h
	addc	r13,	#0ffh
	add	er0,	bp
	bl	_AES128_CBC_decrypt
	add	sp,	#6 

;;			rx->raw.len -= pad;
CLINEA 0000H 0001H 0190H 0004H 0016H
	mov	r1,	#00h
	l	er2,	02ah[er8]
	sub	r2,	r0
	subc	r3,	r1
	st	er2,	02ah[er8]

;;			memcpy(rx->raw.data, outbuf, rx->raw.len);
CLINEA 0000H 0001H 0191H 0004H 002DH
	push	er2
	mov	er2,	fp
	add	r2,	#00h
	addc	r3,	#0ffh
	l	er0,	028h[er8]
	bl	_memcpy_nn
	add	sp,	#2 
CBLOCKEND 144 5 406

;;		}
CLINEA 0000H 0000H 0196H 0003H 0003H
_$L107 :

;;		if(subghz_param.rx_callback != NULL) {
CLINEA 0000H 0001H 0198H 0003H 0028H
	l	er0,	NEAR _subghz_param+0eh
	beq	_$L116
CBLOCK 144 7 408

;;			subghz_param.rx_callback(rx->raw.data, rx->rssi,rx->raw.len);
CLINEA 0000H 0001H 0199H 0004H 0040H
	l	er0,	02ah[er8]
	push	er0
	l	r2,	020h[er8]
	l	er0,	028h[er8]
	l	bp,	NEAR _subghz_param+0eh
	bl	bp
	add	sp,	#2 
CBLOCKEND 144 7 410

;;		} 
CLINEA 0000H 0000H 019AH 0003H 0004H
_$L116 :

;;		memcpy(subghz_param.rx.data,rx->raw.data,rx->raw.len);
CLINEA 0000H 0001H 019BH 0003H 0038H
	l	er0,	02ah[er8]
	push	er0
	l	er2,	028h[er8]
	l	er0,	NEAR _subghz_param+034h
	bl	_memcpy_nn
	add	sp,	#2 

;;		subghz_param.rx.len = rx->raw.len;
CLINEA 0000H 0001H 019CH 0003H 0024H
	l	er0,	02ah[er8]
	st	er0,	NEAR _subghz_param+036h
CBLOCKEND 144 4 413

;;	}
CLINEA 0000H 0000H 019DH 0002H 0002H
_$L106 :

;;	return STATUS_OK;
CLINEA 0000H 0001H 019EH 0002H 0012H
CBLOCKEND 144 2 415

;;}
CLINEA 0000H 0000H 019FH 0001H 0001H
	mov	er0,	#0 
	pop	er4
	pop	er8
	pop	bp
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 144 1 415
CFUNCTIONEND 144


	rseg $$subghz_readData$subghz_api
CFUNCTION 366

_subghz_readData	:
CBLOCK 366 1 418

;;{
CLINEA 0000H 0001H 01A2H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	push	er4
	mov	er10,	er2
	mov	er8,	er0
CBLOCK 366 2 418
CRET 0006H
CARGUMENT 46H 0002H 0028H "data" 04H 03H 00H 00H 00H
CARGUMENT 46H 0002H 0029H "max_size" 02H 00H 01H
CLOCAL 47H 0002H 0026H 0002H "result" 02H 00H 08H

;;	dis_interrupts(DI_SUBGHZ);
CLINEA 0000H 0001H 01A7H 0002H 001BH
	mov	er0,	#8 
	bl	_dis_interrupts

;;	if(subghz_param.rx.len == 0)
CLINEA 0000H 0001H 01A9H 0002H 001DH
	l	er0,	NEAR _subghz_param+036h
	bne	_$L119
CBLOCK 366 3 426

;;		result = 0;
CLINEA 0000H 0001H 01ABH 0003H 000DH
	mov	er4,	#0 	;; _lresult$0
CBLOCKEND 366 3 428

;;	} else {
CLINEA 0000H 0000H 01ACH 0002H 0009H
	bal	_$L121
_$L119 :
CBLOCK 366 4 428

;;		max_size = (max_size > subghz_param.rx.len) ? subghz_param.rx.len : max_size;
CLINEA 0000H 0000H 01ADH 0003H 004FH
	cmp	er10,	er0
	ble	_$L122
	l	er0,	NEAR _subghz_param+036h
	bal	_$L124
_$L122 :
	mov	er0,	er10
_$L124 :

;;		memcpy(data,subghz_param.rx.data,max_size);
CLINEA 0000H 0001H 01AEH 0003H 002DH
	push	er0
	l	er2,	NEAR _subghz_param+034h
	mov	er0,	er8
	bl	_memcpy_nn
	add	sp,	#2 

;;		result = subghz_param.rx.len;
CLINEA 0000H 0001H 01AFH 0003H 001FH
	l	er0,	NEAR _subghz_param+036h
	mov	er4,	er0	;; _lresult$0

;;		subghz_param.rx.len = 0;
CLINEA 0000H 0001H 01B0H 0003H 001AH
	mov	er0,	#0 
	st	er0,	NEAR _subghz_param+036h
CBLOCKEND 366 4 433

;;	}
CLINEA 0000H 0000H 01B1H 0002H 0002H
_$L121 :

;;	enb_interrupts(DI_SUBGHZ);
CLINEA 0000H 0001H 01B3H 0002H 001BH
	mov	er0,	#8 
	bl	_enb_interrupts

;;	return result;
CLINEA 0000H 0001H 01B6H 0002H 000FH
	mov	er0,	er4
CBLOCKEND 366 2 439

;;}
CLINEA 0000H 0000H 01B7H 0001H 0001H
	pop	er4
	pop	xr8
	pop	pc
CBLOCKEND 366 1 439
CFUNCTIONEND 366


	rseg $$subghz_rxEnable$subghz_api
CFUNCTION 368

_subghz_rxEnable	:
CBLOCK 368 1 442

;;{
CLINEA 0000H 0001H 01BAH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	push	er4
	mov	er8,	er0
CBLOCK 368 2 442
CRET 0004H
CARGUMENT 47H 0002H 0028H "callback" 0AH 03H 00H 02H 6FH 01H 00H 00H 00H 00H 07H
CSLOCAL 42H 0100H 0000H 0002H "data" 05H 01H 00H 01H 00H 00H
CLOCAL 4BH 0002H 0000H 0002H "result" 02H 00H 01H
CLOCAL 47H 0002H 0026H 0002H "msg" 02H 00H 01H

;;	SUBGHZ_MSG msg = SUBGHZ_OK;
CLINEA 0000H 0001H 01BDH 0002H 001CH
	mov	er4,	#0 	;; _lmsg$2

;;	subghz_param.rx.data = data;
CLINEA 0000H 0001H 01BFH 0002H 001DH
	mov	r0,	#BYTE1 OFFSET _$ST0
	mov	r1,	#BYTE2 OFFSET _$ST0
	st	er0,	NEAR _subghz_param+034h

;;	subghz_param.rx.size = sizeof(data);
CLINEA 0000H 0001H 01C0H 0002H 0025H
	mov	r0,	#00h
	mov	r1,	#01h
	st	er0,	NEAR _subghz_param+038h

;;	subghz_param.rx.len = 0;
CLINEA 0000H 0001H 01C1H 0002H 0019H
	mov	er0,	#0 
	st	er0,	NEAR _subghz_param+036h

;;	subghz_param.rx_callback = callback;
CLINEA 0000H 0001H 01C3H 0002H 0025H
	st	er8,	NEAR _subghz_param+0eh

;;	if(subghz_param.read == false)
CLINEA 0000H 0001H 01C4H 0002H 001FH
	l	r0,	NEAR _subghz_param+01h
	bne	_$L128
CBLOCK 368 3 453

;;		if((result=mach_start(&subghz_param.rx))!=STATUS_OK) {
CLINEA 0000H 0000H 01C6H 0003H 0038H
	mov	r0,	#BYTE1 OFFSET (_subghz_param+034h)
	mov	r1,	#BYTE2 OFFSET (_subghz_param+034h)
	bl	_mach_start
	mov	er0,	er0
	beq	_$L128
CBLOCK 368 4 454

;;			msg = SUBGHZ_RX_ENB_FAIL;
CLINEA 0000H 0001H 01C7H 0004H 001CH
	mov	er4,	#11	;; _lmsg$2

;;			goto error;
CLINEA 0000H 0001H 01C8H 0004H 000EH
	bal	_$L130
CBLOCKEND 368 4 457

;;		}
CLINEA 0000H 0000H 01C9H 0003H 0003H
_$L128 :
CBLOCKEND 368 3 458

;;	subghz_param.read = true;
CLINEA 0000H 0001H 01CBH 0002H 001AH
	mov	r0,	#01h
	st	r0,	NEAR _subghz_param+01h

;;	subghz_api_status |= SUBGHZ_API_RXENABLE;
CLINEA 0000H 0001H 01CCH 0002H 002AH
	sb	NEAR _subghz_api_status.3

;;error:
CLINEA 0000H 0001H 01CEH 0001H 0006H
CLABEL 0082H "error"
_$L130 :

;;	return msg;
CLINEA 0000H 0001H 01D0H 0002H 000CH
	mov	er0,	er4
CBLOCKEND 368 2 465

;;}
CLINEA 0000H 0000H 01D1H 0001H 0001H
	pop	er4
	pop	er8
	pop	pc
CBLOCKEND 368 1 465
CFUNCTIONEND 368


	rseg $$subghz_rxDisable$subghz_api
CFUNCTION 369

_subghz_rxDisable	:
CBLOCK 369 1 468

;;{
CLINEA 0000H 0001H 01D4H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 369 2 468
CRET 0000H
CLOCAL 47H 0002H 0026H 0002H "msg" 02H 00H 01H
CLOCAL 47H 0002H 0025H 0002H "result" 02H 00H 01H

;;	result = mach_stop();
CLINEA 0000H 0000H 01D8H 0002H 0016H
	bl	_mach_stop
	mov	er2,	er0	;; _lresult$2

;;	if(result != STATUS_OK)
CLINEA 0000H 0001H 01D9H 0002H 0018H
	mov	er0,	er0
	beq	_$L132
CBLOCK 369 3 474

;;		msg = SUBGHZ_RX_DIS_FAIL;
CLINEA 0000H 0001H 01DBH 0003H 001BH
	mov	er0,	#12

;;		goto error;						//2016.5.1 add 
CLINEA 0000H 0001H 01DCH 0003H 0022H
	bal	_$L134
CBLOCKEND 369 3 477

;;	}
CLINEA 0000H 0000H 01DDH 0002H 0002H
_$L132 :

;;	subghz_param.read = false;
CLINEA 0000H 0001H 01DEH 0002H 001BH
	mov	r0,	#00h
	st	r0,	NEAR _subghz_param+01h

;;	msg = SUBGHZ_OK;
CLINEA 0000H 0001H 01DFH 0002H 0011H
	mov	er0,	#0 

;;	subghz_api_status &= ~SUBGHZ_API_RXENABLE;
CLINEA 0000H 0001H 01E0H 0002H 002BH
	rb	NEAR _subghz_api_status.3

;;error:
CLINEA 0000H 0001H 01E2H 0001H 0006H
CLABEL 0086H "error"
_$L134 :

;;	subghz_param.rx_stat.status = result;
CLINEA 0000H 0001H 01E3H 0002H 0026H
	st	er2,	NEAR _subghz_param+0ah

;;	return msg;
CLINEA 0000H 0001H 01E5H 0002H 000CH
CBLOCKEND 369 2 486

;;}
CLINEA 0000H 0000H 01E6H 0001H 0001H
	pop	pc
CBLOCKEND 369 1 486
CFUNCTIONEND 369


	rseg $$subghz_getStatus$subghz_api
CFUNCTION 370

_subghz_getStatus	:
CBLOCK 370 1 506

;;{
CLINEA 0000H 0001H 01FAH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 370 2 506
CRET 0004H
CARGUMENT 47H 0002H 0028H "tx" 06H 03H 00H 00H 05H 13H 00H
CARGUMENT 47H 0002H 0029H "rx" 06H 03H 00H 00H 05H 13H 00H

;;	if (tx != NULL)
CLINEA 0000H 0001H 01FBH 0002H 0010H
	mov	er0,	er0
	beq	_$L136
CBLOCK 370 3 508

;;		memcpy(tx,&subghz_param.tx_stat, sizeof(subghz_param.tx_stat));
CLINEA 0000H 0001H 01FDH 0003H 0041H
	mov	er0,	#4 
	push	er0
	mov	r2,	#BYTE1 OFFSET (_subghz_param+04h)
	mov	r3,	#BYTE2 OFFSET (_subghz_param+04h)
	mov	er0,	er8
	bl	_memcpy_nn
	add	sp,	#2 
CBLOCKEND 370 3 510

;;	}
CLINEA 0000H 0000H 01FEH 0002H 0002H
_$L136 :

;;	if (rx != NULL)
CLINEA 0000H 0001H 01FFH 0002H 0010H
	mov	er10,	er10
	beq	_$L138
CBLOCK 370 4 512

;;		memcpy(rx,&subghz_param.rx_stat, sizeof(subghz_param.rx_stat));
CLINEA 0000H 0001H 0201H 0003H 0041H
	mov	er0,	#4 
	push	er0
	mov	r2,	#BYTE1 OFFSET (_subghz_param+08h)
	mov	r3,	#BYTE2 OFFSET (_subghz_param+08h)
	mov	er0,	er10
	bl	_memcpy_nn
	add	sp,	#2 
CBLOCKEND 370 4 514

;;	}
CLINEA 0000H 0000H 0202H 0002H 0002H
_$L138 :
CBLOCKEND 370 2 516

;;}
CLINEA 0000H 0000H 0204H 0001H 0001H
	pop	xr8
	pop	pc
CBLOCKEND 370 1 516
CFUNCTIONEND 370


	rseg $$subghz_get_my_ieee_addr$subghz_api
CFUNCTION 371

_subghz_get_my_ieee_addr	:
CBLOCK 371 1 519

;;{
CLINEA 0000H 0001H 0207H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 371 2 519
CRET 0002H
CARGUMENT 46H 0002H 0028H "ieee_addr" 04H 03H 00H 00H 00H

;;	memcpy(ieee_addr,subghz_param.mach->my_addr.ieee_addr,8);
CLINEA 0000H 0001H 0208H 0002H 003AH
	mov	er0,	#8 
	push	er0
	l	er2,	NEAR _subghz_param+028h
	add	er2,	#8 
	mov	er0,	er8
	bl	_memcpy_nn
	add	sp,	#2 
CBLOCKEND 371 2 521

;;}
CLINEA 0000H 0001H 0209H 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 371 1 521
CFUNCTIONEND 371


	rseg $$subghz_get_my_short_addr$subghz_api
CFUNCTION 372

_subghz_get_my_short_addr	:
CBLOCK 372 1 523

;;{
CLINEA 0000H 0001H 020BH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	bp
CBLOCK 372 2 523
CARGUMENT 46H 0002H 0024H "short_addr" 04H 03H 00H 00H 01H

;;	*short_addr = subghz_param.mach->my_addr.short_addr;
CLINEA 0000H 0001H 020CH 0002H 0035H
	l	bp,	NEAR _subghz_param+028h
	l	bp,	6[bp]
	st	bp,	[er0]
CBLOCKEND 372 2 525

;;}
CLINEA 0000H 0001H 020DH 0001H 0001H
	pop	bp
	rt
CBLOCKEND 372 1 525
CFUNCTIONEND 372


	rseg $$subghz_getMyAddress$subghz_api
CFUNCTION 373

_subghz_getMyAddress	:
CBLOCK 373 1 527

;;{
CLINEA 0000H 0001H 020FH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 373 2 527

;;	return subghz_param.short_addr;
CLINEA 0000H 0001H 0210H 0002H 0020H
	l	er0,	NEAR _subghz_param+02ch
CBLOCKEND 373 2 529

;;}
CLINEA 0000H 0000H 0211H 0001H 0001H
	rt
CBLOCKEND 373 1 529
CFUNCTIONEND 373


	rseg $$subghz_getMyAddr64$subghz_api
CFUNCTION 374

_subghz_getMyAddr64	:
CBLOCK 374 1 531

;;{
CLINEA 0000H 0001H 0213H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	bp
	push	er8
	mov	er8,	er0
CBLOCK 374 2 531
CARGUMENT 46H 0002H 0028H "addr" 04H 03H 00H 00H 00H

;;	if(addr) {
CLINEA 0000H 0001H 0214H 0002H 000BH
	mov	er0,	er0
	beq	_$L144
CBLOCK 374 3 532

;;		addr[0] = subghz_param.mach->my_addr.ieee_addr[7];
CLINEA 0000H 0001H 0215H 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r2,	15[bp]
	st	r2,	[er0]

;;		addr[1] = subghz_param.mach->my_addr.ieee_addr[6];
CLINEA 0000H 0001H 0216H 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	14[bp]
	st	r0,	01h[er8]

;;		addr[2] = subghz_param.mach->my_addr.ieee_addr[5];
CLINEA 0000H 0001H 0217H 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	13[bp]
	st	r0,	02h[er8]

;;		addr[3] = subghz_param.mach->my_addr.ieee_addr[4];
CLINEA 0000H 0001H 0218H 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	12[bp]
	st	r0,	03h[er8]

;;		addr[4] = subghz_param.mach->my_addr.ieee_addr[3];
CLINEA 0000H 0001H 0219H 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	11[bp]
	st	r0,	04h[er8]

;;		addr[5] = subghz_param.mach->my_addr.ieee_addr[2];
CLINEA 0000H 0001H 021AH 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	10[bp]
	st	r0,	05h[er8]

;;		addr[6] = subghz_param.mach->my_addr.ieee_addr[1];
CLINEA 0000H 0001H 021BH 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	9[bp]
	st	r0,	06h[er8]

;;		addr[7] = subghz_param.mach->my_addr.ieee_addr[0];
CLINEA 0000H 0001H 021CH 0003H 0034H
	l	bp,	NEAR _subghz_param+028h
	l	r0,	8[bp]
	st	r0,	07h[er8]
CBLOCKEND 374 3 541

;;	}
CLINEA 0000H 0000H 021DH 0002H 0002H
_$L144 :
CBLOCKEND 374 2 543

;;}
CLINEA 0000H 0000H 021FH 0001H 0001H
	pop	er8
	pop	bp
	rt
CBLOCKEND 374 1 543
CFUNCTIONEND 374


	rseg $$subghz_msgOut$subghz_api
CFUNCTION 375

_subghz_msgOut	:
CBLOCK 375 1 584

;;{
CLINEA 0000H 0001H 0248H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	push	er4
	mov	er8,	er0
CBLOCK 375 2 584
CRET 0004H
CARGUMENT 47H 0002H 0028H "msg" 02H 00H 01H
CSLOCAL 42H 0002H 0001H 0002H "s1" 05H 01H 02H 00H 00H 00H
CSLOCAL 42H 0006H 0002H 0002H "s2" 05H 01H 06H 00H 00H 00H
CSLOCAL 42H 0009H 0003H 0002H "s3" 05H 01H 09H 00H 00H 00H

;;	if((msg>=SUBGHZ_OK)&&(msg<=SUBGHZ_TTL_SEND_OVR)){
CLINEA 0000H 0001H 024EH 0002H 0032H
	mov	er0,	er0
	bns	_$L167
	cmp	r0,	#010h
	cmpc	r1,	#00h
	bgts	_$L167
CBLOCK 375 3 590

;;		Serial.print(subghz_msg[msg]);
CLINEA 0000H 0001H 024FH 0003H 0020H
	add	er0,	er8
	l	er0,	NEAR _subghz_msg[er0]
	l	er2,	NEAR _Serial+0ch
	bl	er2

;;		Serial.print(s1);
CLINEA 0000H 0001H 0250H 0003H 0013H
	mov	r0,	#BYTE1 OFFSET _$ST1
	mov	r1,	#BYTE2 OFFSET _$ST1
	l	er2,	NEAR _Serial+0ch
	bl	er2
CBLOCKEND 375 3 593

;;	}
CLINEA 0000H 0000H 0251H 0002H 0002H
_$L167 :

;;	Serial.print(s2);
CLINEA 0000H 0001H 0254H 0002H 0012H
	mov	r0,	#BYTE1 OFFSET _$ST2
	mov	r1,	#BYTE2 OFFSET _$ST2
	l	er2,	NEAR _Serial+0ch
	bl	er2

;;	Serial.print_long((long)subghz_param.tx_stat.rssi,DEC);
CLINEA 0000H 0001H 0255H 0002H 0038H
	mov	r0,	#0ah
	push	r0
	l	r0,	NEAR _subghz_param+04h
	mov	r1,	#00h
	mov	er2,	#0 
	l	er4,	NEAR _Serial+010h
	bl	er4
	add	sp,	#2 

;;	Serial.print(s3);
CLINEA 0000H 0001H 0256H 0002H 0012H
	mov	r0,	#BYTE1 OFFSET _$ST3
	mov	r1,	#BYTE2 OFFSET _$ST3
	l	er2,	NEAR _Serial+0ch
	bl	er2

;;	Serial.println_long((long)subghz_param.tx_stat.status,DEC);
CLINEA 0000H 0001H 0257H 0002H 003CH
	mov	r0,	#0ah
	push	r0
	l	er0,	NEAR _subghz_param+06h
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	l	er4,	NEAR _Serial+012h
	bl	er4
	add	sp,	#2 
CBLOCKEND 375 2 602

;;}
CLINEA 0000H 0000H 025AH 0001H 0001H
	pop	er4
	pop	er8
	pop	pc
CBLOCKEND 375 1 602
CFUNCTIONEND 375


	rseg $$subghz_getSendMode$subghz_api
CFUNCTION 376

_subghz_getSendMode	:
CBLOCK 376 1 605

;;{
CLINEA 0000H 0001H 025DH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	bp
	mov	er2,	er0
CBLOCK 376 2 605
CARGUMENT 47H 0002H 0025H "param" 06H 03H 00H 00H 05H 14H 00H

;;	param->addrType = subghz_param.addr_type;
CLINEA 0000H 0001H 025EH 0002H 002AH
	l	r0,	NEAR _subghz_param
	st	r0,	[er2]

;;	param->senseTime = subghz_param.rf.cca_max_be;
CLINEA 0000H 0001H 025FH 0002H 002FH
	l	r0,	NEAR _subghz_param+015h
	st	r0,	01h[er2]

;;	param->txRetry = subghz_param.rf.tx_retry;
CLINEA 0000H 0001H 0260H 0002H 002BH
	l	r0,	NEAR _subghz_param+019h
	st	r0,	02h[er2]

;;	param->txInterval = subghz_param.rf.ack_timeout;
CLINEA 0000H 0001H 0261H 0002H 0031H
	l	er0,	NEAR _subghz_param+01ch
	st	er0,	04h[er2]

;;	param->myAddress = subghz_param.mach->my_addr.short_addr; 
CLINEA 0000H 0001H 0263H 0002H 003BH
	l	bp,	NEAR _subghz_param+028h
	l	er0,	6[bp]
	st	er0,	06h[er2]

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 0265H 0002H 0012H
CBLOCKEND 376 2 614

;;}
CLINEA 0000H 0000H 0266H 0001H 0001H
	mov	er0,	#0 
	pop	bp
	rt
CBLOCKEND 376 1 614
CFUNCTIONEND 376


	rseg $$subghz_setSendMode$subghz_api
CFUNCTION 377

_subghz_setSendMode	:
CBLOCK 377 1 617

;;{
CLINEA 0000H 0001H 0269H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	bp
	push	er8
	mov	er8,	er0
CBLOCK 377 2 617
CARGUMENT 47H 0002H 0028H "param" 06H 03H 00H 00H 05H 14H 00H

;;	if( param->addrType > 7 )
CLINEA 0000H 0001H 026BH 0002H 001AH
	l	r0,	[er0]
	cmp	r0,	#07h
	ble	_$L177
CBLOCK 377 3 620

;;		return SUBGHZ_ERR_ADDRTYPE;
CLINEA 0000H 0001H 026DH 0003H 001DH
	mov	er0,	#15
CBLOCKEND 377 3 622
CBLOCKEND 377 2 632

;;}
CLINEA 0000H 0001H 0278H 0001H 0001H
_$L176 :
	pop	er8
	pop	bp
	rt

;;	}
CLINEA 0000H 0000H 026EH 0002H 0002H
_$L177 :

;;	subghz_param.addr_type = param->addrType;
CLINEA 0000H 0001H 0270H 0002H 002AH
	l	r0,	[er8]
	st	r0,	NEAR _subghz_param

;;	subghz_param.rf.cca_max_be= param->senseTime;
CLINEA 0000H 0001H 0271H 0002H 002EH
	l	r0,	01h[er8]
	st	r0,	NEAR _subghz_param+015h

;;	subghz_param.rf.tx_retry = param->txRetry;
CLINEA 0000H 0001H 0272H 0002H 002BH
	l	r0,	02h[er8]
	st	r0,	NEAR _subghz_param+019h

;;	subghz_param.rf.ack_timeout = param->txInterval;
CLINEA 0000H 0001H 0273H 0002H 0031H
	l	er0,	04h[er8]
	mov	er2,	#0 
	st	er0,	NEAR _subghz_param+01ch
	st	er2,	NEAR _subghz_param+01eh

;;	subghz_param.mach->my_addr.short_addr = param->myAddress;
CLINEA 0000H 0001H 0275H 0002H 003AH
	l	bp,	NEAR _subghz_param+028h
	l	er0,	06h[er8]
	st	er0,	6[bp]

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 0277H 0002H 0012H
	mov	er0,	#0 
	bal	_$L176
CBLOCKEND 377 1 632
CFUNCTIONEND 377


	rseg $$subghz_decMac$subghz_api
CFUNCTION 352

_subghz_decMac	:
CBLOCK 352 1 636

;;{
CLINEA 0000H 0001H 027CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_header$0	set	-54
	_raw_len$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-054
	push	xr8
	mov	er10,	er2
	mov	er8,	er0
CBLOCK 352 2 636
CRET 003CH
CARGUMENT 47H 0002H 0028H "mac" 06H 03H 00H 00H 05H 15H 00H
CARGUMENT 46H 0002H 0029H "raw" 04H 03H 00H 00H 00H
CARGUMENT 42H 0002H 0004H "raw_len" 02H 00H 01H
CLOCAL 43H 0036H 0036H 0002H "header" 04H 00H 05H 0CH 00H

;;	header.input.data = raw;
CLINEA 0000H 0001H 027EH 0002H 0019H
	st	er2,	_header$0+02eh[fp]

;;	header.input.len = raw_len;
CLINEA 0000H 0001H 027FH 0002H 001CH
	l	er0,	_raw_len$4[fp]
	st	er0,	_header$0+030h[fp]

;;	header.input.size = raw_len;
CLINEA 0000H 0001H 0280H 0002H 001DH
	st	er0,	_header$0+032h[fp]

;;	header.raw.data = raw;
CLINEA 0000H 0001H 0281H 0002H 0017H
	st	er2,	_header$0+028h[fp]

;;	header.raw.len = raw_len;
CLINEA 0000H 0001H 0282H 0002H 001AH
	st	er0,	_header$0+02ah[fp]

;;	header.raw.size = raw_len;
CLINEA 0000H 0001H 0283H 0002H 001BH
	st	er0,	_header$0+02ch[fp]

;;	mach_parse_data(&header);
CLINEA 0000H 0001H 0284H 0002H 001AH
	mov	er0,	fp
	add	er0,	#-54
	bl	_mach_parse_data

;;	mac->mac_header.fc16=header.fc.fc16;
CLINEA 0000H 0001H 0286H 0002H 0025H
	l	er0,	_header$0[fp]
	st	er0,	[er8]

;;	mac->seq_num=header.seq;
CLINEA 0000H 0001H 0287H 0002H 0019H
	l	r0,	_header$0+01eh[fp]
	st	r0,	02h[er8]

;;	mac->addr_type=header.addr_type;
CLINEA 0000H 0001H 0288H 0002H 0021H
	l	r0,	_header$0+01fh[fp]
	st	r0,	03h[er8]

;;	if(header.dst.panid.enb)
CLINEA 0000H 0001H 0289H 0002H 0019H
	l	r0,	_header$0+02h[fp]
	beq	_$L180

;;		mac->dst_panid=header.dst.panid.data;
CLINEA 0000H 0001H 028AH 0003H 0027H
	l	er0,	_header$0+04h[fp]

;;	else
CLINEA 0000H 0001H 028BH 0002H 0005H
	bal	_$L182
_$L180 :

;;		mac->dst_panid=0xfffe;
CLINEA 0000H 0001H 028CH 0003H 0018H
	mov	er0,	#-2
_$L182 :
	st	er0,	04h[er8]

;;	if(header.src.panid.enb)
CLINEA 0000H 0001H 028DH 0002H 0019H
	l	r0,	_header$0+010h[fp]
	beq	_$L183

;;		mac->src_panid=header.src.panid.data;
CLINEA 0000H 0001H 028EH 0003H 0027H
	l	er0,	_header$0+012h[fp]

;;	else
CLINEA 0000H 0001H 028FH 0002H 0005H
	bal	_$L185
_$L183 :

;;		mac->src_panid=0xfffe;
CLINEA 0000H 0001H 0290H 0003H 0018H
	mov	er0,	#-2
_$L185 :
	st	er0,	0eh[er8]

;;	memcpy(mac->dst_addr,header.dst.addr.ieee_addr,8);
CLINEA 0000H 0001H 0291H 0002H 0033H
	mov	er0,	#8 
	push	er0
	mov	er2,	fp
	add	er2,	#-46
	mov	er0,	er8
	add	er0,	#6 
	bl	_memcpy_nn
	add	sp,	#2 

;;	memcpy(mac->src_addr,header.src.addr.ieee_addr,8);
CLINEA 0000H 0001H 0292H 0002H 0033H
	mov	er0,	#8 
	push	er0
	mov	er2,	fp
	add	er2,	#-32
	mov	er0,	er8
	add	er0,	#16
	bl	_memcpy_nn
	add	sp,	#2 

;;	mac->raw = raw;
CLINEA 0000H 0001H 0293H 0002H 0010H
	st	er10,	018h[er8]

;;	mac->raw_len = raw_len;
CLINEA 0000H 0001H 0294H 0002H 0018H
	l	er0,	_raw_len$4[fp]
	st	er0,	01ah[er8]

;;	mac->payload = header.payload.data;
CLINEA 0000H 0001H 0295H 0002H 0024H
	l	er0,	_header$0+022h[fp]
	st	er0,	01ch[er8]

;;	mac->payload_len = header.payload.len;
CLINEA 0000H 0001H 0296H 0002H 0027H
	l	er0,	_header$0+024h[fp]
	st	er0,	01eh[er8]
CBLOCKEND 352 2 665

;;}
CLINEA 0000H 0000H 0299H 0001H 0001H
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 352 1 665
CFUNCTIONEND 352


	rseg $$subghz_setKey$subghz_api
CFUNCTION 379

_subghz_setKey	:
CBLOCK 379 1 668

;;{
CLINEA 0000H 0001H 029CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 379 2 668
CRET 0000H
CARGUMENT 46H 0002H 0024H "key" 04H 03H 00H 00H 00H

;;	AES128_setKey(key);
CLINEA 0000H 0001H 029DH 0002H 0014H
	bl	_AES128_setKey

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 029EH 0002H 0012H
CBLOCKEND 379 2 671

;;}
CLINEA 0000H 0000H 029FH 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 379 1 671
CFUNCTIONEND 379


	rseg $$subghz_setMyAddress$subghz_api
CFUNCTION 380

_subghz_setMyAddress	:
CBLOCK 380 1 674

;;{
CLINEA 0000H 0001H 02A2H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 380 2 674
CARGUMENT 46H 0002H 0024H "my_addr" 02H 00H 01H

;;	if(my_addr == 0xffff) return SUBGHZ_MYADDR_FAIL;
CLINEA 0000H 0001H 02A3H 0002H 0031H
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$L188
	mov	er0,	#5 
CBLOCKEND 380 2 678

;;}
CLINEA 0000H 0001H 02A6H 0001H 0001H
	rt

;;	if(my_addr == 0xffff) return SUBGHZ_MYADDR_FAIL;
CLINEA 0000H 0000H 02A3H 0002H 0031H
_$L188 :

;;	subghz_param.short_addr = my_addr;
CLINEA 0000H 0001H 02A4H 0002H 0023H
	st	er0,	NEAR _subghz_param+02ch

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 02A5H 0002H 0012H
	mov	er0,	#0 
	rt
CBLOCKEND 380 1 678
CFUNCTIONEND 380


	rseg $$subghz_setPromiscuous$subghz_api
CFUNCTION 381

_subghz_setPromiscuous	:
CBLOCK 381 1 680

;;static SUBGHZ_MSG subghz_setPromiscuous(bool on) {
CLINEA 0000H 0001H 02A8H 0001H 0032H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 381 2 680
CRET 0000H
CARGUMENT 46H 0001H 0014H "on" 02H 00H 00H

;;	mach_set_promiscuous(on);
CLINEA 0000H 0001H 02A9H 0002H 001AH
	bl	_mach_set_promiscuous

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 02AAH 0002H 0012H
CBLOCKEND 381 2 683

;;}
CLINEA 0000H 0000H 02ABH 0001H 0001H
	mov	er0,	#0 
	pop	pc
CBLOCKEND 381 1 683
CFUNCTIONEND 381


	rseg $$subghz_setAckReq$subghz_api
CFUNCTION 382

_subghz_setAckReq	:
CBLOCK 382 1 684

;;static SUBGHZ_MSG subghz_setAckReq(bool on) {
CLINEA 0000H 0001H 02ACH 0001H 002DH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 382 2 684
CARGUMENT 46H 0001H 0014H "on" 02H 00H 00H

;;	subghz_param.ack_req = on;
CLINEA 0000H 0001H 02ADH 0002H 001BH
	st	r0,	NEAR _subghz_param+02h

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 02B3H 0002H 0012H
CBLOCKEND 382 2 692

;;}
CLINEA 0000H 0000H 02B4H 0001H 0001H
	mov	er0,	#0 
	rt
CBLOCKEND 382 1 692
CFUNCTIONEND 382


	rseg $$subghz_setBroadcastEnb$subghz_api
CFUNCTION 383

_subghz_setBroadcastEnb	:
CBLOCK 383 1 693

;;static SUBGHZ_MSG subghz_setBroadcastEnb(bool on) {
CLINEA 0000H 0001H 02B5H 0001H 0033H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 383 2 693
CARGUMENT 46H 0001H 0014H "on" 02H 00H 00H

;;	subghz_param.broadcast_enb = on;
CLINEA 0000H 0001H 02B6H 0002H 0021H
	st	r0,	NEAR _subghz_param+03h

;;	return SUBGHZ_OK;
CLINEA 0000H 0001H 02BCH 0002H 0012H
CBLOCKEND 383 2 701

;;}
CLINEA 0000H 0000H 02BDH 0001H 0001H
	mov	er0,	#0 
	rt
CBLOCKEND 383 1 701
CFUNCTIONEND 383


	rseg $$subghz_set_enhance_ack$subghz_api
CFUNCTION 384

_subghz_set_enhance_ack	:
CBLOCK 384 1 703

;;static bool subghz_set_enhance_ack(uint8_t *data, int size){
CLINEA 0000H 0001H 02BFH 0001H 003CH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 384 2 703
CARGUMENT 46H 0002H 0024H "data" 04H 03H 00H 00H 00H
CARGUMENT 47H 0002H 0025H "size" 02H 00H 01H

;;	return mach_set_enhance_ack(data,size);
CLINEA 0000H 0001H 02C0H 0002H 0028H
	b	_mach_set_enhance_ack
CBLOCKEND 384 2 705
CLINEA 0000H 0000H 02C1H 0001H 0001H
CBLOCKEND 384 1 705
CFUNCTIONEND 384


	rseg $$subghz_get_enhance_ack$subghz_api
CFUNCTION 385

_subghz_get_enhance_ack	:
CBLOCK 385 1 707

;;static void subghz_get_enhance_ack(uint8_t **data,int *size){
CLINEA 0000H 0001H 02C3H 0001H 003DH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 385 2 707
CARGUMENT 46H 0002H 0024H "data" 06H 03H 00H 03H 00H 00H 00H
CARGUMENT 47H 0002H 0025H "size" 04H 03H 00H 00H 01H

;;	mach_get_enhance_ack(data,size);
CLINEA 0000H 0001H 02C4H 0002H 0021H
	b	_mach_get_enhance_ack
CBLOCKEND 385 2 710
CLINEA 0000H 0000H 02C6H 0001H 0001H
CBLOCKEND 385 1 710
CFUNCTIONEND 385


	rseg $$subghz_set_ack_tx_interval$subghz_api
CFUNCTION 386

_subghz_set_ack_tx_interval	:
CBLOCK 386 1 711

;;static void subghz_set_ack_tx_interval(uint16_t interval){
CLINEA 0000H 0001H 02C7H 0001H 003AH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 386 2 711
CARGUMENT 46H 0002H 0024H "interval" 02H 00H 01H

;;	mach_set_ack_tx_interval(interval);
CLINEA 0000H 0001H 02C8H 0002H 0024H
	b	_mach_set_ack_tx_interval
CBLOCKEND 386 2 713
CLINEA 0000H 0001H 02C9H 0001H 0001H
CBLOCKEND 386 1 713
CFUNCTIONEND 386


	rseg $$subghz_get_ed_value$subghz_api
CFUNCTION 387

_subghz_get_ed_value	:
CBLOCK 387 1 715

;;static void subghz_get_ed_value(uint8_t *rssi){
CLINEA 0000H 0001H 02CBH 0001H 002FH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 387 2 715
CARGUMENT 46H 0002H 0024H "rssi" 04H 03H 00H 00H 00H

;;	mach_ed(rssi);
CLINEA 0000H 0001H 02CCH 0002H 000FH
	b	_mach_ed
CBLOCKEND 387 2 717
CLINEA 0000H 0001H 02CDH 0001H 0001H
CBLOCKEND 387 1 717
CFUNCTIONEND 387


	rseg $$subghz_set_ant_sw$subghz_api
CFUNCTION 388

_subghz_set_ant_sw	:
CBLOCK 388 1 719

;;static void subghz_set_ant_sw(uint8_t ant_sw){
CLINEA 0000H 0001H 02CFH 0001H 002EH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 388 2 719
CARGUMENT 46H 0001H 0014H "ant_sw" 02H 00H 00H

;;	subghz_param.rf.ant_sw = ant_sw;
CLINEA 0000H 0001H 02D0H 0002H 0021H
	st	r0,	NEAR _subghz_param+01ah
CBLOCKEND 388 2 721

;;}
CLINEA 0000H 0001H 02D1H 0001H 0001H
	rt
CBLOCKEND 388 1 721
CFUNCTIONEND 388


	rseg $$NVARsubghz_api
_$ST0 :
	ds	0100h
	public _subghz_api_status
	public _mach_rx_irq
	public _subghz_get_my_ieee_addr
	public _subghz_get_my_short_addr
	public _SubGHz
	extrn code near : _dis_interrupts
	extrn code near : _mach_parse_data
	extrn code near : _mach_ed
	extrn code near : _mach_set_enhance_ack
	extrn code near : _mach_set_ack_tx_interval
	extrn code near : _mach_tx
	extrn code near : _mach_sleep
	extrn code near : _HAL_remove
	extrn code near : _mach_set_src_addr
	extrn code near : _AES128_CBC_decrypt
	extrn code near : _mach_set_promiscuous
	extrn code near : _mach_init
	extrn code near : _memcpy_nn
	extrn code near : _memset_n
	extrn code near : _mach_set_my_short_addr
	extrn code near : _AES128_getStatus
	extrn code near : _enb_interrupts
	extrn code near : _mach_setup
	extrn code near : _mach_set_dst_short_addr
	extrn code near : _mach_stop
	extrn table near : _Serial
	extrn code near : _AES128_setKey
	extrn code near : _mach_get_enhance_ack
	extrn code near : _mach_set_dst_ieee_addr
	extrn code near : _srand
	extrn code near : _mach_start
	extrn code near : _main

	rseg $$NINITTAB
	db	00h
	align
	dw	_subghz_msg0
	dw	_subghz_msg1
	dw	_subghz_msg2
	dw	_subghz_msg3
	dw	_subghz_msg4
	dw	_subghz_msg5
	dw	_subghz_msg6
	dw	_subghz_msg7
	dw	_subghz_msg8
	dw	_subghz_msg9
	dw	_subghz_msg10
	dw	_subghz_msg11
	dw	_subghz_msg12
	dw	_subghz_msg13
	dw	_subghz_msg14
	dw	_subghz_msg15
	dw	_subghz_msg16
	DB	"\x09", 00H
	DB	"RSSI=", 00H
	DB	"\x09STATUS=", 00H

	rseg $$TABsubghz_msg0$subghz_api
_subghz_msg0 :
	DB	"SUBGHZ_OK", 00H

	rseg $$TABsubghz_msg1$subghz_api
_subghz_msg1 :
	DB	"SUBGHZ_RESET_FAIL", 00H

	rseg $$TABsubghz_msg2$subghz_api
_subghz_msg2 :
	DB	"SUBGHZ_SETUP_FAIL", 00H

	rseg $$TABsubghz_msg3$subghz_api
_subghz_msg3 :
	DB	"SUBGHZ_SLEEP_FAIL", 00H

	rseg $$TABsubghz_msg4$subghz_api
_subghz_msg4 :
	DB	"SUBGHZ_WAKEUP_FAIL", 00H

	rseg $$TABsubghz_msg5$subghz_api
_subghz_msg5 :
	DB	"SUBGHZ_MYADDR_FAIL", 00H

	rseg $$TABsubghz_msg6$subghz_api
_subghz_msg6 :
	DB	"SUBGHZ_SETFIL_FAIL", 00H

	rseg $$TABsubghz_msg7$subghz_api
_subghz_msg7 :
	DB	"SUBGHZ_TX_COMP_FAIL", 00H

	rseg $$TABsubghz_msg8$subghz_api
_subghz_msg8 :
	DB	"SUBGHZ_TX_FAIL", 00H

	rseg $$TABsubghz_msg9$subghz_api
_subghz_msg9 :
	DB	"SUBGHZ_TX_CCA_FAIL", 00H

	rseg $$TABsubghz_msg10$subghz_api
_subghz_msg10 :
	DB	"SUBGHZ_TX_ACK_FAIL", 00H

	rseg $$TABsubghz_msg11$subghz_api
_subghz_msg11 :
	DB	"SUBGHZ_RX_ENB_FAIL", 00H

	rseg $$TABsubghz_msg12$subghz_api
_subghz_msg12 :
	DB	"SUBGHZ_RX_DIS_FAIL", 00H

	rseg $$TABsubghz_msg13$subghz_api
_subghz_msg13 :
	DB	"SUBGHZ_RX_COMP_FAIL", 00H

	rseg $$TABsubghz_msg14$subghz_api
_subghz_msg14 :
	DB	"SUBGHZ_PANID", 00H

	rseg $$TABsubghz_msg15$subghz_api
_subghz_msg15 :
	DB	"SUBGHZ_ERR_ADDRTYPE", 00H

	rseg $$TABsubghz_msg16$subghz_api
_subghz_msg16 :
	DB	"SUBGHZ_TTL_SEND_OVR", 00H

	rseg $$TABSubGHz$subghz_api
	align
_SubGHz :
	dw	_subghz_init
	dw	_subghz_remove
	dw	_subghz_begin
	dw	_subghz_close
	dw	_subghz_tx
	dw	_subghz_tx64le
	dw	_subghz_tx64be
	dw	_subghz_rxEnable
	dw	_subghz_setPromiscuous
	dw	_subghz_setAckReq
	dw	_subghz_setBroadcastEnb
	dw	_subghz_rxDisable
	dw	_subghz_readData
	dw	_subghz_getMyAddress
	dw	_subghz_getMyAddr64
	dw	_subghz_setMyAddress
	dw	_subghz_getStatus
	dw	_subghz_msgOut
	dw	_subghz_setSendMode
	dw	_subghz_getSendMode
	dw	_subghz_decMac
	dw	_subghz_setKey
	dw	_subghz_set_enhance_ack
	dw	_subghz_get_enhance_ack
	dw	_subghz_set_ack_tx_interval
	dw	_subghz_get_ed_value
	dw	_subghz_set_ant_sw

	rseg $$NINITVAR
_subghz_api_status :
	ds	01h
	align
_subghz_msg :
	ds	022h
_$ST1 :
	ds	02h
_$ST2 :
	ds	06h
_$ST3 :
	ds	09h

	rseg $$NVARsubghz_api
_subghz_param :
	ds	03ah

	rseg $$NINITTAB
	align

	rseg $$NINITVAR
	align

	end
