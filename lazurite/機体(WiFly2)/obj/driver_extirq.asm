;; Compile Options : /TML620504F /MS /near /IC:\LAZURI~1\LIBRAR~1\BM1383 /IC:\LAZURI~1\LIBRAR~1\BM1422 /IC:\LAZURI~1\LIBRAR~1\HARDWA~1 /IC:\LAZURI~1\LIBRAR~1\HARDWA~2 /IC:\LAZURI~1\LIBRAR~1\KXG03_~1 /IC:\LAZURI~1\LIBRAR~1\VL53L0X /IC:\LAZURI~1\LIBRAR~1\Wire /IC:\LAZURI~1\hardware\LAZURI~2 /IC:\LAZURI~1\hardware\LAZURI~2\lazurite /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\clock /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\common /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\irq /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\lp /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\MCU_SM~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\wdt /IC:\LAZURI~1\hardware\LAZURI~2\sub_ghz\ /D_ML620Q504 /DLAZURITE_MINI /DLAZURITE_IDE /DSUBGHZ /DPWR_LED /DLDO_CNT /SS 512 /SL 65 /SD /Oa /Ot /W 3 /Faobj\ /Lv 
;; Version Number  : Ver.3.53.1
;; File Name       : driver_extirq.c

	type (ML620504F) 
	model small, near
	$$NTABdriver_extirq segment table 2h #0h
	$$TABml620504f_exisel$driver_extirq segment table 2h #0h
	$$drv_attachInterrupt$driver_extirq segment code 2h #0h
	$$drv_detachInterrupt$driver_extirq segment code 2h #0h
	$$isr_ext_irq$driver_extirq segment code 2h #0h
	$$isr_ext_irq0$driver_extirq segment code 2h #0h
	$$isr_ext_irq1$driver_extirq segment code 2h #0h
	$$isr_ext_irq2$driver_extirq segment code 2h #0h
	$$isr_ext_irq3$driver_extirq segment code 2h #0h
	$$isr_ext_irq4$driver_extirq segment code 2h #0h
	$$isr_ext_irq5$driver_extirq segment code 2h #0h
	$$isr_ext_irq6$driver_extirq segment code 2h #0h
	$$isr_ext_irq7$driver_extirq segment code 2h #0h
	$$NTABdrv_attachInterrupt$driver_extirq segment table 2h #0h
CVERSION 3.53.1
CGLOBAL 01H 03H 0000H "drv_detachInterrupt" 08H 02H 51H 01H 81H 04H 00H 00H 07H
CGLOBAL 01H 03H 0000H "drv_attachInterrupt" 08H 02H 50H 01H 83H 08H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq0" 08H 02H 3DH 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq1" 08H 02H 3EH 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq2" 08H 02H 3FH 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq3" 08H 02H 40H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq4" 08H 02H 41H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq5" 08H 02H 42H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq6" 08H 02H 43H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq7" 08H 02H 44H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "isr_ext_irq" 08H 02H 46H 01H 83H 0eH 00H 00H 07H
CSTRUCTTAG 0000H 0000H 001EH 0003H 00000006H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "func" 0AH 03H 00H 02H 45H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "mode" 02H 00H 01H
CSTRUCTMEM 42H 00000001H 00000004H "pin" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001DH 001BH 00000036H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 0CH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "remove" 0AH 03H 00H 02H 0DH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "begin" 0AH 03H 00H 02H 0EH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "close" 0AH 03H 00H 02H 0FH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "send" 0AH 03H 00H 02H 11H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "send64le" 0AH 03H 00H 02H 13H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "send64be" 0AH 03H 00H 02H 15H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "rxEnable" 0AH 03H 00H 02H 17H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000010H "setPromiscuous" 0AH 03H 00H 02H 18H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000012H "setAckReq" 0AH 03H 00H 02H 19H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000014H "setBroadcastEnb" 0AH 03H 00H 02H 1AH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000016H "rxDisable" 0AH 03H 00H 02H 1BH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000018H "readData" 0AH 03H 00H 02H 1CH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001AH "getMyAddress" 0AH 03H 00H 02H 1DH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 0000001CH "getMyAddr64" 0AH 03H 00H 02H 1EH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000001EH "setMyAddress" 0AH 03H 00H 02H 1FH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000020H "getStatus" 0AH 03H 00H 02H 20H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000022H "msgOut" 0AH 03H 00H 02H 21H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000024H "setSendMode" 0AH 03H 00H 02H 22H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000026H "getSendMode" 0AH 03H 00H 02H 23H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000028H "decMac" 0AH 03H 00H 02H 24H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000002AH "setKey" 0AH 03H 00H 02H 25H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000002CH "setEnhanceAck" 0AH 03H 00H 02H 26H 01H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000002EH "getEnhanceAck" 0AH 03H 00H 02H 27H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000030H "setAckTxInterval" 0AH 03H 00H 02H 28H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000032H "getEdValue" 0AH 03H 00H 02H 29H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000034H "antSwitch" 0AH 03H 00H 02H 2AH 01H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0011H 000BH 00000002H "mac_fc_alignment"
CSTRUCTMEM 52H 00000003H 00000000H "frame_type" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "sec_enb" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "pending" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "ack_req" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "panid_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "nop" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000008H "seq_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000009H "ielist" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000AH "dst_addr_type" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000CH "frame_ver" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000EH "src_addr_type" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001CH 000BH 00000020H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "mac_header" 04H 00H 06H 12H 00H
CSTRUCTMEM 42H 00000001H 00000002H "seq_num" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "dst_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "dst_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "src_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000010H "src_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000018H "raw" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001AH "raw_len" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001CH "payload" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001EH "payload_len" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001BH 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addrType" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "senseTime" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "txInterval" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "myAddress" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "ccaWait" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001AH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000002H "status" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0008H 0003H 00000006H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "data" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "len" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "size" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0009H 0004H 00000010H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "id" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf_size" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 00000004H "in" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 0000000AH "out" 04H 00H 05H 08H 00H
CSTRUCTTAG 0000H 0000H 000CH 0015H 00000028H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "condition" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "ccaRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "ccaBe" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "ccaCount" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "txPower" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "txMode" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000009H "sequnceNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000AH "resendingNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000BH "rxOnEnable" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "promiscuousMode" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "ack_timeout" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000010H "status" 02H 00H 01H
CSTRUCTMEM 42H 00000004H 00000012H "total_send_bytes" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000016H "start_send_time" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000001AH "last_send_time" 02H 00H 02H
CSTRUCTMEM 43H 00000002H 0000001EH "phy" 06H 03H 00H 00H 05H 09H 00H
CSTRUCTMEM 43H 00000006H 00000020H "ack" 04H 00H 05H 08H 00H
CSTRUCTMEM 42H 00000002H 00000026H "tx_ack_interval" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0015H 0005H 0000000EH "mac_addr"
CSTRUCTMEM 42H 00000001H 00000000H "pan_coord" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "lddn_addr" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 000FH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "enb" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "data" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 000EH 0003H 0000000EH "fc_addr"
CSTRUCTMEM 43H 00000004H 00000000H "panid" 04H 00H 05H 0FH 00H
CSTRUCTMEM 42H 00000001H 00000004H "addr_type" 02H 00H 00H
CSTRUCTMEM 43H 00000008H 00000006H "addr" 04H 00H 06H 10H 00H
CSTRUCTTAG 0000H 0000H 0013H 000AH 00000036H "mac_header"
CSTRUCTMEM 43H 00000002H 00000000H "fc" 04H 00H 06H 12H 00H
CSTRUCTMEM 43H 0000000EH 00000002H "dst" 04H 00H 05H 0EH 00H
CSTRUCTMEM 43H 0000000EH 00000010H "src" 04H 00H 05H 0EH 00H
CSTRUCTMEM 42H 00000001H 0000001EH "seq" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000001FH "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000020H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000006H 00000022H "payload" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 00000028H "raw" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 0000002EH "input" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000002H 00000034H "payload_offset" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0014H 000CH 00000016H "rf_param"
CSTRUCTMEM 42H 00000001H 00000000H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "cca_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "cca_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "cca_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "tx_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "tx_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "tx_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "ant_sw" 02H 00H 00H
CSTRUCTMEM 42H 00000004H 0000000AH "ack_timeout" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 0000000EH "cca_level" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000012H "tx_power" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0016H 000AH 000000FAH "mach_param"
CSTRUCTMEM 43H 00000002H 00000000H "macl" 06H 03H 00H 00H 05H 0CH 00H
CSTRUCTMEM 43H 0000000EH 00000002H "my_addr" 04H 00H 05H 15H 00H
CSTRUCTMEM 43H 0000000EH 00000010H "coord_addr" 04H 00H 05H 15H 00H
CSTRUCTMEM 43H 00000036H 0000001EH "tx" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000036H 00000054H "rx" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000036H 0000008AH "rx_prev" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000036H 000000C0H "ack" 04H 00H 05H 13H 00H
CSTRUCTMEM 42H 00000001H 000000F6H "coordinator" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000F7H "sending" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 000000F8H "rf" 06H 03H 00H 00H 05H 14H 00H
CSTRUCTTAG 0000H 0000H 000DH 0004H 0000000EH "ieee802154_my_addr"
CSTRUCTMEM 42H 00000002H 00000000H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000004H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "pan_coord" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0006H 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0005H 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0004H 0005H 0000000AH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "write" 0AH 03H 00H 02H 7BH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "read" 0AH 03H 00H 02H 7CH 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "erase" 0AH 03H 00H 02H 7DH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000006H "write_byte" 0AH 03H 00H 02H 7EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000008H "read_byte" 0AH 03H 00H 02H 7FH 00H 00H 00H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0003H 0008H 00000010H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 68H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "p" 0AH 03H 00H 02H 69H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "l" 0AH 03H 00H 02H 6AH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "f" 0AH 03H 00H 02H 6BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "d" 0AH 03H 00H 02H 6CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "ln" 0AH 03H 00H 02H 6DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "status" 0AH 03H 00H 02H 6EH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "len" 0AH 03H 00H 02H 6FH 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0002H 000FH 0000001EH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 59H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "end" 0AH 03H 00H 02H 5AH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 5BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 5CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "peek" 0AH 03H 00H 02H 5DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "flush" 0AH 03H 00H 02H 5EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000CH "print" 0AH 03H 00H 02H 5FH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "println" 0AH 03H 00H 02H 60H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000010H "print_long" 0AH 03H 00H 02H 61H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000012H "println_long" 0AH 03H 00H 02H 62H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000014H "print_double" 0AH 03H 00H 02H 63H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000016H "println_double" 0AH 03H 00H 02H 64H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000018H "write" 0AH 03H 00H 02H 65H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000001AH "write_byte" 0AH 03H 00H 02H 66H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000001CH "tx_available" 0AH 03H 00H 02H 67H 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 0012H 0003H 00000002H "mac_frame_control"
CUNIONMEM 42H 00000002H "fc8" 05H 01H 02H 00H 00H 00H
CUNIONMEM 42H 00000002H "fc16" 02H 00H 08H
CUNIONMEM 43H 00000002H "fc_bit" 04H 00H 05H 11H 00H
CUNIONTAG 0000H 0000H 0010H 0003H 00000008H "_Notag"
CUNIONMEM 42H 00000002H "short_addr" 02H 00H 08H
CUNIONMEM 42H 00000002H "lddn_addr" 02H 00H 08H
CUNIONMEM 42H 00000008H "ieee_addr" 05H 01H 08H 00H 00H 00H
CUNIONTAG 0000H 0000H 0007H 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CENUMTAG 0000H 0000H 0019H 0002H "_Notag"
CENUMMEM 00000014H "SUBGHZ_PWR_20MW"
CENUMMEM 00000001H "SUBGHZ_PWR_1MW"
CENUMTAG 0000H 0000H 0018H 0002H "_Notag"
CENUMMEM 00000064H "SUBGHZ_100KBPS"
CENUMMEM 00000032H "SUBGHZ_50KBPS"
CENUMTAG 0000H 0000H 0017H 0012H "_Notag"
CENUMMEM 00000000H "SUBGHZ_OK"
CENUMMEM 00000001H "SUBGHZ_RESET_FAIL"
CENUMMEM 00000002H "SUBGHZ_SETUP_FAIL"
CENUMMEM 00000003H "SUBGHZ_SLEEP_FAIL"
CENUMMEM 00000004H "SUBGHZ_WAKEUP_FAIL"
CENUMMEM 00000005H "SUBGHZ_MYADDR_FAIL"
CENUMMEM 00000006H "SUBGHZ_SETFIL_FAIL"
CENUMMEM 00000007H "SUBGHZ_TX_COMP_FAIL"
CENUMMEM 00000008H "SUBGHZ_TX_FAIL"
CENUMMEM 00000009H "SUBGHZ_TX_CCA_FAIL"
CENUMMEM 0000000AH "SUBGHZ_TX_ACK_FAIL"
CENUMMEM 0000000BH "SUBGHZ_RX_ENB_FAIL"
CENUMMEM 0000000CH "SUBGHZ_RX_DIS_FAIL"
CENUMMEM 0000000DH "SUBGHZ_RX_COMP_FAIL"
CENUMMEM 0000000EH "SUBGHZ_PANID"
CENUMMEM 0000000FH "SUBGHZ_ERR_ADDRTYPE"
CENUMMEM 00000010H "SUBGHZ_TTL_SEND_OVR"
CENUMMEM 00000011H "SUBGHZ_DUMMY"
CENUMTAG 0000H 0000H 000BH 000EH "_Notag"
CENUMMEM 00000000H "SUBGHZ_ST_TX_START"
CENUMMEM 00000001H "SUBGHZ_ST_CCA_FAST"
CENUMMEM 00000002H "SUBGHZ_ST_CCA_IDLE_DETECT"
CENUMMEM 00000003H "SUBGHZ_ST_CCA_ABORT"
CENUMMEM 00000004H "SUBGHZ_ST_CCA_RETRY"
CENUMMEM 00000005H "SUBGHZ_ST_CCA_FAILURE"
CENUMMEM 00000006H "SUBGHZ_ST_CCA_DONE"
CENUMMEM 00000007H "SUBGHZ_ST_TX_DONE"
CENUMMEM 00000008H "SUBGHZ_ST_TX_ACK_TIMEOUT"
CENUMMEM 00000009H "SUBGHZ_ST_TX_ACK_DONE"
CENUMMEM 0000000AH "SUBGHZ_ST_RX_START"
CENUMMEM 0000000BH "SUBGHZ_ST_RX_DONE"
CENUMMEM 0000000CH "SUBGHZ_ST_RX_ACK_DONE"
CENUMMEM 0000000DH "SUBGHZ_ST_NONE"
CENUMTAG 0000H 0000H 000AH 0005H "_Notag"
CENUMMEM 00000000H "CCA_IDLE"
CENUMMEM 00000001H "CCA_FAST"
CENUMMEM 00000002H "IDLE_DETECT"
CENUMMEM 00000003H "CCA_RETRY"
CENUMMEM 00000004H "CCA_FAILURE"
CENUMTAG 0000H 0000H 0001H 0003H "_Notag"
CENUMMEM 00000001H "HALT_I2C1_END"
CENUMMEM 00000002H "HALT_I2C0_END"
CENUMMEM 00000003H "HALT_DELAY"
CTYPEDEF 0000H 0000H 43H "SUBGHZ_POWER" 04H 00H 0AH 19H 00H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 07H 00H
CTYPEDEF 0000H 0000H 43H "SubGHz_CTRL" 04H 00H 05H 1DH 00H
CTYPEDEF 0000H 0000H 43H "INT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "PHY_PARAM" 04H 00H 05H 09H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_PARAM" 04H 00H 05H 1BH 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MSG" 04H 00H 0AH 17H 00H
CTYPEDEF 0000H 0000H 42H "bool" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "t_print" 04H 00H 05H 03H 00H
CTYPEDEF 0000H 0000H 42H "byte" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "INT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "INT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_STATE" 04H 00H 0AH 0BH 00H
CTYPEDEF 0000H 0000H 43H "MACL_PARAM" 04H 00H 05H 0CH 00H
CTYPEDEF 0000H 0000H 42H "BOOLEAN" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_PARAM" 04H 00H 05H 1CH 00H
CTYPEDEF 0000H 0000H 42H "UCHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "EXT_IRQ_PARAM" 04H 00H 05H 1EH 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_STATUS" 04H 00H 05H 1AH 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "uint8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_RATE" 04H 00H 0AH 18H 00H
CTYPEDEF 0000H 0000H 43H "BUFFER" 04H 00H 05H 08H 00H
CTYPEDEF 0000H 0000H 43H "int8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "int16_t" 02H 00H 08H
CTYPEDEF 0000H 0000H 43H "int32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "UINT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "DATAFLASH" 04H 00H 05H 04H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 84H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 83H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "CHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HardwareSerial" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 86H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 85H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "boolean" 02H 00H 00H
CTYPEDEF 0000H 0000H 42H "word" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "BOOL" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HALT_EVENT" 04H 00H 0AH 01H 00H
CTYPEDEF 0000H 0000H 43H "CCA_STATE" 04H 00H 0AH 0AH 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 05H 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 06H 00H
CTYPEDEF 0000H 0000H 42H "uint32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CTYPEDEF 0000H 0000H 42H "uint16_t" 02H 00H 08H
CGLOBAL 00H 43H 0030H "ext_irq_param" 07H 01H 08H 00H 00H 05H 1EH 00H
CGLOBAL 01H 00H 0024H "ml620504f_exisel" 05H 01H 24H 00H 00H 00H
CGLOBAL 02H 01H 0000H "num_to_bit" 05H 01H 00H 00H 00H 00H
CFILE 0001H 0000007BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\common.h"
CFILE 0002H 00000F42H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\ml620504F.h"
CFILE 0003H 000000C9H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\string.h"
CFILE 0004H 0000007AH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\yvals.h"
CFILE 0005H 00000042H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite.h"
CFILE 0006H 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\analogio.h"
CFILE 0007H 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\MCU_SM~1\\mcu.h"
CFILE 0008H 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\digitalio.h"
CFILE 0009H 00000041H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\pin_assignment.h"
CFILE 000AH 00000051H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite_system.h"
CFILE 000BH 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\serial.h"
CFILE 000CH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\print.h"
CFILE 000DH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_shift.h"
CFILE 000EH 0000002CH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_pulse.h"
CFILE 000FH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WInterrupts.h"
CFILE 0010H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WMath.h"
CFILE 0011H 00000031H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\flash.h"
CFILE 0012H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\tone.h"
CFILE 0013H 000000DAH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\stdlib.h"
CFILE 0014H 0000004FH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\math.h"
CFILE 0015H 00000082H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\subghz_api.h"
CFILE 0016H 0000009EH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\mach.h"
CFILE 0017H 00000064H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\macl.h"
CFILE 0018H 00000032H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\common_subghz.h"
CFILE 0019H 00000062H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\phy.h"
CFILE 001AH 0000003DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\endian.h"
CFILE 001BH 00000028H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\ml620q504\\driver_pin_assignment.h"
CFILE 001CH 0000006FH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\ml620q504\\driver_irq.h"
CFILE 001DH 00000331H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\irq\\irq.h"
CFILE 001EH 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\common\\rdwr_reg.h"
CFILE 001FH 00000028H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\ml620q504\\driver_gpio.h"
CFILE 0000H 000000F1H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\ml620q504\\driver_extirq.c"

	rseg $$isr_ext_irq$driver_extirq
CFUNCTION 326

_isr_ext_irq	:
CBLOCK 326 1 108

;;{
CLINEA 0000H 0001H 006CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_start_time$0	set	-4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-04
	push	xr4
	push	er8
	mov	r8,	r0
CBLOCK 326 2 108
CRET 000CH
CARGUMENT 46H 0001H 001CH "irqnum" 02H 00H 00H
CLOCAL 42H 0004H 0004H 0002H "start_time" 02H 00H 02H

;;	unsigned long start_time = 0;
CLINEA 0000H 0001H 006DH 0002H 001EH
	mov	er0,	#0 
	st	er0,	_start_time$0[fp]
	st	er0,	_start_time$0+02h[fp]

;;	while(1)
CLINEA 0000H 0001H 006FH 0002H 0009H
	bal	_$L13
_$L3 :
CBLOCK 326 3 112

;;		ext_irq_param[irqnum].func();
CLINEA 0000H 0001H 0071H 0003H 001FH
	mov	r0,	r8
	mov	r1,	#00h
	mov	er2,	er0
	add	er2,	er0
	add	er2,	er0
	add	er2,	er2
	l	er0,	NEAR _ext_irq_param[er2]
	bl	er0

;;		if(ext_irq_param[irqnum].mode != LOW)
CLINEA 0000H 0001H 0072H 0003H 0027H
	mov	r0,	r8
	mov	r1,	#00h
	mov	er2,	er0
	add	er2,	er0
	add	er2,	er0
	add	er2,	er2
	l	er0,	NEAR _ext_irq_param+02h[er2]
	bne	_$L2
CBLOCK 326 4 115

;;			break;
CLINEA 0000H 0001H 0074H 0004H 0009H
CBLOCKEND 326 4 117

;;		else if(drv_digitalRead(ext_irq_param[irqnum].pin)!=LOW)
CLINEA 0000H 0000H 0076H 0003H 003AH
	mov	r0,	r8
	mov	r1,	#00h
	mov	er2,	er0
	add	er2,	er0
	add	er2,	er0
	add	er2,	er2
	l	r0,	NEAR _ext_irq_param+04h[er2]
	bl	_drv_digitalRead
	mov	er0,	er0
	bne	_$L2
CBLOCK 326 5 119

;;			break;
CLINEA 0000H 0001H 0078H 0004H 0009H
CBLOCKEND 326 5 121

;;		if(start_time == 0)
CLINEA 0000H 0001H 007AH 0003H 0015H
	l	er0,	_start_time$0[fp]
	l	er2,	_start_time$0+02h[fp]
	cmp	r0,	#00h
	cmpc	r1,	#00h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bne	_$L10
CBLOCK 326 6 123

;;			start_time = millis();
CLINEA 0000H 0000H 007CH 0004H 0019H
	bl	_millis
	st	er0,	_start_time$0[fp]
	st	er2,	_start_time$0+02h[fp]

;;		else
CLINEA 0000H 0001H 007EH 0003H 0006H
	bal	_$L13
_$L10 :
CBLOCK 326 7 127
CLOCAL 4AH 0004H 0000H 0007H "now" 02H 00H 02H

;;			unsigned long now = millis();
CLINEA 0000H 0001H 0080H 0004H 0020H
	bl	_millis

;;			if((now - start_time)>1000)
CLINEA 0000H 0001H 0081H 0004H 001EH
	l	er4,	_start_time$0[fp]
	l	er6,	_start_time$0+02h[fp]
	sub	r0,	r4
	subc	r1,	r5
	subc	r2,	r6
	subc	r3,	r7
	cmp	r0,	#0e8h
	cmpc	r1,	#03h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	ble	_$L3
CBLOCK 326 8 130

;;				__asm("brk\n");
CLINEA 0000H 0001H 0083H 0005H 0013H
brk

CBLOCKEND 326 8 132

;;			}
CLINEA 0000H 0000H 0084H 0004H 0004H
_$L13 :
CBLOCKEND 326 7 133
CBLOCKEND 326 3 135
CBLOCKEND 326 6 136

;;	while(1)
CLINEA 0000H 0000H 006FH 0000H 0000H
	bal	_$L3

;;	}
CLINEA 0000H 0000H 0087H 0002H 0002H
_$L2 :
CBLOCKEND 326 2 136

;;}
CLINEA 0000H 0001H 0088H 0001H 0001H
	pop	er8
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 326 1 136
CFUNCTIONEND 326


	rseg $$isr_ext_irq0$driver_extirq
CFUNCTION 317

_isr_ext_irq0	:
CBLOCK 317 1 138

;;void isr_ext_irq0(void) {isr_ext_irq(0);}
CLINEA 0000H 0001H 008AH 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 317 2 138

;;void isr_ext_irq0(void) {isr_ext_irq(0);}
CLINEA 0000H 0000H 008AH 0001H 0029H
	mov	r0,	#00h
	b	_isr_ext_irq
CBLOCKEND 317 1 138
CFUNCTIONEND 317


	rseg $$isr_ext_irq1$driver_extirq
CFUNCTION 318

_isr_ext_irq1	:
CBLOCK 318 1 139

;;void isr_ext_irq1(void) {isr_ext_irq(1);}
CLINEA 0000H 0001H 008BH 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 318 2 139

;;void isr_ext_irq1(void) {isr_ext_irq(1);}
CLINEA 0000H 0000H 008BH 0001H 0029H
	mov	r0,	#01h
	b	_isr_ext_irq
CBLOCKEND 318 1 139
CFUNCTIONEND 318


	rseg $$isr_ext_irq2$driver_extirq
CFUNCTION 319

_isr_ext_irq2	:
CBLOCK 319 1 140

;;void isr_ext_irq2(void) {isr_ext_irq(2);}
CLINEA 0000H 0001H 008CH 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 319 2 140

;;void isr_ext_irq2(void) {isr_ext_irq(2);}
CLINEA 0000H 0000H 008CH 0001H 0029H
	mov	r0,	#02h
	b	_isr_ext_irq
CBLOCKEND 319 1 140
CFUNCTIONEND 319


	rseg $$isr_ext_irq3$driver_extirq
CFUNCTION 320

_isr_ext_irq3	:
CBLOCK 320 1 141

;;void isr_ext_irq3(void) {isr_ext_irq(3);}
CLINEA 0000H 0001H 008DH 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 320 2 141

;;void isr_ext_irq3(void) {isr_ext_irq(3);}
CLINEA 0000H 0000H 008DH 0001H 0029H
	mov	r0,	#03h
	b	_isr_ext_irq
CBLOCKEND 320 1 141
CFUNCTIONEND 320


	rseg $$isr_ext_irq4$driver_extirq
CFUNCTION 321

_isr_ext_irq4	:
CBLOCK 321 1 142

;;void isr_ext_irq4(void) {isr_ext_irq(4);}
CLINEA 0000H 0001H 008EH 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 321 2 142

;;void isr_ext_irq4(void) {isr_ext_irq(4);}
CLINEA 0000H 0000H 008EH 0001H 0029H
	mov	r0,	#04h
	b	_isr_ext_irq
CBLOCKEND 321 1 142
CFUNCTIONEND 321


	rseg $$isr_ext_irq5$driver_extirq
CFUNCTION 322

_isr_ext_irq5	:
CBLOCK 322 1 143

;;void isr_ext_irq5(void) {isr_ext_irq(5);}
CLINEA 0000H 0001H 008FH 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 322 2 143

;;void isr_ext_irq5(void) {isr_ext_irq(5);}
CLINEA 0000H 0000H 008FH 0001H 0029H
	mov	r0,	#05h
	b	_isr_ext_irq
CBLOCKEND 322 1 143
CFUNCTIONEND 322


	rseg $$isr_ext_irq6$driver_extirq
CFUNCTION 323

_isr_ext_irq6	:
CBLOCK 323 1 144

;;void isr_ext_irq6(void) {isr_ext_irq(6);}
CLINEA 0000H 0001H 0090H 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 323 2 144

;;void isr_ext_irq6(void) {isr_ext_irq(6);}
CLINEA 0000H 0000H 0090H 0001H 0029H
	mov	r0,	#06h
	b	_isr_ext_irq
CBLOCKEND 323 1 144
CFUNCTIONEND 323


	rseg $$isr_ext_irq7$driver_extirq
CFUNCTION 324

_isr_ext_irq7	:
CBLOCK 324 1 145

;;void isr_ext_irq7(void) {isr_ext_irq(7);}
CLINEA 0000H 0001H 0091H 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 324 2 145

;;void isr_ext_irq7(void) {isr_ext_irq(7);}
CLINEA 0000H 0000H 0091H 0001H 0029H
	mov	r0,	#07h
	b	_isr_ext_irq
CBLOCKEND 324 1 145
CFUNCTIONEND 324


	rseg $$drv_attachInterrupt$driver_extirq
CFUNCTION 336

_drv_attachInterrupt	:
CBLOCK 336 1 148

;;{
CLINEA 0000H 0001H 0094H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_mode$4	set	4
	_sampling$6	set	6
	_filter$8	set	8
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	mov	r8,	r0
	mov	er10,	er2
	mov	r9,	r1
CBLOCK 336 2 148
CRET 0006H
CARGUMENT 46H 0001H 001CH "pin" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "irqnum" 02H 00H 00H
CARGUMENT 47H 0002H 0029H "func" 0AH 03H 00H 02H 4FH 01H 00H 00H 00H 00H 07H
CARGUMENT 43H 0002H 0004H "mode" 02H 00H 01H
CARGUMENT 42H 0001H 0006H "sampling" 02H 00H 00H
CARGUMENT 42H 0001H 0008H "filter" 02H 00H 00H
CLOCAL 4AH 0002H 0000H 0002H "exisel" 04H 03H 00H 00H 00H

;;	if(pin > ML620504F_MAX_PIN_NO) return;
CLINEA 0000H 0001H 0097H 0002H 0027H
	cmp	r0,	#023h
	ble	_$M11
	b	_$L23
_$M11 :

;;	if(func == NULL) return;
CLINEA 0000H 0001H 0098H 0002H 0019H
	mov	er2,	er2
	bne	_$M12
	b	_$L23
_$M12 :

;;	if(irqnum > ML620504F_MAX_EXTIRQ_NO) return;
CLINEA 0000H 0001H 0099H 0002H 002DH
	cmp	r9,	#07h
	ble	_$M13
	b	_$L23
_$M13 :

;;	IE1 &= ~num_to_bit[irqnum];			// disenable IRQ
CLINEA 0000H 0001H 009DH 0002H 002FH
	mov	r0,	r9
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f011h
	and	r1,	r0
	st	r1,	0f011h

;;	IRQ1 &= ~num_to_bit[irqnum];		// clear IRQ
CLINEA 0000H 0001H 009EH 0002H 002BH
	mov	r0,	r9
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f019h
	and	r1,	r0
	st	r1,	0f019h

;;	ext_irq_param[irqnum].pin = pin;
CLINEA 0000H 0001H 00A0H 0002H 0021H
	mov	r0,	r9
	mov	r1,	#00h
	mov	er2,	er0
	add	er2,	er0
	add	er2,	er0
	add	er2,	er2
	st	r8,	NEAR _ext_irq_param+04h[er2]

;;	ext_irq_param[irqnum].func = func;
CLINEA 0000H 0001H 00A1H 0002H 0023H
	mov	er2,	er0
	add	er2,	er0
	add	er2,	er0
	add	er2,	er2
	st	er10,	NEAR _ext_irq_param[er2]

;;	ext_irq_param[irqnum].mode = mode;
CLINEA 0000H 0001H 00A2H 0002H 0023H
	mov	er2,	er0
	add	er2,	er0
	add	er2,	er0
	add	er2,	er2
	mov	er0,	er2
	l	er2,	_mode$4[fp]
	st	er2,	NEAR _ext_irq_param+02h[er0]

;;	switch(irqnum)
CLINEA 0000H 0001H 00A6H 0002H 000FH
	mov	r0,	r9
	mov	r1,	#00h
CBLOCK 336 3 167
	cmp	r9,	#07h
	cmpc	r1,	#00h
	bgt	_$L33
	sllc	r1,	#01h
	sll	r0,	#01h
	l	er0,	NEAR _$M10[er0]
	b	er0

;;	}
_$L33 :

;;	*(exisel+irqnum) = ml620504f_exisel[pin];						// set port number for ext irq.
CLINEA 0000H 0001H 00C4H 0002H 004FH
	mov	r0,	r8
	mov	r1,	#00h
	mov	r2,	r9
	mov	r3,	#00h
	l	r0,	NEAR _ml620504f_exisel[er0]
	st	r0,	0f048h[er2]

;;	(sampling) ? (EXICON2 |= num_to_bit[irqnum]) : (EXICON2 &= ~num_to_bit[irqnum]);	// seting of sampling
CLINEA 0000H 0001H 00C6H 0002H 0067H
	l	r0,	_sampling$6[fp]
	beq	_$L43
	mov	r0,	r9
	l	r2,	0f042h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f042h
	bal	_$L45
_$L43 :
	mov	r0,	r9
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f042h
	and	r1,	r0
	st	r1,	0f042h
_$L45 :

;;	(filter) ? (EXICON3 |= num_to_bit[irqnum]) : (EXICON3 &= ~num_to_bit[irqnum]);		// setting of filter
CLINEA 0000H 0001H 00C7H 0002H 0065H
	l	r0,	_filter$8[fp]
	beq	_$L46
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f043h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f043h
	bal	_$L48
_$L46 :
	mov	r0,	r9
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f043h
	and	r1,	r0
	st	r1,	0f043h
_$L48 :
CBLOCK 336 4 202

;;	switch(mode)
CLINEA 0000H 0001H 00C9H 0002H 000DH
	l	r0,	_mode$4+01h[fp]
	bne	_$L53
	l	r0,	_mode$4[fp]
	bne	_$M18
	b	_$L54
_$M18 :

;;	switch(mode)
CLINEA 0000H 0000H 00C9H 0002H 000DH
	cmp	r0,	#01h
	bne	_$M14
	b	_$L59
_$M14 :

;;	switch(mode)
CLINEA 0000H 0000H 00C9H 0002H 000DH
	cmp	r0,	#02h
	bne	_$M15
	b	_$L58
_$M15 :

;;	switch(mode)
CLINEA 0000H 0000H 00C9H 0002H 000DH
	cmp	r0,	#03h
	bne	_$M16
	b	_$L57
_$M16 :

;;	default:
CLINEA 0000H 0001H 00DFH 0002H 0009H
_$L53 :
CBLOCKEND 336 4 225

;;	}
CLINEA 0000H 0000H 00E1H 0002H 0002H
_$L52 :

;;	IE1 |= num_to_bit[irqnum];			// disenable IRQ
CLINEA 0000H 0001H 00E3H 0002H 002EH
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f011h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f011h
CBLOCKEND 336 2 229

;;}
CLINEA 0000H 0001H 00E5H 0001H 0001H
_$L23 :
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc

;;	case 0:
CLINEA 0000H 0001H 00A8H 0002H 0008H
_$S35 :

;;		irq_sethandler(IRQ_NO_EXI0INT,isr_ext_irq0);	// set callback function
CLINEA 0000H 0001H 00A9H 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq0
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq0
	mov	r0,	#01h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00AAH 0003H 0008H
	b	_$L33

;;	case 1:
CLINEA 0000H 0001H 00ABH 0002H 0008H
_$S36 :

;;		irq_sethandler(IRQ_NO_EXI1INT,isr_ext_irq1);	// set callback function
CLINEA 0000H 0001H 00ACH 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq1
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq1
	mov	r0,	#02h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00ADH 0003H 0008H
	b	_$L33

;;	case 2:
CLINEA 0000H 0001H 00AEH 0002H 0008H
_$S37 :

;;		irq_sethandler(IRQ_NO_EXI2INT,isr_ext_irq2);	// set callback function
CLINEA 0000H 0001H 00AFH 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq2
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq2
	mov	r0,	#03h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00B0H 0003H 0008H
	b	_$L33

;;	case 3:
CLINEA 0000H 0001H 00B1H 0002H 0008H
_$S38 :

;;		irq_sethandler(IRQ_NO_EXI3INT,isr_ext_irq3);	// set callback function
CLINEA 0000H 0001H 00B2H 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq3
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq3
	mov	r0,	#04h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00B3H 0003H 0008H
	b	_$L33

;;	case 4:
CLINEA 0000H 0001H 00B4H 0002H 0008H
_$S39 :

;;		irq_sethandler(IRQ_NO_EXI4INT,isr_ext_irq4);	// set callback function
CLINEA 0000H 0001H 00B5H 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq4
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq4
	mov	r0,	#05h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00B6H 0003H 0008H
	b	_$L33

;;	case 5:
CLINEA 0000H 0001H 00B7H 0002H 0008H
_$S40 :

;;		irq_sethandler(IRQ_NO_EXI5INT,isr_ext_irq5);	// set callback function
CLINEA 0000H 0001H 00B8H 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq5
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq5
	mov	r0,	#06h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00B9H 0003H 0008H
	b	_$L33

;;	case 6:
CLINEA 0000H 0001H 00BAH 0002H 0008H
_$S41 :

;;		irq_sethandler(IRQ_NO_EXI6INT,isr_ext_irq6);	// set callback function
CLINEA 0000H 0001H 00BBH 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq6
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq6
	mov	r0,	#07h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00BCH 0003H 0008H
	b	_$L33

;;	case 7:
CLINEA 0000H 0001H 00BDH 0002H 0008H
_$S42 :

;;		irq_sethandler(IRQ_NO_EXI7INT,isr_ext_irq7);	// set callback function
CLINEA 0000H 0001H 00BEH 0003H 0047H
	mov	r2,	#BYTE1 OFFSET _isr_ext_irq7
	mov	r3,	#BYTE2 OFFSET _isr_ext_irq7
	mov	r0,	#08h
	bl	_irq_sethandler

;;		break;
CLINEA 0000H 0001H 00BFH 0003H 0008H
	b	_$L33

;;	default:
CLINEA 0000H 0001H 00C0H 0002H 0009H
_$L34 :

;;		break;
CLINEA 0000H 0001H 00C1H 0003H 0008H
	b	_$L33
CBLOCKEND 336 3 194

;;	case LOW:		// FALLING EDGE
CLINEA 0000H 0001H 00CBH 0002H 001BH
_$L54 :

;;		EXICON0 |= num_to_bit[irqnum];
CLINEA 0000H 0001H 00CCH 0003H 0020H
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f040h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f040h

;;		EXICON1 &= ~num_to_bit[irqnum];
CLINEA 0000H 0001H 00CDH 0003H 0021H
	mov	r0,	r9
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f041h
	and	r1,	r0
	st	r1,	0f041h

;;		if(drv_digitalRead(pin) == LOW)
CLINEA 0000H 0001H 00CEH 0003H 0021H
	mov	r0,	r8
	bl	_drv_digitalRead
	mov	er0,	er0
	beq	_$M17
	b	_$L52
_$M17 :
CBLOCK 336 5 207

;;			IRQ1 |= num_to_bit[irqnum];							// if pin is already LOW, set trigger of interrupt;
CLINEA 0000H 0001H 00D0H 0004H 0058H
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f019h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f019h
CBLOCKEND 336 5 209

;;		break;
CLINEA 0000H 0001H 00D2H 0003H 0008H
	b	_$L52

;;	case RISING:	// RISING EDGE
CLINEA 0000H 0001H 00D3H 0002H 001CH
_$L57 :

;;		EXICON0 &= ~num_to_bit[irqnum];
CLINEA 0000H 0001H 00D4H 0003H 0021H
	mov	r0,	r9
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f040h
	and	r1,	r0
	st	r1,	0f040h

;;		EXICON1 |= num_to_bit[irqnum];
CLINEA 0000H 0001H 00D5H 0003H 0020H
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f041h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f041h

;;		break;
CLINEA 0000H 0001H 00D6H 0003H 0008H
	b	_$L52

;;	case FALLING:	// FALLING EDGE
CLINEA 0000H 0001H 00D7H 0002H 001EH
_$L58 :

;;		EXICON0 |= num_to_bit[irqnum];
CLINEA 0000H 0001H 00D8H 0003H 0020H
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f040h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f040h

;;		EXICON1 &= ~num_to_bit[irqnum];
CLINEA 0000H 0001H 00D9H 0003H 0021H
	mov	r0,	r9
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f041h
	and	r1,	r0
	st	r1,	0f041h

;;		break;
CLINEA 0000H 0001H 00DAH 0003H 0008H
	b	_$L52

;;	case CHANGE:	// BOTH EDGE
CLINEA 0000H 0001H 00DBH 0002H 001AH
_$L59 :

;;		EXICON0 |= num_to_bit[irqnum];
CLINEA 0000H 0001H 00DCH 0003H 0020H
	mov	r0,	r9
	mov	r1,	#00h
	l	r2,	0f040h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f040h

;;		EXICON1 |= num_to_bit[irqnum];
CLINEA 0000H 0001H 00DDH 0003H 0020H
	mov	r0,	r9
	l	r2,	0f041h
	l	r0,	NEAR _num_to_bit[er0]
	or	r2,	r0
	st	r2,	0f041h

;;		break;
CLINEA 0000H 0001H 00DEH 0003H 0008H
	b	_$L52
CBLOCKEND 336 1 229
CFUNCTIONEND 336


	rseg $$drv_detachInterrupt$driver_extirq
CFUNCTION 337

_drv_detachInterrupt	:
CBLOCK 337 1 233

;;{
CLINEA 0000H 0001H 00E9H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	r8,	r0
CBLOCK 337 2 233
CRET 0002H
CARGUMENT 46H 0001H 001CH "irqnum" 02H 00H 00H

;;	IE1 &= ~num_to_bit[irqnum];			// disenable IRQ
CLINEA 0000H 0001H 00EAH 0002H 002FH
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f011h
	and	r1,	r0
	st	r1,	0f011h

;;	IRQ1 &= ~num_to_bit[irqnum];			// disenable IRQ
CLINEA 0000H 0001H 00EBH 0002H 0030H
	mov	r0,	r8
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f019h
	and	r1,	r0
	st	r1,	0f019h

;;	EXICON0 &= ~num_to_bit[irqnum];		// clear extirq condition
CLINEA 0000H 0001H 00ECH 0002H 003BH
	mov	r0,	r8
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f040h
	and	r1,	r0
	st	r1,	0f040h

;;	EXICON1 &= ~num_to_bit[irqnum];		// clear extirq condition
CLINEA 0000H 0001H 00EDH 0002H 003BH
	mov	r0,	r8
	mov	r1,	#00h
	l	r0,	NEAR _num_to_bit[er0]
	xor	r0,	#0ffh
	l	r1,	0f041h
	and	r1,	r0
	st	r1,	0f041h

;;	irq_sethandler((unsigned char)(IRQ_NO_EXI0INT+irqnum),_intNullHdr);	// set callback function
CLINEA 0000H 0001H 00EEH 0002H 005DH
	mov	r2,	#BYTE1 OFFSET __intNullHdr
	mov	r3,	#BYTE2 OFFSET __intNullHdr
	mov	r0,	r8
	add	r0,	#01h
	bl	_irq_sethandler
CBLOCKEND 337 2 239

;;}
CLINEA 0000H 0001H 00EFH 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 337 1 239
CFUNCTIONEND 337

	public _drv_detachInterrupt
	public _drv_attachInterrupt
	public _ml620504f_exisel
	public _isr_ext_irq0
	public _isr_ext_irq1
	public _isr_ext_irq2
	public _isr_ext_irq3
	public _isr_ext_irq4
	public _isr_ext_irq5
	public _isr_ext_irq6
	public _isr_ext_irq7
	public _isr_ext_irq
	_ext_irq_param comm data 030h #00h
	extrn code near : _millis
	extrn table near : _num_to_bit
	extrn code near : _irq_sethandler
	extrn code near : _drv_digitalRead
	extrn code near : __intNullHdr
	extrn code near : _main

	rseg $$NTABdrv_attachInterrupt$driver_extirq
_$M10 :
	dw	_$S35
	dw	_$S36
	dw	_$S37
	dw	_$S38
	dw	_$S39
	dw	_$S40
	dw	_$S41
	dw	_$S42

	rseg $$TABml620504f_exisel$driver_extirq
_ml620504f_exisel :
	db	00h
	db	01h
	db	02h
	db	03h
	db	04h
	db	05h
	db	010h
	db	011h
	db	020h
	db	021h
	db	022h
	db	023h
	db	030h
	db	031h
	db	032h
	db	033h
	db	034h
	db	035h
	db	036h
	db	037h
	db	040h
	db	041h
	db	042h
	db	043h
	db	044h
	db	045h
	db	046h
	db	047h
	db	050h
	db	051h
	db	052h
	db	053h
	db	054h
	db	055h
	db	056h
	db	057h

	end
