;; Compile Options : /TML620504F /MS /near /IC:\LAZURI~1\LIBRAR~1\BM1383 /IC:\LAZURI~1\LIBRAR~1\BM1422 /IC:\LAZURI~1\LIBRAR~1\HARDWA~1 /IC:\LAZURI~1\LIBRAR~1\HARDWA~2 /IC:\LAZURI~1\LIBRAR~1\KXG03_~1 /IC:\LAZURI~1\LIBRAR~1\VL53L0X /IC:\LAZURI~1\LIBRAR~1\Wire /IC:\LAZURI~1\hardware\LAZURI~2 /IC:\LAZURI~1\hardware\LAZURI~2\lazurite /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\clock /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\common /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\irq /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\lp /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\MCU_SM~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\wdt /IC:\LAZURI~1\hardware\LAZURI~2\sub_ghz\ /D_ML620Q504 /DLAZURITE_MINI /DLAZURITE_IDE /DSUBGHZ /DPWR_LED /DLDO_CNT /SS 512 /SL 65 /SD /Oa /Ot /W 3 /Faobj\ /Lv 
;; Version Number  : Ver.3.53.1
;; File Name       : mach.c

	type (ML620504F) 
	model small, near
	$$NVARmach segment data 2h #0h
	$$TABaddr_len$mach segment table 2h #0h
	$$TABbroadcast_addr$mach segment table 2h #0h
	$$TABenb_dst_panid$mach segment table 2h #0h
	$$TABenb_src_panid$mach segment table 2h #0h
	$$get_mac_addr$mach segment code 2h #0h
	$$mach_ed$mach segment code 2h #0h
	$$mach_get_enhance_ack$mach segment code 2h #0h
	$$mach_init$mach segment code 2h #0h
	$$mach_make_ack_header$mach segment code 2h #0h
	$$mach_make_header$mach segment code 2h #0h
	$$mach_match_seq_num$mach segment code 2h #0h
	$$mach_parse_data$mach segment code 2h #0h
	$$mach_set_ack_tx_interval$mach segment code 2h #0h
	$$mach_set_coord_addr$mach segment code 2h #0h
	$$mach_set_dst_ieee_addr$mach segment code 2h #0h
	$$mach_set_dst_short_addr$mach segment code 2h #0h
	$$mach_set_enhance_ack$mach segment code 2h #0h
	$$mach_set_my_short_addr$mach segment code 2h #0h
	$$mach_set_promiscuous$mach segment code 2h #0h
	$$mach_set_src_addr$mach segment code 2h #0h
	$$mach_setup$mach segment code 2h #0h
	$$mach_sleep$mach segment code 2h #0h
	$$mach_start$mach segment code 2h #0h
	$$mach_stop$mach segment code 2h #0h
	$$mach_tx$mach segment code 2h #0h
	$$mach_update_rx_data$mach segment code 2h #0h
	$$macl_rx_irq$mach segment code 2h #0h
CVERSION 3.53.1
CGLOBAL 01H 03H 0000H "mach_parse_data" 08H 02H 98H 00H 81H 0aH 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_ed" 08H 02H 99H 00H 80H 00H 00H 00H 01H
CGLOBAL 01H 02H 0000H "mach_set_enhance_ack" 08H 02H 9DH 00H 80H 04H 00H 00H 00H
CGLOBAL 01H 03H 0000H "mach_set_ack_tx_interval" 08H 02H 9EH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "mach_tx" 08H 02H 95H 00H 83H 0aH 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_sleep" 08H 02H 8FH 00H 80H 00H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_set_src_addr" 08H 02H 94H 00H 81H 08H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_set_promiscuous" 08H 02H 9BH 00H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_init" 0CH 02H 8EH 00H 81H 04H 00H 03H 00H 00H 05H 10H 00H
CGLOBAL 01H 03H 0000H "mach_set_my_short_addr" 08H 02H 91H 00H 83H 18H 00H 00H 01H
CGLOBAL 01H 03H 0000H "macl_rx_irq" 08H 02H 89H 00H 81H 0aH 00H 00H 01H
CGLOBAL 01H 02H 0000H "mach_match_seq_num" 08H 02H 70H 01H 81H 06H 00H 00H 00H
CGLOBAL 01H 03H 0000H "mach_setup" 08H 02H 90H 00H 81H 08H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_set_dst_short_addr" 08H 02H 93H 00H 80H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "get_mac_addr" 08H 02H 6DH 01H 83H 14H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_stop" 08H 02H 97H 00H 80H 00H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_update_rx_data" 08H 02H 72H 01H 80H 00H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_get_enhance_ack" 08H 02H 9CH 00H 80H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "mach_set_dst_ieee_addr" 08H 02H 92H 00H 81H 06H 00H 00H 01H
CGLOBAL 01H 03H 0000H "mach_set_coord_addr" 08H 02H 7BH 01H 83H 0cH 00H 00H 01H
CSGLOBAL 03H 0000H "mach_make_header" 08H 02H 6EH 01H 81H 16H 00H 00H 01H
CGLOBAL 01H 02H 0000H "mach_make_ack_header" 08H 02H 71H 01H 83H 12H 00H 00H 00H
CGLOBAL 01H 03H 0000H "mach_start" 08H 02H 96H 00H 81H 04H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 001EH 001BH 00000036H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 29H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "remove" 0AH 03H 00H 02H 2AH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "begin" 0AH 03H 00H 02H 2BH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "close" 0AH 03H 00H 02H 2CH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "send" 0AH 03H 00H 02H 2EH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "send64le" 0AH 03H 00H 02H 30H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "send64be" 0AH 03H 00H 02H 32H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "rxEnable" 0AH 03H 00H 02H 34H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000010H "setPromiscuous" 0AH 03H 00H 02H 35H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000012H "setAckReq" 0AH 03H 00H 02H 36H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000014H "setBroadcastEnb" 0AH 03H 00H 02H 37H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000016H "rxDisable" 0AH 03H 00H 02H 38H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000018H "readData" 0AH 03H 00H 02H 39H 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001AH "getMyAddress" 0AH 03H 00H 02H 3AH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 0000001CH "getMyAddr64" 0AH 03H 00H 02H 3BH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000001EH "setMyAddress" 0AH 03H 00H 02H 3CH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000020H "getStatus" 0AH 03H 00H 02H 3DH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000022H "msgOut" 0AH 03H 00H 02H 3EH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000024H "setSendMode" 0AH 03H 00H 02H 3FH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000026H "getSendMode" 0AH 03H 00H 02H 40H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000028H "decMac" 0AH 03H 00H 02H 41H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000002AH "setKey" 0AH 03H 00H 02H 42H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000002CH "setEnhanceAck" 0AH 03H 00H 02H 43H 01H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000002EH "getEnhanceAck" 0AH 03H 00H 02H 44H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000030H "setAckTxInterval" 0AH 03H 00H 02H 45H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000032H "getEdValue" 0AH 03H 00H 02H 46H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000034H "antSwitch" 0AH 03H 00H 02H 47H 01H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 000BH 000BH 00000002H "mac_fc_alignment"
CSTRUCTMEM 52H 00000003H 00000000H "frame_type" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "sec_enb" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "pending" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "ack_req" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "panid_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "nop" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000008H "seq_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000009H "ielist" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000AH "dst_addr_type" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000CH "frame_ver" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000EH "src_addr_type" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001DH 000BH 00000020H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "mac_header" 04H 00H 06H 0CH 00H
CSTRUCTMEM 42H 00000001H 00000002H "seq_num" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "dst_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "dst_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "src_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000010H "src_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000018H "raw" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001AH "raw_len" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001CH "payload" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001EH "payload_len" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001CH 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addrType" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "senseTime" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "txInterval" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "myAddress" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "ccaWait" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001BH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000002H "status" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0016H 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0015H 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0014H 0005H 0000000AH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "write" 0AH 03H 00H 02H 0D8H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "read" 0AH 03H 00H 02H 0D9H 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "erase" 0AH 03H 00H 02H 0DAH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000006H "write_byte" 0AH 03H 00H 02H 0DBH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000008H "read_byte" 0AH 03H 00H 02H 0DCH 00H 00H 00H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0013H 0008H 00000010H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 0C5H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "p" 0AH 03H 00H 02H 0C6H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "l" 0AH 03H 00H 02H 0C7H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "f" 0AH 03H 00H 02H 0C8H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "d" 0AH 03H 00H 02H 0C9H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "ln" 0AH 03H 00H 02H 0CAH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "status" 0AH 03H 00H 02H 0CBH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "len" 0AH 03H 00H 02H 0CCH 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0012H 000FH 0000001EH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 0B6H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "end" 0AH 03H 00H 02H 0B7H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 0B8H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 0B9H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "peek" 0AH 03H 00H 02H 0BAH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "flush" 0AH 03H 00H 02H 0BBH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000CH "print" 0AH 03H 00H 02H 0BCH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "println" 0AH 03H 00H 02H 0BDH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000010H "print_long" 0AH 03H 00H 02H 0BEH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000012H "println_long" 0AH 03H 00H 02H 0BFH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000014H "print_double" 0AH 03H 00H 02H 0C0H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000016H "println_double" 0AH 03H 00H 02H 0C1H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000018H "write" 0AH 03H 00H 02H 0C2H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000001AH "write_byte" 0AH 03H 00H 02H 0C3H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000001CH "tx_available" 0AH 03H 00H 02H 0C4H 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0002H 0003H 00000006H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "data" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "len" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "size" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0003H 0004H 00000010H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "id" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf_size" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 00000004H "in" 04H 00H 05H 02H 00H
CSTRUCTMEM 43H 00000006H 0000000AH "out" 04H 00H 05H 02H 00H
CSTRUCTTAG 0000H 0000H 0006H 0015H 00000028H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "condition" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "ccaRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "ccaBe" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "ccaCount" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "txPower" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "txMode" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000009H "sequnceNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000AH "resendingNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000BH "rxOnEnable" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "promiscuousMode" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "ack_timeout" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000010H "status" 02H 00H 01H
CSTRUCTMEM 42H 00000004H 00000012H "total_send_bytes" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000016H "start_send_time" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000001AH "last_send_time" 02H 00H 02H
CSTRUCTMEM 43H 00000002H 0000001EH "phy" 06H 03H 00H 00H 05H 03H 00H
CSTRUCTMEM 43H 00000006H 00000020H "ack" 04H 00H 05H 02H 00H
CSTRUCTMEM 42H 00000002H 00000026H "tx_ack_interval" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 000FH 0005H 0000000EH "mac_addr"
CSTRUCTMEM 42H 00000001H 00000000H "pan_coord" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "lddn_addr" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0009H 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "enb" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "data" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0008H 0003H 0000000EH "fc_addr"
CSTRUCTMEM 43H 00000004H 00000000H "panid" 04H 00H 05H 09H 00H
CSTRUCTMEM 42H 00000001H 00000004H "addr_type" 02H 00H 00H
CSTRUCTMEM 43H 00000008H 00000006H "addr" 04H 00H 06H 0AH 00H
CSTRUCTTAG 0000H 0000H 000DH 000AH 00000036H "mac_header"
CSTRUCTMEM 43H 00000002H 00000000H "fc" 04H 00H 06H 0CH 00H
CSTRUCTMEM 43H 0000000EH 00000002H "dst" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 0000000EH 00000010H "src" 04H 00H 05H 08H 00H
CSTRUCTMEM 42H 00000001H 0000001EH "seq" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000001FH "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000020H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000006H 00000022H "payload" 04H 00H 05H 02H 00H
CSTRUCTMEM 43H 00000006H 00000028H "raw" 04H 00H 05H 02H 00H
CSTRUCTMEM 43H 00000006H 0000002EH "input" 04H 00H 05H 02H 00H
CSTRUCTMEM 43H 00000002H 00000034H "payload_offset" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 000EH 000CH 00000016H "rf_param"
CSTRUCTMEM 42H 00000001H 00000000H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "cca_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "cca_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "cca_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "tx_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "tx_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "tx_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "ant_sw" 02H 00H 00H
CSTRUCTMEM 42H 00000004H 0000000AH "ack_timeout" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 0000000EH "cca_level" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000012H "tx_power" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0010H 000AH 000000FAH "mach_param"
CSTRUCTMEM 43H 00000002H 00000000H "macl" 06H 03H 00H 00H 05H 06H 00H
CSTRUCTMEM 43H 0000000EH 00000002H "my_addr" 04H 00H 05H 0FH 00H
CSTRUCTMEM 43H 0000000EH 00000010H "coord_addr" 04H 00H 05H 0FH 00H
CSTRUCTMEM 43H 00000036H 0000001EH "tx" 04H 00H 05H 0DH 00H
CSTRUCTMEM 43H 00000036H 00000054H "rx" 04H 00H 05H 0DH 00H
CSTRUCTMEM 43H 00000036H 0000008AH "rx_prev" 04H 00H 05H 0DH 00H
CSTRUCTMEM 43H 00000036H 000000C0H "ack" 04H 00H 05H 0DH 00H
CSTRUCTMEM 42H 00000001H 000000F6H "coordinator" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000F7H "sending" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 000000F8H "rf" 06H 03H 00H 00H 05H 0EH 00H
CSTRUCTTAG 0000H 0000H 0007H 0004H 0000000EH "ieee802154_my_addr"
CSTRUCTMEM 42H 00000002H 00000000H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000004H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "pan_coord" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0001H 0005H 00000008H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "max_length" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "wr_p" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "rd_p" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "length" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 0017H 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CUNIONTAG 0000H 0000H 000CH 0003H 00000002H "mac_frame_control"
CUNIONMEM 42H 00000002H "fc8" 05H 01H 02H 00H 00H 00H
CUNIONMEM 42H 00000002H "fc16" 02H 00H 08H
CUNIONMEM 43H 00000002H "fc_bit" 04H 00H 05H 0BH 00H
CUNIONTAG 0000H 0000H 000AH 0003H 00000008H "_Notag"
CUNIONMEM 42H 00000002H "short_addr" 02H 00H 08H
CUNIONMEM 42H 00000002H "lddn_addr" 02H 00H 08H
CUNIONMEM 42H 00000008H "ieee_addr" 05H 01H 08H 00H 00H 00H
CENUMTAG 0000H 0000H 001AH 0002H "_Notag"
CENUMMEM 00000014H "SUBGHZ_PWR_20MW"
CENUMMEM 00000001H "SUBGHZ_PWR_1MW"
CENUMTAG 0000H 0000H 0019H 0002H "_Notag"
CENUMMEM 00000064H "SUBGHZ_100KBPS"
CENUMMEM 00000032H "SUBGHZ_50KBPS"
CENUMTAG 0000H 0000H 0018H 0012H "_Notag"
CENUMMEM 00000000H "SUBGHZ_OK"
CENUMMEM 00000001H "SUBGHZ_RESET_FAIL"
CENUMMEM 00000002H "SUBGHZ_SETUP_FAIL"
CENUMMEM 00000003H "SUBGHZ_SLEEP_FAIL"
CENUMMEM 00000004H "SUBGHZ_WAKEUP_FAIL"
CENUMMEM 00000005H "SUBGHZ_MYADDR_FAIL"
CENUMMEM 00000006H "SUBGHZ_SETFIL_FAIL"
CENUMMEM 00000007H "SUBGHZ_TX_COMP_FAIL"
CENUMMEM 00000008H "SUBGHZ_TX_FAIL"
CENUMMEM 00000009H "SUBGHZ_TX_CCA_FAIL"
CENUMMEM 0000000AH "SUBGHZ_TX_ACK_FAIL"
CENUMMEM 0000000BH "SUBGHZ_RX_ENB_FAIL"
CENUMMEM 0000000CH "SUBGHZ_RX_DIS_FAIL"
CENUMMEM 0000000DH "SUBGHZ_RX_COMP_FAIL"
CENUMMEM 0000000EH "SUBGHZ_PANID"
CENUMMEM 0000000FH "SUBGHZ_ERR_ADDRTYPE"
CENUMMEM 00000010H "SUBGHZ_TTL_SEND_OVR"
CENUMMEM 00000011H "SUBGHZ_DUMMY"
CENUMTAG 0000H 0000H 0011H 0003H "_Notag"
CENUMMEM 00000001H "HALT_I2C1_END"
CENUMMEM 00000002H "HALT_I2C0_END"
CENUMMEM 00000003H "HALT_DELAY"
CENUMTAG 0000H 0000H 0005H 000EH "_Notag"
CENUMMEM 00000000H "SUBGHZ_ST_TX_START"
CENUMMEM 00000001H "SUBGHZ_ST_CCA_FAST"
CENUMMEM 00000002H "SUBGHZ_ST_CCA_IDLE_DETECT"
CENUMMEM 00000003H "SUBGHZ_ST_CCA_ABORT"
CENUMMEM 00000004H "SUBGHZ_ST_CCA_RETRY"
CENUMMEM 00000005H "SUBGHZ_ST_CCA_FAILURE"
CENUMMEM 00000006H "SUBGHZ_ST_CCA_DONE"
CENUMMEM 00000007H "SUBGHZ_ST_TX_DONE"
CENUMMEM 00000008H "SUBGHZ_ST_TX_ACK_TIMEOUT"
CENUMMEM 00000009H "SUBGHZ_ST_TX_ACK_DONE"
CENUMMEM 0000000AH "SUBGHZ_ST_RX_START"
CENUMMEM 0000000BH "SUBGHZ_ST_RX_DONE"
CENUMMEM 0000000CH "SUBGHZ_ST_RX_ACK_DONE"
CENUMMEM 0000000DH "SUBGHZ_ST_NONE"
CENUMTAG 0000H 0000H 0004H 0005H "_Notag"
CENUMMEM 00000000H "CCA_IDLE"
CENUMMEM 00000001H "CCA_FAST"
CENUMMEM 00000002H "IDLE_DETECT"
CENUMMEM 00000003H "CCA_RETRY"
CENUMMEM 00000004H "CCA_FAILURE"
CTYPEDEF 0000H 0000H 43H "SUBGHZ_POWER" 04H 00H 0AH 1AH 00H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 17H 00H
CTYPEDEF 0000H 0000H 43H "SubGHz_CTRL" 04H 00H 05H 1EH 00H
CTYPEDEF 0000H 0000H 43H "INT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "PHY_PARAM" 04H 00H 05H 03H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_PARAM" 04H 00H 05H 1CH 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MSG" 04H 00H 0AH 18H 00H
CTYPEDEF 0000H 0000H 42H "bool" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "t_print" 04H 00H 05H 13H 00H
CTYPEDEF 0000H 0000H 42H "byte" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "INT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "INT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_STATE" 04H 00H 0AH 05H 00H
CTYPEDEF 0000H 0000H 43H "MACL_PARAM" 04H 00H 05H 06H 00H
CTYPEDEF 0000H 0000H 42H "BOOLEAN" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_PARAM" 04H 00H 05H 1DH 00H
CTYPEDEF 0000H 0000H 42H "UCHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_STATUS" 04H 00H 05H 1BH 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "uint8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_RATE" 04H 00H 0AH 19H 00H
CTYPEDEF 0000H 0000H 43H "BUFFER" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 43H "int8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "int16_t" 02H 00H 08H
CTYPEDEF 0000H 0000H 43H "int32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "UINT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "DATAFLASH" 04H 00H 05H 14H 00H
CTYPEDEF 0000H 0000H 43H "FIFO_CTRL" 04H 00H 05H 01H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 0E1H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 0E0H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "CHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HardwareSerial" 04H 00H 05H 12H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 0E3H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 0E2H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "boolean" 02H 00H 00H
CTYPEDEF 0000H 0000H 42H "word" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "BOOL" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HALT_EVENT" 04H 00H 0AH 11H 00H
CTYPEDEF 0000H 0000H 43H "CCA_STATE" 04H 00H 0AH 04H 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 15H 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 16H 00H
CTYPEDEF 0000H 0000H 42H "uint32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CTYPEDEF 0000H 0000H 42H "uint16_t" 02H 00H 08H
CGLOBAL 01H 00H 0001H "enb_dst_panid" 02H 00H 00H
CSGLOBAL 42H 0010H "rx_enhance_ack_buffer" 05H 01H 10H 00H 00H 00H
CSGLOBAL 42H 0020H "tx_ackbuf" 05H 01H 20H 00H 00H 00H
CSGLOBAL 43H 00FAH "mach" 04H 00H 05H 10H 00H
CSGLOBAL 00H 0008H "broadcast_addr" 05H 01H 08H 00H 00H 00H
CGLOBAL 01H 00H 0004H "addr_len" 05H 01H 04H 00H 00H 00H
CSGLOBAL 43H 0006H "rx_enhance_ack" 04H 00H 05H 02H 00H
CSGLOBAL 43H 0006H "tx_enhance_ack" 04H 00H 05H 02H 00H
CGLOBAL 01H 00H 0001H "enb_src_panid" 02H 00H 00H
CFILE 0001H 00000053H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\driver_uart.h"
CFILE 0002H 0000007BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\common.h"
CFILE 0003H 00000F42H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\ml620504F.h"
CFILE 0004H 000000C9H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\string.h"
CFILE 0005H 0000007AH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\yvals.h"
CFILE 0006H 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\MCU_SM~1\\mcu.h"
CFILE 0007H 0000009EH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\mach.h"
CFILE 0008H 00000064H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\macl.h"
CFILE 0009H 00000032H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\common_subghz.h"
CFILE 000AH 00000062H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\phy.h"
CFILE 000BH 0000003DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\endian.h"
CFILE 000CH 00000026H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\arib_lazurite.h"
CFILE 000DH 00000042H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite.h"
CFILE 000EH 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\analogio.h"
CFILE 000FH 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\digitalio.h"
CFILE 0010H 00000041H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\pin_assignment.h"
CFILE 0011H 00000051H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite_system.h"
CFILE 0012H 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\serial.h"
CFILE 0013H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\print.h"
CFILE 0014H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_shift.h"
CFILE 0015H 0000002CH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_pulse.h"
CFILE 0016H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WInterrupts.h"
CFILE 0017H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WMath.h"
CFILE 0018H 00000031H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\flash.h"
CFILE 0019H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\tone.h"
CFILE 001AH 000000DAH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\stdlib.h"
CFILE 001BH 0000004FH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\math.h"
CFILE 001CH 00000082H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\subghz_api.h"
CFILE 001DH 00000064H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\hwif/hal.h"
CFILE 001EH 00000048H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\aes/aes.h"
CFILE 001FH 00000024H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\errno.h"
CFILE 0000H 00000427H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\SUB_GHZ\\mach.c"

	rseg $$get_mac_addr$mach
CFUNCTION 365

_get_mac_addr	:
CBLOCK 365 1 85

;;{
CLINEA 0000H 0001H 0055H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_rdata$4	set	-8
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-08
	push	bp
	push	er8
	push	er4
	mov	er8,	er0
CBLOCK 365 2 85
CRET 0010H
CARGUMENT 46H 0002H 0028H "macaddr" 04H 03H 00H 00H 00H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H
CLOCAL 47H 0002H 0026H 0002H "i" 02H 00H 01H
CLOCAL 42H 0008H 0008H 0002H "rdata" 05H 01H 08H 00H 00H 00H

;;	HAL_I2C_read((uint8_t)0x20,(uint8_t*)rdata,(uint8_t)8);
CLINEA 0000H 0001H 005AH 0002H 0038H
	mov	r0,	#08h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	er0,	#32
	bl	_HAL_I2C_read
	add	sp,	#2 

;;	for (i=0;i<8;i++)
CLINEA 0000H 0001H 005CH 0002H 0012H
	mov	er4,	#0 	;; _li$2
_$L3 :
CBLOCK 365 3 93

;;		macaddr[i] = rdata[7-i];
CLINEA 0000H 0001H 005EH 0003H 001AH
	mov	bp,	#7 
	sub	r12,	r4
	subc	r13,	r5
	add	bp,	fp
	mov	er0,	er8
	add	er0,	er4
	l	r2,	-8[bp]
	st	r2,	[er0]
CBLOCKEND 365 3 95

;;	for (i=0;i<8;i++)
CLINEA 0000H 0000H 005CH 0002H 0012H
	add	er4,	#1 
	cmp	r4,	#08h
	cmpc	r5,	#00h
	blts	_$L3

;;	return status;
CLINEA 0000H 0001H 0065H 0002H 000FH
CBLOCKEND 365 2 102

;;}
CLINEA 0000H 0000H 0066H 0001H 0001H
	mov	er0,	#0 
	pop	er4
	pop	er8
	pop	bp
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 365 1 102
CFUNCTIONEND 365


	rseg $$mach_make_header$mach
CFUNCTION 366

_mach_make_header	:
CBLOCK 366 1 127

;;static int mach_make_header(struct mac_header *header) {
CLINEA 0000H 0001H 007FH 0001H 0038H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr4
	push	bp
	push	er8
	mov	er8,	er0
CBLOCK 366 2 127
CRET 0008H
CARGUMENT 47H 0002H 0028H "header" 06H 03H 00H 00H 05H 0DH 00H
CLOCAL 46H 0001H 0014H 0002H "pad" 02H 00H 00H
CLOCAL 46H 0002H 002AH 0002H "offset" 02H 00H 08H
CLOCAL 47H 0002H 0024H 0002H "status" 02H 00H 01H
CLOCAL 46H 0001H 001AH 0002H "dst_ffff" 02H 00H 00H
CLOCAL 47H 0002H 0026H 0002H "i" 02H 00H 01H

;;	uint16_t offset = 2;
CLINEA 0000H 0001H 0081H 0002H 0015H
	mov	bp,	#2 	;; _loffset$2

;;	bool dst_ffff = true;
CLINEA 0000H 0001H 0083H 0002H 0016H
	mov	r6,	#01h	;; _ldst_ffff$6

;;	if(!header->fc.fc_bit.seq_comp) {
CLINEA 0000H 0000H 0087H 0002H 0022H
	l	r0,	01h[er8]
	tb	r0.0
	bne	_$L10
CBLOCK 366 3 135

;;		if(header->raw.size >= (offset + 1)){
CLINEA 0000H 0001H 0088H 0003H 0027H
	l	er0,	02ch[er8]
	cmp	r0,	#03h
	cmpc	r1,	#00h
	bge	_$M7
	b	_$L14
_$M7 :
CBLOCK 366 4 136

;;			header->seq++;
CLINEA 0000H 0000H 0089H 0004H 0011H
	lea	01eh[er8]
	inc	[ea]
	l	r0,	01eh[er8]

;;			header->raw.data[offset]=header->seq,offset++;
CLINEA 0000H 0001H 008AH 0004H 0031H
	l	bp,	028h[er8]
	st	r0,	2[bp]
	mov	bp,	#3 	;; _loffset$2
CBLOCKEND 366 4 139
CBLOCKEND 366 3 143

;;	}
CLINEA 0000H 0000H 008FH 0002H 0002H
_$L10 :

;;	if(enb_dst_panid&BIT(header->addr_type))
CLINEA 0000H 0001H 0092H 0002H 0029H
	mov	er0,	#1 
	l	r2,	01fh[er8]
_$M3 :
	cmp	r2,	#07h
	ble	_$M2
	sllc	r1,	#07h
	sll	r0,	#07h
	add	r2,	#0f9h
	bne	_$M3
_$M2 :
	sll	r0,	r2
	and	r0,	#052h
	beq	_$L18
CBLOCK 366 6 147

;;		if((!header->dst.panid.enb) || (header->dst.panid.data == 0xFFFE))
CLINEA 0000H 0000H 0094H 0003H 0044H
	l	r0,	02h[er8]
	beq	_$L21
	l	er0,	04h[er8]
	cmp	r0,	#0feh
	cmpc	r1,	#0ffh
	bne	_$L20
_$L21 :
CBLOCK 366 7 149

;;			status = -EINVAL;
CLINEA 0000H 0001H 0096H 0004H 0014H
	mov	er0,	#-22

;;			goto error;
CLINEA 0000H 0001H 0097H 0004H 000EH
	b	_$L17
CBLOCKEND 366 7 152

;;		} else {
CLINEA 0000H 0000H 0098H 0003H 000AH
_$L20 :
CBLOCK 366 8 152

;;			if(header->raw.size >= (offset + 2)){
CLINEA 0000H 0000H 0099H 0000H 0000H
	mov	er0,	bp
	add	er0,	#2 
	mov	er4,	er0

;;			if(header->raw.size >= (offset + 2)){
CLINEA 0000H 0001H 0099H 0004H 0028H
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$M8
	b	_$L28
_$M8 :
CBLOCK 366 9 153

;;				H2LBS(header->raw.data[offset],header->dst.panid.data), offset+=2;
CLINEA 0000H 0001H 009AH 0005H 0046H
	mov	er0,	#2 
	push	er0
	mov	er2,	er8
	add	er2,	#4 
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_memcpy_nn
	add	sp,	#2 
	mov	bp,	er4	;; _loffset$2
CBLOCKEND 366 9 155
CBLOCKEND 366 8 162
CBLOCKEND 366 6 163

;;	}
CLINEA 0000H 0000H 00A3H 0002H 0002H
_$L18 :

;;	if(header->addr_type&BIT(1))
CLINEA 0000H 0001H 00A7H 0002H 001DH
	l	r0,	01fh[er8]
	tb	r0.1
	beq	_$L31
CBLOCK 366 11 168
CLOCAL 47H 0002H 0026H 000BH "i" 02H 00H 01H

;;		switch(header->dst.addr_type)
CLINEA 0000H 0001H 00AAH 0003H 001FH
	l	r0,	06h[er8]
CBLOCK 366 12 171
	bne	_$M9
	b	_$L38
_$M9 :

;;		switch(header->dst.addr_type)
CLINEA 0000H 0000H 00AAH 0003H 001FH
	cmp	r0,	#01h
	bne	_$M10
	b	_$L39
_$M10 :

;;		switch(header->dst.addr_type)
CLINEA 0000H 0000H 00AAH 0003H 001FH
	cmp	r0,	#02h
	bne	_$M11
	b	_$L55
_$M11 :

;;		switch(header->dst.addr_type)
CLINEA 0000H 0000H 00AAH 0003H 001FH
	cmp	r0,	#03h
	bne	_$M12
	b	_$L74
_$M12 :

;;		}
CLINEA 0000H 0000H 00F0H 0003H 0003H
_$L36 :

;;		if(dst_ffff) header->fc.fc_bit.ack_req=0;
CLINEA 0000H 0001H 00F1H 0003H 002BH
	cmp	r6,	#00h
	beq	_$L88
	l	r2,	[er8]
	rb	r2.5
	st	r2,	[er8]
CBLOCKEND 366 11 242

;;	} else {
CLINEA 0000H 0000H 00F2H 0002H 0009H
	bal	_$L88
_$L31 :
CBLOCK 366 22 242

;;		header->fc.fc_bit.src_addr_type = IEEE802154_FC_ADDR_NONE;
CLINEA 0000H 0001H 00F3H 0003H 003CH
	l	r0,	01h[er8]
	and	r0,	#03fh
	st	r0,	01h[er8]
CBLOCKEND 366 22 244

;;	}
CLINEA 0000H 0000H 00F4H 0002H 0002H
_$L88 :

;;	if(enb_src_panid&BIT(header->addr_type))
CLINEA 0000H 0001H 00F7H 0002H 0029H
	mov	er0,	#1 
	l	r2,	01fh[er8]
_$M5 :
	cmp	r2,	#07h
	ble	_$M4
	sllc	r1,	#07h
	sll	r0,	#07h
	add	r2,	#0f9h
	bne	_$M5
_$M4 :
	sll	r0,	r2
	tb	r0.2
	beq	_$L89
CBLOCK 366 23 248

;;		if(header->src.panid.enb == 0)
CLINEA 0000H 0001H 00F9H 0003H 0020H
	l	r0,	010h[er8]
	bne	_$L91
CBLOCK 366 24 250

;;			status = -EINVAL;
CLINEA 0000H 0001H 00FEH 0004H 0014H
	mov	er0,	#-22

;;			goto error;
CLINEA 0000H 0001H 00FFH 0004H 000EH
	b	_$L17
CBLOCKEND 366 24 256

;;		} else {
CLINEA 0000H 0000H 0100H 0003H 000AH
_$L91 :
CBLOCK 366 25 256

;;			if(header->raw.size >= (int)(offset + sizeof(uint16_t))){
CLINEA 0000H 0000H 0101H 0000H 0000H
	mov	er0,	bp
	add	er0,	#2 
	mov	er4,	er0

;;			if(header->raw.size >= (int)(offset + sizeof(uint16_t))){
CLINEA 0000H 0001H 0101H 0004H 003CH
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bges	_$M13
	b	_$L94
_$M13 :
CBLOCK 366 26 257

;;				H2LBS(header->raw.data[offset],header->src.panid.data), offset+=2;
CLINEA 0000H 0001H 0102H 0005H 0046H
	mov	er0,	#2 
	push	er0
	mov	er2,	er8
	add	er2,	#18
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_memcpy_nn
	add	sp,	#2 
	mov	bp,	er4	;; _loffset$2
CBLOCKEND 366 26 259
CBLOCKEND 366 25 266
CBLOCKEND 366 23 267

;;	}
CLINEA 0000H 0000H 010BH 0002H 0002H
_$L89 :

;;	if(header->addr_type & BIT(2))
CLINEA 0000H 0001H 010DH 0002H 001FH
	l	r0,	01fh[er8]
	tb	r0.2
	beq	_$L97
CBLOCK 366 28 270

;;		switch(header->src.addr_type)
CLINEA 0000H 0001H 010FH 0003H 001FH
	l	r0,	014h[er8]
CBLOCK 366 29 272
	bne	_$M14
	b	_$L104
_$M14 :

;;		switch(header->src.addr_type)
CLINEA 0000H 0000H 010FH 0003H 001FH
	cmp	r0,	#01h
	bne	_$M15
	b	_$L105
_$M15 :

;;		switch(header->src.addr_type)
CLINEA 0000H 0000H 010FH 0003H 001FH
	cmp	r0,	#02h
	bne	_$M16
	b	_$L110
_$M16 :

;;		switch(header->src.addr_type)
CLINEA 0000H 0000H 010FH 0003H 001FH
	cmp	r0,	#03h
	bne	_$M17
	b	_$L115
_$M17 :

;;		}
CLINEA 0000H 0000H 0148H 0003H 0003H
_$L102 :
CBLOCKEND 366 28 329

;;	} else {
CLINEA 0000H 0000H 0149H 0002H 0009H
	bal	_$L124
_$L97 :
CBLOCK 366 36 329

;;		header->fc.fc_bit.dst_addr_type = IEEE802154_FC_ADDR_NONE;
CLINEA 0000H 0001H 014AH 0003H 003CH
	l	r0,	01h[er8]
	and	r0,	#0f3h
	st	r0,	01h[er8]
CBLOCKEND 366 36 331

;;	}
CLINEA 0000H 0000H 014BH 0002H 0002H
_$L124 :

;;	header->fc.fc_bit.panid_comp = header->addr_type & 0x01;
CLINEA 0000H 0001H 014EH 0002H 0039H
	l	r3,	[er8]
	rb	r3.6
	l	r2,	01fh[er8]
	and	r2,	#01h
	beq	_$M6
	sb	r3.6
_$M6 :
	st	r3,	[er8]

;;	header->fc.fc_bit.nop = 0;
CLINEA 0000H 0001H 014FH 0002H 001BH
	mov	r2,	r3
	rb	r2.7
	st	r2,	[er8]

;;	if(header->raw.size >= (offset + header->payload.len)) {
CLINEA 0000H 0001H 0150H 0002H 0039H
	l	er0,	024h[er8]
	add	er0,	bp
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$M18
	b	_$L125
_$M18 :
CBLOCK 366 37 336

;;		if(header->payload.len != 0) {
CLINEA 0000H 0001H 0151H 0003H 0020H
	l	er0,	024h[er8]
	beq	_$L134
CBLOCK 366 38 337

;;			if (AES128_getStatus()){
CLINEA 0000H 0001H 0153H 0004H 001BH
	bl	_AES128_getStatus
	cmp	r0,	#00h
	beq	_$L129
CBLOCK 366 39 339

;;				header->fc.fc_bit.sec_enb = 1;
CLINEA 0000H 0001H 0154H 0005H 0022H
	l	r2,	[er8]
	sb	r2.3
	st	r2,	[er8]

;;				if (mach.rx.fc.fc_bit.seq_comp){
CLINEA 0000H 0001H 0155H 0005H 0024H
	tb	NEAR (_mach+055h).0
	beq	_$L131
CBLOCK 366 40 341

;;					pad = AES128_CBC_encrypt(&header->raw.data[offset], header->payload.data, header->payload.len,0) ;
CLINEA 0000H 0000H 0156H 0006H 0067H
	mov	r0,	#00h
	push	r0
	l	er0,	024h[er8]
	mov	er2,	#0 
	push	xr0
	l	er2,	022h[er8]
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_AES128_CBC_encrypt
CBLOCKEND 366 40 344

;;				}else{
CLINEA 0000H 0000H 0158H 0005H 000AH
	bal	_$L133
_$L131 :
CBLOCK 366 41 344

;;					pad = AES128_CBC_encrypt(&header->raw.data[offset], header->payload.data, header->payload.len,header->seq) ;
CLINEA 0000H 0000H 0159H 0006H 0071H
	l	r0,	01eh[er8]
	push	r0
	l	er0,	024h[er8]
	mov	er2,	#0 
	push	xr0
	l	er2,	022h[er8]
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_AES128_CBC_encrypt
CBLOCKEND 366 41 347

;;				}
CLINEA 0000H 0000H 015BH 0005H 0005H
_$L133 :
	add	sp,	#6 

;;				offset += pad;
CLINEA 0000H 0001H 015DH 0005H 0012H
	mov	r1,	#00h
	add	bp,	er0
CBLOCKEND 366 39 351

;;			}else{
CLINEA 0000H 0000H 015FH 0004H 0009H
	bal	_$L134
_$L129 :
CBLOCK 366 42 351

;;				memcpy(&header->raw.data[offset], header->payload.data, header->payload.len);
CLINEA 0000H 0001H 0160H 0005H 0051H
	l	er0,	024h[er8]
	push	er0
	l	er2,	022h[er8]
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_memcpy_nn
	add	sp,	#2 
CBLOCKEND 366 42 353

;;			}
CLINEA 0000H 0000H 0161H 0004H 0004H
_$L134 :
CBLOCKEND 366 38 354

;;		offset+=header->payload.len;
CLINEA 0000H 0001H 0163H 0003H 001EH
	l	er2,	024h[er8]
	add	bp,	er2

;;		header->raw.len = offset;
CLINEA 0000H 0001H 0164H 0003H 001BH
	st	bp,	02ah[er8]
CBLOCKEND 366 37 384

;;	H2LBS(header->raw.data[0],header->fc.fc16);
CLINEA 0000H 0001H 0186H 0002H 002CH
	mov	er0,	#2 
	push	er0
	mov	er2,	er8
	l	er0,	028h[er8]
	bl	_memcpy_nn
	add	sp,	#2 

;;	status = STATUS_OK;
CLINEA 0000H 0001H 0188H 0002H 0014H
	mov	er0,	#0 

;;error:
CLINEA 0000H 0001H 018AH 0001H 0006H
CLABEL 0011H "error"
_$L17 :

;;	return status;
CLINEA 0000H 0001H 018BH 0002H 000FH
CBLOCKEND 366 2 396

;;}
CLINEA 0000H 0000H 018CH 0001H 0001H
	pop	er8
	pop	bp
	pop	xr4
	pop	pc

;;		} else {
CLINEA 0000H 0000H 008BH 0003H 000AH
_$L14 :
CBLOCK 366 5 139

;;			status = -ENOMEM;
CLINEA 0000H 0001H 008CH 0004H 0014H
	mov	er0,	#-12

;;			goto error;
CLINEA 0000H 0001H 008DH 0004H 000EH
	bal	_$L17
CBLOCKEND 366 5 142

;;			} else {
CLINEA 0000H 0000H 009BH 0004H 000BH
_$L28 :
CBLOCK 366 10 155

;;				status = -ENOMEM;
CLINEA 0000H 0001H 009FH 0005H 0015H
	mov	er0,	#-12

;;				goto error;
CLINEA 0000H 0001H 00A0H 0005H 000FH
	bal	_$L17
CBLOCKEND 366 10 161

;;			case 0:
CLINEA 0000H 0001H 00ACH 0004H 000AH
_$L38 :

;;				status = -EINVAL;
CLINEA 0000H 0001H 00B0H 0005H 0015H
	mov	er0,	#-22

;;				goto error;
CLINEA 0000H 0001H 00B1H 0005H 000FH
	bal	_$L17

;;			case 1:
CLINEA 0000H 0001H 00B3H 0004H 000AH
_$L39 :

;;						(header->dst.panid.enb == false))
CLINEA 0000H 0001H 00B6H 0007H 0027H
	l	er0,	04h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	beq	_$L41
	cmp	r0,	#0feh
	cmpc	r1,	#0ffh
	beq	_$L41
	l	r0,	02h[er8]
	bne	_$L40
_$L41 :
CBLOCK 366 13 183

;;					status = -EINVAL;
CLINEA 0000H 0001H 00BBH 0006H 0016H
	mov	er0,	#-22

;;					goto error;
CLINEA 0000H 0001H 00BCH 0006H 0010H
	bal	_$L17
CBLOCKEND 366 13 189

;;				}
CLINEA 0000H 0000H 00BDH 0005H 0005H
_$L40 :

;;				if(header->raw.size >= (offset + addr_len[1])){
CLINEA 0000H 0000H 00BEH 0000H 0000H
	mov	er0,	bp
	add	er0,	#1 
	mov	er4,	er0

;;				if(header->raw.size >= (offset + addr_len[1])){
CLINEA 0000H 0001H 00BEH 0005H 0033H
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$M19
	b	_$L50
_$M19 :
CBLOCK 366 14 190

;;					header->fc.fc_bit.dst_addr_type = IEEE802154_FC_ADDR_LDD;
CLINEA 0000H 0001H 00BFH 0006H 003EH
	l	r0,	01h[er8]
	and	r0,	#0f3h
	or	r0,	#04h
	st	r0,	01h[er8]

;;					header->raw.data[offset] = header->dst.addr.lddn_addr,offset++;
CLINEA 0000H 0001H 00C0H 0006H 0044H
	l	er0,	028h[er8]
	add	er0,	bp
	l	r2,	08h[er8]
	st	r2,	[er0]
	mov	bp,	er4	;; _loffset$2

;;					if(header->dst.addr.lddn_addr != 0xff) dst_ffff = false;
CLINEA 0000H 0001H 00C1H 0006H 003DH
	l	er0,	08h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#00h
	bne	_$M20
	b	_$L36
_$M20 :
	mov	r6,	#00h	;; _ldst_ffff$6
CBLOCKEND 366 14 194

;;				break;
CLINEA 0000H 0001H 00C9H 0005H 000AH
	b	_$L36

;;			case 2:
CLINEA 0000H 0001H 00CAH 0004H 000AH
_$L55 :

;;						(header->dst.panid.enb == false))
CLINEA 0000H 0001H 00CDH 0007H 0027H
	l	er0,	04h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$L61
	l	er0,	08h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$L57
_$L61 :
	l	er0,	04h[er8]
	cmp	r0,	#0feh
	cmpc	r1,	#0ffh
	beq	_$L57
	l	r0,	02h[er8]
	bne	_$L56
_$L57 :
CBLOCK 366 16 206

;;					status = -EINVAL;
CLINEA 0000H 0001H 00D2H 0006H 0016H
	mov	er0,	#-22

;;					goto error;
CLINEA 0000H 0001H 00D3H 0006H 0010H
	bal	_$L17
CBLOCKEND 366 16 212

;;				}
CLINEA 0000H 0000H 00D4H 0005H 0005H
_$L56 :

;;				if(header->raw.size >= (offset + addr_len[2])){
CLINEA 0000H 0000H 00D5H 0000H 0000H
	mov	er0,	bp
	add	er0,	#2 
	mov	er4,	er0

;;				if(header->raw.size >= (offset + addr_len[2])){
CLINEA 0000H 0001H 00D5H 0005H 0033H
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$M21
	b	_$L69
_$M21 :
CBLOCK 366 17 213

;;					header->fc.fc_bit.dst_addr_type = IEEE802154_FC_ADDR_SHORT;
CLINEA 0000H 0001H 00D6H 0006H 0040H
	l	r0,	01h[er8]
	and	r0,	#0f3h
	or	r0,	#08h
	st	r0,	01h[er8]

;;					H2LBS(header->raw.data[offset],header->dst.addr.short_addr), offset+=2;
CLINEA 0000H 0001H 00D7H 0006H 004CH
	mov	er0,	#2 
	push	er0
	mov	er2,	er8
	add	er2,	#8 
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_memcpy_nn
	add	sp,	#2 
	mov	bp,	er4	;; _loffset$2
CBLOCKEND 366 17 216

;;				if(header->dst.addr.short_addr != 0xffff) dst_ffff = false;
CLINEA 0000H 0001H 00DFH 0005H 003FH
	l	er0,	08h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$M22
	b	_$L36
_$M22 :
	mov	r6,	#00h	;; _ldst_ffff$6

;;				break;
CLINEA 0000H 0001H 00E0H 0005H 000AH
	b	_$L36

;;			case 3:
CLINEA 0000H 0001H 00E1H 0004H 000AH
_$L74 :

;;				if(header->raw.size >= (offset + addr_len[3])){
CLINEA 0000H 0001H 00E2H 0005H 0033H
	mov	er0,	bp
	add	er0,	#8 
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$M23
	b	_$L75
_$M23 :
CBLOCK 366 19 226

;;					for(i = 0;i<addr_len[header->dst.addr_type];i++)
CLINEA 0000H 0001H 00E3H 000AH 000FH
	mov	er4,	#0 	;; _li$10

;;					for(i = 0;i<addr_len[header->dst.addr_type];i++)
CLINEA 0000H 0000H 00E3H 0010H 0031H
	bal	_$L82

;;					for(i = 0;i<addr_len[header->dst.addr_type];i++)
CLINEA 0000H 0000H 00E3H 0032H 0034H
_$L79 :
CBLOCK 366 20 228

;;						header->raw.data[offset] = header->dst.addr.ieee_addr[i],offset++;
CLINEA 0000H 0001H 00E5H 0007H 0048H
	mov	er0,	er8
	add	er0,	er4
	l	er2,	028h[er8]
	add	er2,	bp
	l	r0,	08h[er0]
	st	r0,	[er2]
	add	bp,	#1 

;;						if(header->dst.addr.ieee_addr[i] != 0xff) dst_ffff = false;
CLINEA 0000H 0001H 00E6H 0007H 0041H
	mov	er0,	er8
	add	er0,	er4
	l	r0,	08h[er0]
	cmp	r0,	#0ffh
	beq	_$L83
	mov	r6,	#00h	;; _ldst_ffff$6
_$L83 :
CBLOCKEND 366 20 231

;;					for(i = 0;i<addr_len[header->dst.addr_type];i++)
CLINEA 0000H 0000H 00E3H 0032H 0034H
	add	er4,	#1 

;;					for(i = 0;i<addr_len[header->dst.addr_type];i++)
CLINEA 0000H 0000H 00E3H 0010H 0031H
_$L82 :
	l	r0,	06h[er8]
	mov	r1,	#00h
	l	r0,	NEAR _addr_len[er0]
	cmp	er4,	er0
	blts	_$L79

;;					header->fc.fc_bit.dst_addr_type = IEEE802154_FC_ADDR_IEEE;
CLINEA 0000H 0001H 00E8H 0006H 003FH
	l	r0,	01h[er8]
	or	r0,	#0ch
	st	r0,	01h[er8]
CBLOCKEND 366 19 233
CBLOCKEND 366 12 240

;;		}
CLINEA 0000H 0000H 00F0H 0003H 0003H
	b	_$L36

;;			} else {
CLINEA 0000H 0000H 0103H 0004H 000BH
_$L94 :
CBLOCK 366 27 259

;;				status = -ENOMEM;
CLINEA 0000H 0001H 0107H 0005H 0015H
	mov	er0,	#-12

;;				goto error;
CLINEA 0000H 0001H 0108H 0005H 000FH
	b	_$L17
CBLOCKEND 366 27 265

;;			case 0:
CLINEA 0000H 0001H 0111H 0004H 000AH
_$L104 :

;;				status = -EINVAL;
CLINEA 0000H 0001H 0112H 0005H 0015H
	mov	er0,	#-22

;;				goto error;
CLINEA 0000H 0001H 0113H 0005H 000FH
	b	_$L17

;;			case 1:
CLINEA 0000H 0001H 0115H 0004H 000AH
_$L105 :

;;				if(header->raw.size < (offset + addr_len[1])){
CLINEA 0000H 0000H 0116H 0000H 0000H
	mov	er0,	bp
	add	er0,	#1 
	mov	er4,	er0

;;				if(header->raw.size < (offset + addr_len[1])){
CLINEA 0000H 0001H 0116H 0005H 0032H
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$L106
CBLOCK 366 30 278

;;					status = -ENOMEM;
CLINEA 0000H 0001H 011AH 0006H 0016H
	mov	er0,	#-12

;;					goto error;
CLINEA 0000H 0001H 011BH 0006H 0010H
	b	_$L17
CBLOCKEND 366 30 284

;;				}
CLINEA 0000H 0000H 011CH 0005H 0005H
_$L106 :

;;				if(header->src.addr.lddn_addr==0xff){
CLINEA 0000H 0001H 011DH 0005H 0029H
	l	er0,	016h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#00h
	bne	_$L108
CBLOCK 366 31 285

;;					status = -EINVAL;
CLINEA 0000H 0001H 0121H 0006H 0016H
	mov	er0,	#-22

;;					goto error;
CLINEA 0000H 0001H 0122H 0006H 0010H
	b	_$L17
CBLOCKEND 366 31 291

;;				}
CLINEA 0000H 0000H 0123H 0005H 0005H
_$L108 :

;;				header->raw.data[offset] = header->src.addr.lddn_addr,offset++;
CLINEA 0000H 0001H 0124H 0005H 0043H
	l	er0,	028h[er8]
	add	er0,	bp
	l	r2,	016h[er8]
	st	r2,	[er0]
	mov	bp,	er4	;; _loffset$2

;;				header->fc.fc_bit.src_addr_type = IEEE802154_FC_ADDR_LDD;
CLINEA 0000H 0001H 0125H 0005H 003DH
	l	r0,	01h[er8]
	and	r0,	#03fh
	or	r0,	#040h
	st	r0,	01h[er8]

;;				break;
CLINEA 0000H 0001H 0126H 0005H 000AH
	b	_$L102

;;			case 2:
CLINEA 0000H 0001H 0127H 0004H 000AH
_$L110 :

;;				if(header->raw.size < (offset + addr_len[2])){
CLINEA 0000H 0000H 0128H 0000H 0000H
	mov	er0,	bp
	add	er0,	#2 
	mov	er4,	er0

;;				if(header->raw.size < (offset + addr_len[2])){
CLINEA 0000H 0001H 0128H 0005H 0032H
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$L111
CBLOCK 366 32 296

;;					status = -ENOMEM;
CLINEA 0000H 0001H 012CH 0006H 0016H
	mov	er0,	#-12

;;					goto error;
CLINEA 0000H 0001H 012DH 0006H 0010H
	b	_$L17
CBLOCKEND 366 32 302

;;				}
CLINEA 0000H 0000H 012EH 0005H 0005H
_$L111 :

;;				if(header->src.addr.short_addr==0xffff)
CLINEA 0000H 0001H 012FH 0005H 002BH
	l	er0,	016h[er8]
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$L113
CBLOCK 366 33 304

;;					status = -EINVAL;
CLINEA 0000H 0001H 0134H 0006H 0016H
	mov	er0,	#-22

;;					goto error;
CLINEA 0000H 0001H 0135H 0006H 0010H
	b	_$L17
CBLOCKEND 366 33 310

;;				}
CLINEA 0000H 0000H 0136H 0005H 0005H
_$L113 :

;;				H2LBS(header->raw.data[offset],header->src.addr.short_addr), offset+=2;
CLINEA 0000H 0001H 0137H 0005H 004BH
	mov	er0,	#2 
	push	er0
	mov	er2,	er8
	add	er2,	#22
	l	er0,	028h[er8]
	add	er0,	bp
	bl	_memcpy_nn
	add	sp,	#2 
	mov	bp,	er4	;; _loffset$2

;;				header->fc.fc_bit.src_addr_type = IEEE802154_FC_ADDR_SHORT;
CLINEA 0000H 0001H 0138H 0005H 003FH
	l	r0,	01h[er8]
	and	r0,	#03fh
	or	r0,	#080h
	st	r0,	01h[er8]

;;				break;
CLINEA 0000H 0001H 0139H 0005H 000AH
	b	_$L102

;;			case 3:
CLINEA 0000H 0001H 013AH 0004H 000AH
_$L115 :

;;				if(header->raw.size < (offset + addr_len[3])){
CLINEA 0000H 0001H 013BH 0005H 0032H
	mov	er0,	bp
	add	er0,	#8 
	l	er2,	02ch[er8]
	cmp	er2,	er0
	bge	_$L116
CBLOCK 366 34 315

;;					status = -ENOMEM;
CLINEA 0000H 0001H 013FH 0006H 0016H
	mov	er0,	#-12

;;					goto error;
CLINEA 0000H 0001H 0140H 0006H 0010H
	b	_$L17
CBLOCKEND 366 34 321

;;				}
CLINEA 0000H 0000H 0141H 0005H 0005H
_$L116 :

;;				for(i = 0;i<addr_len[header->src.addr_type];i++)
CLINEA 0000H 0001H 0142H 0009H 000EH
	mov	er4,	#0 	;; _li$8

;;				for(i = 0;i<addr_len[header->src.addr_type];i++)
CLINEA 0000H 0000H 0142H 000FH 0030H
	bal	_$L123

;;				for(i = 0;i<addr_len[header->src.addr_type];i++)
CLINEA 0000H 0000H 0142H 0031H 0033H
_$L120 :
CBLOCK 366 35 323

;;					header->raw.data[offset] = header->src.addr.ieee_addr[i],offset++;
CLINEA 0000H 0001H 0144H 0006H 0047H
	mov	er0,	er8
	add	er0,	er4
	l	er2,	028h[er8]
	add	er2,	bp
	l	r0,	016h[er0]
	st	r0,	[er2]
	add	bp,	#1 
CBLOCKEND 366 35 325

;;				for(i = 0;i<addr_len[header->src.addr_type];i++)
CLINEA 0000H 0000H 0142H 0031H 0033H
	add	er4,	#1 

;;				for(i = 0;i<addr_len[header->src.addr_type];i++)
CLINEA 0000H 0000H 0142H 000FH 0030H
_$L123 :
	l	r0,	014h[er8]
	mov	r1,	#00h
	l	r0,	NEAR _addr_len[er0]
	cmp	er4,	er0
	blts	_$L120

;;				header->fc.fc_bit.src_addr_type = IEEE802154_FC_ADDR_IEEE;
CLINEA 0000H 0001H 0146H 0005H 003EH
	l	r0,	01h[er8]
	or	r0,	#0c0h
	st	r0,	01h[er8]

;;				break;
CLINEA 0000H 0001H 0147H 0005H 000AH
	b	_$L102
CBLOCKEND 366 29 328

;;	} else {
CLINEA 0000H 0000H 0180H 0002H 0009H
_$L125 :
CBLOCK 366 43 384

;;		status = -ENOMEM;
CLINEA 0000H 0001H 0181H 0003H 0013H
	mov	er0,	#-12

;;		goto error;
CLINEA 0000H 0001H 0182H 0003H 000DH
	b	_$L17
CBLOCKEND 366 43 387

;;				} else {
CLINEA 0000H 0000H 00C2H 0005H 000CH
_$L50 :
CBLOCK 366 15 194

;;					status = -ENOMEM;
CLINEA 0000H 0001H 00C6H 0006H 0016H
	mov	er0,	#-12

;;					goto error;
CLINEA 0000H 0001H 00C7H 0006H 0010H
	b	_$L17
CBLOCKEND 366 15 200

;;				} else {
CLINEA 0000H 0000H 00D8H 0005H 000CH
_$L69 :
CBLOCK 366 18 216

;;					status = -ENOMEM;
CLINEA 0000H 0001H 00DCH 0006H 0016H
	mov	er0,	#-12

;;					goto error;
CLINEA 0000H 0001H 00DDH 0006H 0010H
	b	_$L17
CBLOCKEND 366 18 222

;;				} else {
CLINEA 0000H 0000H 00E9H 0005H 000CH
_$L75 :
CBLOCK 366 21 233

;;					status = -ENOMEM;
CLINEA 0000H 0001H 00EDH 0006H 0016H
	mov	er0,	#-12

;;					goto error;
CLINEA 0000H 0001H 00EEH 0006H 0010H
	b	_$L17
CBLOCKEND 366 21 239
CBLOCKEND 366 1 396
CFUNCTIONEND 366


	rseg $$mach_parse_data$mach
CFUNCTION 152

_mach_parse_data	:
CBLOCK 152 1 408

;;int mach_parse_data(struct mac_header *header) {
CLINEA 0000H 0001H 0198H 0001H 0030H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	bp
	push	er8
	push	er4
	mov	er8,	er0
CBLOCK 152 2 408
CRET 0006H
CARGUMENT 47H 0002H 0028H "header" 06H 03H 00H 00H 05H 0DH 00H
CLOCAL 46H 0002H 0026H 0002H "offset" 02H 00H 08H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H
CLOCAL 47H 0002H 002AH 0002H "i" 02H 00H 01H

;;	LB2HS(header->fc,header->input.data[offset]),offset+=2;
CLINEA 0000H 0001H 019FH 0002H 0038H
	mov	er0,	#2 
	push	er0
	mov	er0,	er8
	l	er2,	02eh[er8]
	bl	_memcpy_nn
	add	sp,	#2 
	mov	er4,	#2 	;; _loffset$0

;;	header->addr_type = header->fc.fc_bit.panid_comp;
CLINEA 0000H 0001H 01A2H 0002H 0032H
	l	r0,	[er8]
	srl	r0,	#06h
	and	r0,	#01h
	st	r0,	01fh[er8]

;;	header->addr_type += (header->fc.fc_bit.src_addr_type ? 2: 0);
CLINEA 0000H 0001H 01A3H 0002H 003FH
	l	r0,	01h[er8]
	srl	r0,	#06h
	and	r0,	#03h
	beq	_$L137
	mov	er0,	#2 
	bal	_$L139
_$L137 :
	mov	er0,	#0 
_$L139 :
	mov	er2,	er0
	l	r0,	01fh[er8]
	add	r0,	r2
	st	r0,	01fh[er8]

;;	header->addr_type += (header->fc.fc_bit.dst_addr_type ? 4: 0);
CLINEA 0000H 0001H 01A4H 0002H 003FH
	l	r0,	01h[er8]
	srl	r0,	#02h
	and	r0,	#03h
	beq	_$L140
	mov	er0,	#4 
	bal	_$L142
_$L140 :
	mov	er0,	#0 
_$L142 :
	mov	er2,	er0
	l	r0,	01fh[er8]
	add	r0,	r2
	st	r0,	01fh[er8]

;;	header->src.addr_type = header->fc.fc_bit.src_addr_type;
CLINEA 0000H 0001H 01A5H 0002H 0039H
	l	r0,	01h[er8]
	srl	r0,	#06h
	and	r0,	#03h
	st	r0,	014h[er8]

;;	header->dst.addr_type = header->fc.fc_bit.dst_addr_type;
CLINEA 0000H 0001H 01A6H 0002H 0039H
	l	r0,	01h[er8]
	srl	r0,	#02h
	and	r0,	#03h
	st	r0,	06h[er8]

;;	header->dst.panid.enb = (enb_dst_panid & BIT(header->addr_type)) ? 1: 0;
CLINEA 0000H 0000H 01A9H 0002H 0049H
	mov	er0,	#1 
	l	r2,	01fh[er8]
_$M26 :
	cmp	r2,	#07h
	ble	_$M25
	sllc	r1,	#07h
	sll	r0,	#07h
	add	r2,	#0f9h
	bne	_$M26
_$M25 :
	sll	r0,	r2
	and	r0,	#052h
	beq	_$L143
	mov	er0,	#1 
	bal	_$L145
_$L143 :
	mov	er0,	#0 
_$L145 :
	st	r0,	02h[er8]

;;	header->src.panid.enb = (enb_src_panid & BIT(header->addr_type)) ? 1: 0;
CLINEA 0000H 0000H 01AAH 0002H 0049H
	mov	er0,	#1 
	l	r2,	01fh[er8]
_$M28 :
	cmp	r2,	#07h
	ble	_$M27
	sllc	r1,	#07h
	sll	r0,	#07h
	add	r2,	#0f9h
	bne	_$M28
_$M27 :
	sll	r0,	r2
	tb	r0.2
	beq	_$L146
	mov	er0,	#1 
	bal	_$L148
_$L146 :
	mov	er0,	#0 
_$L148 :
	st	r0,	010h[er8]

;;	if (!header->fc.fc_bit.seq_comp) {
CLINEA 0000H 0000H 01ADH 0002H 0023H
	l	r0,	01h[er8]
	tb	r0.0
	bne	_$L149
CBLOCK 152 3 429

;;		header->seq = header->input.data[offset],offset++;
CLINEA 0000H 0001H 01AEH 0003H 0034H
	l	bp,	02eh[er8]
	l	r0,	2[bp]
	st	r0,	01eh[er8]
	mov	er4,	#3 	;; _loffset$0
CBLOCKEND 152 3 431

;;	}
CLINEA 0000H 0000H 01AFH 0002H 0002H
_$L149 :

;;	if(header->dst.panid.enb)
CLINEA 0000H 0001H 01B1H 0002H 001AH
	l	r0,	02h[er8]
	beq	_$L153
CBLOCK 152 4 434

;;		LB2HS(header->dst.panid.data,header->input.data[offset]),offset+=2;
CLINEA 0000H 0001H 01B3H 0003H 0045H
	mov	er0,	#2 
	push	er0
	l	er2,	02eh[er8]
	add	er2,	er4
	mov	er0,	er8
	add	er0,	#4 
	bl	_memcpy_nn
	add	sp,	#2 
	add	er4,	#2 
CBLOCKEND 152 4 436

;;	} else {
CLINEA 0000H 0000H 01B4H 0002H 0009H
	bal	_$L155
_$L153 :
CBLOCK 152 5 436

;;		header->dst.panid.data = 0xFFFF;
CLINEA 0000H 0001H 01B5H 0003H 0022H
	mov	er0,	#-1
	st	er0,	04h[er8]
CBLOCKEND 152 5 438

;;	}
CLINEA 0000H 0000H 01B6H 0002H 0002H
_$L155 :

;;	if(header->fc.fc_bit.dst_addr_type != 0) {
CLINEA 0000H 0001H 01B8H 0002H 002BH
	l	r0,	01h[er8]
	srl	r0,	#02h
	and	r0,	#03h
	beq	_$L156
CBLOCK 152 6 440

;;		memset(header->dst.addr.ieee_addr,0,8);
CLINEA 0000H 0001H 01B9H 0003H 0029H
	mov	er0,	#8 
	push	er0
	mov	er2,	#0 
	mov	er0,	er8
	add	er0,	#8 
	bl	_memset_n
	add	sp,	#2 

;;		for(i=0;i< addr_len[header->fc.fc_bit.dst_addr_type];i++)
CLINEA 0000H 0001H 01BAH 0003H 003BH
	mov	bp,	#0 	;; _li$4
	bal	_$L163
_$L160 :
CBLOCK 152 7 443

;;			header->dst.addr.ieee_addr[i] = header->input.data[offset],offset++;
CLINEA 0000H 0001H 01BCH 0004H 0047H
	l	er0,	02eh[er8]
	add	er0,	er4
	mov	er2,	er0
	mov	er0,	er8
	add	er0,	bp
	l	r2,	[er2]
	st	r2,	08h[er0]
	add	er4,	#1 
CBLOCKEND 152 7 445

;;		for(i=0;i< addr_len[header->fc.fc_bit.dst_addr_type];i++)
CLINEA 0000H 0000H 01BAH 0003H 003BH
	add	bp,	#1 
_$L163 :

;;		for(i=0;i< addr_len[header->fc.fc_bit.dst_addr_type];i++)
CLINEA 0000H 0000H 01BAH 000FH 0030H
	l	r0,	01h[er8]
	srl	r0,	#02h
	and	r0,	#03h
	mov	r1,	#00h
	l	r0,	NEAR _addr_len[er0]
	cmp	bp,	er0
	blts	_$L160
CBLOCKEND 152 6 446

;;	} else {
CLINEA 0000H 0000H 01BEH 0002H 0009H
	bal	_$L164
_$L156 :
CBLOCK 152 8 446

;;		memset(header->dst.addr.ieee_addr,0xff,8);
CLINEA 0000H 0001H 01BFH 0003H 002CH
	mov	er0,	#8 
	push	er0
	mov	r2,	#0ffh
	mov	r3,	#00h
	mov	er0,	er8
	add	er0,	#8 
	bl	_memset_n
	add	sp,	#2 
CBLOCKEND 152 8 448

;;	}
CLINEA 0000H 0000H 01C0H 0002H 0002H
_$L164 :

;;	if(header->src.panid.enb)
CLINEA 0000H 0001H 01C2H 0002H 001AH
	l	r0,	010h[er8]
	beq	_$L165
CBLOCK 152 9 451

;;		LB2HS(header->src.panid.data,header->input.data[offset]),offset+=2;
CLINEA 0000H 0001H 01C4H 0003H 0045H
	mov	er0,	#2 
	push	er0
	l	er2,	02eh[er8]
	add	er2,	er4
	mov	er0,	er8
	add	er0,	#18
	bl	_memcpy_nn
	add	sp,	#2 
	add	er4,	#2 
CBLOCKEND 152 9 453

;;	} else {
CLINEA 0000H 0000H 01C5H 0002H 0009H
	bal	_$L167
_$L165 :
CBLOCK 152 10 453

;;		header->src.panid.data = 0xFFFF;
CLINEA 0000H 0001H 01C6H 0003H 0022H
	mov	er0,	#-1
	st	er0,	012h[er8]
CBLOCKEND 152 10 455

;;	}
CLINEA 0000H 0000H 01C7H 0002H 0002H
_$L167 :

;;	if(header->fc.fc_bit.src_addr_type != 0) {
CLINEA 0000H 0001H 01C9H 0002H 002BH
	l	r0,	01h[er8]
	srl	r0,	#06h
	and	r0,	#03h
	beq	_$L168
CBLOCK 152 11 457

;;		memset(header->src.addr.ieee_addr,0,8);
CLINEA 0000H 0001H 01CAH 0003H 0029H
	mov	er0,	#8 
	push	er0
	mov	er2,	#0 
	mov	er0,	er8
	add	er0,	#22
	bl	_memset_n
	add	sp,	#2 

;;		for(i=0;i< addr_len[header->fc.fc_bit.src_addr_type];i++)
CLINEA 0000H 0001H 01CBH 0003H 003BH
	mov	bp,	#0 	;; _li$4
	bal	_$L175
_$L172 :
CBLOCK 152 12 460

;;			header->src.addr.ieee_addr[i] = header->input.data[offset],offset++;
CLINEA 0000H 0001H 01CDH 0004H 0047H
	l	er0,	02eh[er8]
	add	er0,	er4
	mov	er2,	er0
	mov	er0,	er8
	add	er0,	bp
	l	r2,	[er2]
	st	r2,	016h[er0]
	add	er4,	#1 
CBLOCKEND 152 12 462

;;		for(i=0;i< addr_len[header->fc.fc_bit.src_addr_type];i++)
CLINEA 0000H 0000H 01CBH 0003H 003BH
	add	bp,	#1 
_$L175 :

;;		for(i=0;i< addr_len[header->fc.fc_bit.src_addr_type];i++)
CLINEA 0000H 0000H 01CBH 000FH 0030H
	l	r0,	01h[er8]
	srl	r0,	#06h
	and	r0,	#03h
	mov	r1,	#00h
	l	r0,	NEAR _addr_len[er0]
	cmp	bp,	er0
	blts	_$L172
CBLOCKEND 152 11 463

;;	} else {
CLINEA 0000H 0000H 01CFH 0002H 0009H
	bal	_$L176
_$L168 :
CBLOCK 152 13 463

;;		memset(header->src.addr.ieee_addr,0xff,8);
CLINEA 0000H 0001H 01D0H 0003H 002CH
	mov	er0,	#8 
	push	er0
	mov	r2,	#0ffh
	mov	r3,	#00h
	mov	er0,	er8
	add	er0,	#22
	bl	_memset_n
	add	sp,	#2 
CBLOCKEND 152 13 465

;;	}
CLINEA 0000H 0000H 01D1H 0002H 0002H
_$L176 :

;;	header->raw.len = header->input.len; // last byte is rss
CLINEA 0000H 0001H 01D3H 0002H 0039H
	l	er0,	030h[er8]
	st	er0,	02ah[er8]

;;	header->payload.data = (uint8_t *)(header->raw.data+offset);
CLINEA 0000H 0001H 01D4H 0002H 003DH
	l	er0,	028h[er8]
	add	er0,	er4
	st	er0,	022h[er8]

;;	header->payload_offset = offset;
CLINEA 0000H 0001H 01D5H 0002H 0021H
	st	er4,	034h[er8]

;;	header->payload.len = header->input.len - offset;
CLINEA 0000H 0001H 01D6H 0002H 0032H
	l	er0,	030h[er8]
	sub	r0,	r4
	subc	r1,	r5
	st	er0,	024h[er8]

;;	return status;
CLINEA 0000H 0001H 01DAH 0002H 000FH
CBLOCKEND 152 2 475

;;}
CLINEA 0000H 0000H 01DBH 0001H 0001H
	mov	er0,	#0 
	pop	er4
	pop	er8
	pop	bp
	pop	pc
CBLOCKEND 152 1 475
CFUNCTIONEND 152


	rseg $$mach_match_seq_num$mach
CFUNCTION 368

_mach_match_seq_num	:
CBLOCK 368 1 484

;;{
CLINEA 0000H 0001H 01E4H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er4
CBLOCK 368 2 484
CRET 0002H
CLOCAL 46H 0001H 0018H 0002H "result" 02H 00H 00H

;;	bool result=false;
CLINEA 0000H 0001H 01E5H 0002H 0013H
	mov	r4,	#00h	;; _lresult$0

;;			memcmp(&mach.rx.src,&mach.rx_prev.src,sizeof(struct fc_addr))==0) {
CLINEA 0000H 0000H 01E8H 0004H 0046H
	l	r0,	NEAR _mach+072h
	l	r1,	NEAR _mach+0a8h
	cmp	r0,	r1
	bne	_$L178
	mov	er0,	#14
	push	er0
	mov	r2,	#BYTE1 OFFSET (_mach+09ah)
	mov	r3,	#BYTE2 OFFSET (_mach+09ah)
	mov	r0,	#BYTE1 OFFSET (_mach+064h)
	mov	r1,	#BYTE2 OFFSET (_mach+064h)
	bl	_memcmp_nn
	add	sp,	#2 
	mov	er0,	er0
	bne	_$L178
CBLOCK 368 3 488

;;		result=true;
CLINEA 0000H 0001H 01E9H 0003H 000EH
	mov	r4,	#01h	;; _lresult$0
CBLOCKEND 368 3 490

;;	}
CLINEA 0000H 0000H 01EAH 0002H 0002H
_$L178 :

;;	return result;
CLINEA 0000H 0001H 01ECH 0002H 000FH
	mov	r0,	r4
CBLOCKEND 368 2 493

;;}
CLINEA 0000H 0000H 01EDH 0001H 0001H
	pop	er4
	pop	pc
CBLOCKEND 368 1 493
CFUNCTIONEND 368


	rseg $$mach_make_ack_header$mach
CFUNCTION 369

_mach_make_ack_header	:
CBLOCK 369 1 520

;;bool mach_make_ack_header(void) {
CLINEA 0000H 0001H 0208H 0001H 0021H
;;*****************************************
;;	register/stack information
;;*****************************************
	_ack_condition$0	set	-1
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-02
	push	xr8
	push	xr4
	push	bp
CBLOCK 369 2 520
CRET 000EH
CLOCAL 42H 0001H 0001H 0002H "ack_condition" 02H 00H 00H
CLOCAL 46H 0002H 0028H 0002H "offset" 02H 00H 08H

;;	bool ack_condition=false;
CLINEA 0000H 0001H 020AH 0002H 001AH
	mov	r0,	#00h
	st	r0,	_ack_condition$0[fp]

;;			 ))) {
CLINEA 0000H 0001H 021DH 0005H 0009H
	l	r0,	NEAR _mach+073h
	cmp	r0,	#06h
	beq	_$L191
	cmp	r0,	#07h
	beq	_$M32
	b	_$L186
_$M32 :
_$L191 :
	tb	NEAR (_mach+054h).5
	bne	_$M33
	b	_$L186
_$M33 :
	l	r0,	NEAR _mach+05ah
	cmp	r0,	#02h
	bne	_$L200
	l	er0,	NEAR _mach+05ch
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	bne	_$L187
_$L200 :
	l	r0,	NEAR _mach+05ah
	cmp	r0,	#03h
	beq	_$M34
	b	_$L186
_$M34 :
	l	r0,	NEAR _mach+05ch
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+05dh
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+05eh
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+05fh
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+060h
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+061h
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+062h
	cmp	r0,	#0ffh
	bne	_$L187
	l	r0,	NEAR _mach+063h
	cmp	r0,	#0ffh
	bne	_$M35
	b	_$L186
_$M35 :
_$L187 :
CBLOCK 369 3 541

;;		mach.ack.fc.fc16 = 0;
CLINEA 0000H 0001H 021FH 0003H 0017H
	mov	er0,	#0 
	st	er0,	NEAR _mach+0c0h

;;		mach.ack.fc.fc_bit.frame_type = IEEE802154_FC_TYPE_ACK;
CLINEA 0000H 0001H 0220H 0003H 0039H
	l	r0,	NEAR _mach+0c0h
	and	r0,	#0f8h
	or	r0,	#02h
	st	r0,	NEAR _mach+0c0h

;;		mach.ack.fc.fc_bit.panid_comp = 0;
CLINEA 0000H 0001H 0222H 0003H 0024H
	rb	NEAR (_mach+0c0h).6

;;		mach.ack.fc.fc_bit.seq_comp = mach.rx.fc.fc_bit.seq_comp;
CLINEA 0000H 0001H 0223H 0003H 003BH
	rb	NEAR (_mach+0c1h).0
	tb	NEAR (_mach+055h).0
	beq	_$M31
	sb	NEAR (_mach+0c1h).0
_$M31 :

;;		mach.ack.fc.fc_bit.frame_ver = mach.rx.fc.fc_bit.frame_ver;
CLINEA 0000H 0001H 0224H 0003H 003DH
	l	r0,	NEAR _mach+055h
	srl	r0,	#04h
	and	r0,	#03h
	sll	r0,	#04h
	l	r1,	NEAR _mach+0c1h
	xor	r0,	r1
	and	r0,	#030h
	xor	r1,	r0
	st	r1,	NEAR _mach+0c1h

;;		ack_condition = true;
CLINEA 0000H 0001H 0225H 0003H 0017H
	mov	r0,	#01h
	st	r0,	_ack_condition$0[fp]

;;		H2LBS(mach.ack.raw.data[offset],mach.ack.fc.fc16), offset+=2;
CLINEA 0000H 0001H 0228H 0003H 003FH
	mov	er0,	#2 
	push	er0
	mov	r2,	#BYTE1 OFFSET (_mach+0c0h)
	mov	r3,	#BYTE2 OFFSET (_mach+0c0h)
	l	er0,	NEAR _mach+0e8h
	bl	_memcpy_nn
	add	sp,	#2 
	mov	er8,	#2 	;; _loffset$2

;;		if(!mach.ack.fc.fc_bit.seq_comp) {
CLINEA 0000H 0000H 022BH 0003H 0024H
	tb	NEAR (_mach+0c1h).0
	bne	_$L229
CBLOCK 369 4 555

;;			mach.ack.seq = mach.rx.seq;
CLINEA 0000H 0001H 022CH 0004H 001EH
	l	r0,	NEAR _mach+072h
	st	r0,	NEAR _mach+0deh

;;			mach.ack.raw.data[offset] = mach.ack.seq,offset++;
CLINEA 0000H 0001H 022DH 0004H 0035H
	l	bp,	NEAR _mach+0e8h
	st	r0,	2[bp]
	mov	er8,	#3 	;; _loffset$2
CBLOCKEND 369 4 558

;;		}
CLINEA 0000H 0000H 022EH 0003H 0003H
_$L229 :

;;		if(tx_enhance_ack.len>0) {
CLINEA 0000H 0001H 022FH 0003H 001CH
	l	er0,	NEAR _tx_enhance_ack+02h
	cmp	r0,	#00h
	cmpc	r1,	#00h
	ble	_$L236
CBLOCK 369 5 559
CLOCAL 47H 0002H 0029H 0005H "enhance_ack_rx_num" 02H 00H 08H
CLOCAL 47H 0002H 0027H 0005H "enhance_ack_size" 02H 00H 08H
CLOCAL 46H 0002H 0025H 0005H "src_target" 02H 00H 08H
CLOCAL 47H 0002H 0026H 0005H "enhance_ack_offset" 02H 00H 08H

;;			int16_t enhance_ack_rx_num = *((int16_t *)(tx_enhance_ack.data+0));
CLINEA 0000H 0001H 0230H 0004H 0046H
	l	bp,	NEAR _tx_enhance_ack
	l	er10,	[bp]

;;			int16_t enhance_ack_size = *((int16_t *)(tx_enhance_ack.data+2));
CLINEA 0000H 0001H 0231H 0004H 0044H
	l	er6,	2[bp]

;;			int16_t enhance_ack_offset = 4;
CLINEA 0000H 0001H 0233H 0004H 0022H
	mov	er4,	#4 	;; _lenhance_ack_offset$10

;;			do {
CLINEA 0000H 0001H 0234H 0004H 0007H
_$L237 :
CBLOCK 369 6 564

;;				src_target = *((uint16_t *)(tx_enhance_ack.data+enhance_ack_offset));
CLINEA 0000H 0001H 0235H 0005H 0049H
	l	er0,	NEAR _tx_enhance_ack
	add	er0,	er4
	l	er0,	[er0]
	mov	er2,	er0	;; _lsrc_target$8

;;				if ((src_target == 0xffff ) || (src_target == mach.rx.src.addr.short_addr)) {
CLINEA 0000H 0001H 0236H 0005H 0051H
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	beq	_$L240
	l	er0,	NEAR _mach+06ah
	cmp	er0,	er2
	bne	_$L239
_$L240 :
CBLOCK 369 7 566

;;					memcpy(&mach.ack.raw.data[offset],&tx_enhance_ack.data[enhance_ack_offset+2],enhance_ack_size);
CLINEA 0000H 0001H 0237H 0006H 0064H
	push	er6
	l	er0,	NEAR _tx_enhance_ack
	add	er0,	er4
	add	er0,	#2 
	mov	er2,	er0
	l	er0,	NEAR _mach+0e8h
	add	er0,	er8
	bl	_memcpy_nn
	add	sp,	#2 

;;					offset += enhance_ack_size;
CLINEA 0000H 0001H 0238H 0006H 0020H
	add	er8,	er6

;;					break;
CLINEA 0000H 0001H 0239H 0006H 000BH
	bal	_$L236
CBLOCKEND 369 7 570

;;				} else {
CLINEA 0000H 0000H 023AH 0005H 000CH
_$L239 :
CBLOCK 369 8 570

;;					enhance_ack_offset += (enhance_ack_size+2);
CLINEA 0000H 0001H 023BH 0006H 0030H
	add	er4,	er6
	add	er4,	#2 
CBLOCKEND 369 8 572

;;				enhance_ack_rx_num--;
CLINEA 0000H 0000H 023DH 0005H 0019H
	add	er10,	#-1
CBLOCKEND 369 6 574

;;			} while(enhance_ack_rx_num>0);
CLINEA 0000H 0000H 023EH 0004H 0021H
	cmp	r10,	#00h
	cmpc	r11,	#00h
	bgts	_$L237
_$L236 :
CBLOCKEND 369 5 575

;;		mach.ack.raw.len = offset;
CLINEA 0000H 0001H 0240H 0003H 001CH
	st	er8,	NEAR _mach+0eah
CBLOCKEND 369 3 583

;;	}
CLINEA 0000H 0000H 0247H 0002H 0002H
_$L186 :

;;	return ack_condition;
CLINEA 0000H 0001H 0249H 0002H 0016H
	l	r0,	_ack_condition$0[fp]
CBLOCKEND 369 2 586

;;}
CLINEA 0000H 0000H 024AH 0001H 0001H
	pop	bp
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 369 1 586
CFUNCTIONEND 369


	rseg $$mach_update_rx_data$mach
CFUNCTION 370

_mach_update_rx_data	:
CBLOCK 370 1 589

;;{
CLINEA 0000H 0001H 024DH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 370 2 589
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	return status;
CLINEA 0000H 0001H 0250H 0002H 000FH
CBLOCKEND 370 2 593

;;}
CLINEA 0000H 0000H 0251H 0001H 0001H
	mov	er0,	#0 
	rt
CBLOCKEND 370 1 593
CFUNCTIONEND 370


	rseg $$mach_init$mach
CFUNCTION 142

_mach_init	:
CBLOCK 142 1 601

;;{
CLINEA 0000H 0001H 0259H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 142 2 601
CRET 0000H

;;	memset(&mach,0,sizeof(struct mach_param));
CLINEA 0000H 0001H 025AH 0002H 002BH
	mov	r0,	#0fah
	mov	r1,	#00h
	push	er0
	mov	er2,	#0 
	mov	r0,	#BYTE1 OFFSET _mach
	mov	r1,	#BYTE2 OFFSET _mach
	bl	_memset_n
	add	sp,	#2 

;;	mach.macl = macl_init();
CLINEA 0000H 0000H 025BH 0002H 0019H
	bl	_macl_init
	st	er0,	NEAR _mach

;;	if(mach.macl == NULL) return NULL;
CLINEA 0000H 0001H 025CH 0002H 0023H
	mov	er0,	er0
	bne	_$L249
	mov	er0,	#0 
CBLOCKEND 142 2 620

;;}
CLINEA 0000H 0001H 026CH 0001H 0001H
_$L248 :
	pop	pc

;;	if(mach.macl == NULL) return NULL;
CLINEA 0000H 0000H 025CH 0002H 0023H
_$L249 :

;;	mach.ack.raw.data = tx_ackbuf;
CLINEA 0000H 0001H 025FH 0002H 001FH
	mov	r0,	#BYTE1 OFFSET _tx_ackbuf
	mov	r1,	#BYTE2 OFFSET _tx_ackbuf
	st	er0,	NEAR _mach+0e8h

;;	mach.ack.raw.size = sizeof(tx_ackbuf);
CLINEA 0000H 0001H 0260H 0002H 0027H
	mov	er0,	#32
	st	er0,	NEAR _mach+0ech

;;	mach.ack.raw.len = 0;
CLINEA 0000H 0001H 0261H 0002H 0016H
	mov	er0,	#0 
	st	er0,	NEAR _mach+0eah

;;	tx_enhance_ack.data = NULL;
CLINEA 0000H 0001H 0262H 0002H 001CH
	st	er0,	NEAR _tx_enhance_ack

;;	tx_enhance_ack.size = 0;
CLINEA 0000H 0001H 0263H 0002H 0019H
	st	er0,	NEAR _tx_enhance_ack+04h

;;	tx_enhance_ack.len = 0;
CLINEA 0000H 0001H 0264H 0002H 0018H
	st	er0,	NEAR _tx_enhance_ack+02h

;;	rx_enhance_ack.data = rx_enhance_ack_buffer;
CLINEA 0000H 0001H 0265H 0002H 002DH
	mov	r0,	#BYTE1 OFFSET _rx_enhance_ack_buffer
	mov	r1,	#BYTE2 OFFSET _rx_enhance_ack_buffer
	st	er0,	NEAR _rx_enhance_ack

;;	rx_enhance_ack.size = sizeof(rx_enhance_ack_buffer);
CLINEA 0000H 0001H 0266H 0002H 0035H
	mov	er0,	#16
	st	er0,	NEAR _rx_enhance_ack+04h

;;	rx_enhance_ack.len = 0;
CLINEA 0000H 0001H 0267H 0002H 0018H
	mov	er0,	#0 
	st	er0,	NEAR _rx_enhance_ack+02h

;;	macl_sleep(true);
CLINEA 0000H 0001H 0268H 0002H 0012H
	mov	r0,	#01h
	bl	_macl_sleep

;;	get_mac_addr(mach.my_addr.ieee_addr);
CLINEA 0000H 0001H 0269H 0002H 0026H
	mov	r0,	#BYTE1 OFFSET (_mach+08h)
	mov	r1,	#BYTE2 OFFSET (_mach+08h)
	bl	_get_mac_addr

;;	return &mach;
CLINEA 0000H 0001H 026BH 0002H 000EH
	mov	r0,	#BYTE1 OFFSET _mach
	mov	r1,	#BYTE2 OFFSET _mach
	bal	_$L248
CBLOCKEND 142 1 620
CFUNCTIONEND 142


	rseg $$mach_start$mach
CFUNCTION 150

_mach_start	:
CBLOCK 150 1 628

;;int mach_start(BUFFER *rxbuf) {
CLINEA 0000H 0001H 0274H 0001H 001FH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 150 2 628
CRET 0002H
CARGUMENT 47H 0002H 0028H "rxbuf" 06H 03H 00H 00H 05H 02H 00H
CLOCAL 47H 0002H 0024H 0002H "status" 02H 00H 01H

;;	mach.rx.raw.data = rxbuf->data;
CLINEA 0000H 0001H 0278H 0002H 0020H
	l	er0,	[er0]
	st	er0,	NEAR _mach+07ch

;;	mach.rx.raw.size = rxbuf->size;
CLINEA 0000H 0001H 0279H 0002H 0020H
	l	er0,	04h[er8]
	st	er0,	NEAR _mach+080h

;;	mach.rx.raw.len = 0;
CLINEA 0000H 0001H 027AH 0002H 0015H
	mov	er0,	#0 
	st	er0,	NEAR _mach+07eh

;;	mach.rx.payload.data = NULL;
CLINEA 0000H 0001H 027BH 0002H 001DH
	st	er0,	NEAR _mach+076h

;;	mach.rx.payload.size = rxbuf->size;
CLINEA 0000H 0001H 027CH 0002H 0024H
	l	er0,	04h[er8]
	st	er0,	NEAR _mach+07ah

;;	mach.rx.payload.len = 0;
CLINEA 0000H 0001H 027DH 0002H 0019H
	mov	er0,	#0 
	st	er0,	NEAR _mach+078h

;;	status = macl_start();
CLINEA 0000H 0000H 0286H 0002H 0017H
	bl	_macl_start

;;	return status;
CLINEA 0000H 0001H 0288H 0002H 000FH
CBLOCKEND 150 2 649

;;}
CLINEA 0000H 0000H 0289H 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 150 1 649
CFUNCTIONEND 150


	rseg $$mach_stop$mach
CFUNCTION 151

_mach_stop	:
CBLOCK 151 1 657

;;int mach_stop(void) {
CLINEA 0000H 0001H 0291H 0001H 0015H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 151 2 657

;;	return macl_stop();
CLINEA 0000H 0001H 0292H 0002H 0014H
	b	_macl_stop
CBLOCKEND 151 2 659
CLINEA 0000H 0000H 0293H 0001H 0001H
CBLOCKEND 151 1 659
CFUNCTIONEND 151


	rseg $$mach_setup$mach
CFUNCTION 144

_mach_setup	:
CBLOCK 144 1 666

;;int mach_setup(struct rf_param *rf) {
CLINEA 0000H 0001H 029AH 0001H 0025H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 144 2 666
CRET 0002H
CARGUMENT 47H 0002H 0028H "rf" 06H 03H 00H 00H 05H 0EH 00H
CLOCAL 47H 0002H 0025H 0002H "status" 02H 00H 01H

;;	mach.rf = rf;
CLINEA 0000H 0001H 029EH 0002H 000EH
	st	er0,	NEAR _mach+0f8h

;;	if((status = macl_set_channel(rf->pages,rf->ch,rf->tx_power,rf->ant_sw)) != STATUS_OK){
CLINEA 0000H 0000H 02A1H 0002H 0058H
	l	er0,	012h[er0]
	l	er2,	014h[er8]
	push	xr0
	l	r2,	08h[er8]
	l	r1,	[er8]
	l	r0,	01h[er8]
	bl	_macl_set_channel
	add	sp,	#4 
	mov	er0,	er0
	bne	_$L256
CBLOCK 144 3 673

;;		goto error;
CLINEA 0000H 0001H 02A2H 0003H 000DH
CBLOCKEND 144 3 675

;;	if((status = macl_set_frame_retries(rf->tx_retry,rf->ack_timeout)) != STATUS_OK) goto error;
CLINEA 0000H 0000H 02A6H 0002H 005DH
	l	er2,	0ah[er8]
	l	r0,	07h[er8]
	bl	_macl_set_frame_retries
	mov	er0,	er0
	bne	_$L256

;;	if((status = macl_set_csma_params(rf->cca_min_be,rf->cca_max_be, rf->cca_retry)) != STATUS_OK) goto error;
CLINEA 0000H 0000H 02ABH 0002H 006BH
	l	r2,	04h[er8]
	l	r1,	03h[er8]
	l	r0,	02h[er8]
	bl	_macl_set_csma_params

;;error:
CLINEA 0000H 0001H 02ACH 0001H 0006H
CLABEL 0100H "error"
_$L256 :

;;	return status;
CLINEA 0000H 0001H 02ADH 0002H 000FH
CBLOCKEND 144 2 686

;;}
CLINEA 0000H 0000H 02AEH 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 144 1 686
CFUNCTIONEND 144


	rseg $$mach_set_dst_ieee_addr$mach
CFUNCTION 146

_mach_set_dst_ieee_addr	:
CBLOCK 146 1 696

;;{
CLINEA 0000H 0001H 02B8H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 146 2 696
CRET 0002H
CARGUMENT 46H 0002H 0028H "panid" 02H 00H 01H
CARGUMENT 46H 0002H 0025H "addr" 04H 03H 00H 00H 00H

;;	mach.tx.dst.panid.enb = true;
CLINEA 0000H 0001H 02B9H 0002H 001EH
	mov	r0,	#01h
	st	r0,	NEAR _mach+020h

;;	mach.tx.dst.panid.data = panid;
CLINEA 0000H 0001H 02BAH 0002H 0020H
	st	er8,	NEAR _mach+022h

;;	mach.tx.dst.addr_type = IEEE802154_FC_ADDR_IEEE;
CLINEA 0000H 0001H 02BBH 0002H 0031H
	mov	r0,	#03h
	st	r0,	NEAR _mach+024h

;;	memcpy(mach.tx.dst.addr.ieee_addr,addr,8);
CLINEA 0000H 0001H 02BCH 0002H 002BH
	mov	er0,	#8 
	push	er0
	mov	r0,	#BYTE1 OFFSET (_mach+026h)
	mov	r1,	#BYTE2 OFFSET (_mach+026h)
	bl	_memcpy_nn
	add	sp,	#2 

;;	return STATUS_OK;
CLINEA 0000H 0001H 02CDH 0002H 0012H
CBLOCKEND 146 2 718

;;}
CLINEA 0000H 0000H 02CEH 0001H 0001H
	mov	er0,	#0 
	pop	er8
	pop	pc
CBLOCKEND 146 1 718
CFUNCTIONEND 146


	rseg $$mach_set_src_addr$mach
CFUNCTION 148

_mach_set_src_addr	:
CBLOCK 148 1 726

;;{
CLINEA 0000H 0001H 02D6H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	push	er4
	mov	r8,	r0
CBLOCK 148 2 726
CRET 0004H
CARGUMENT 46H 0001H 001CH "addr_type" 02H 00H 00H
CLOCAL 47H 0002H 0026H 0002H "status" 02H 00H 01H

;;	int status=STATUS_OK;
CLINEA 0000H 0001H 02D7H 0002H 0016H
	mov	er4,	#0 	;; _lstatus$0

;;	switch(addr_type)
CLINEA 0000H 0001H 02D8H 0002H 0012H
CBLOCK 148 3 729
	cmp	r8,	#00h
	beq	_$L268

;;	switch(addr_type)
CLINEA 0000H 0000H 02D8H 0002H 0012H
	cmp	r8,	#01h
	beq	_$L269

;;	switch(addr_type)
CLINEA 0000H 0000H 02D8H 0002H 0012H
	cmp	r8,	#02h
	beq	_$L270

;;	switch(addr_type)
CLINEA 0000H 0000H 02D8H 0002H 0012H
	cmp	r8,	#03h
	beq	_$L271

;;			status = -EINVAL;
CLINEA 0000H 0001H 02F2H 0004H 0014H
	mov	er4,	#-22	;; _lstatus$0
CBLOCKEND 148 3 756

;;	}
CLINEA 0000H 0000H 02F4H 0002H 0002H
_$L266 :

;;	return status;
CLINEA 0000H 0001H 02F5H 0002H 000FH
	mov	er0,	er4
CBLOCKEND 148 2 758

;;}
CLINEA 0000H 0000H 02F6H 0001H 0001H
	pop	er4
	pop	er8
	pop	pc

;;		case 0:
CLINEA 0000H 0001H 02DAH 0003H 0009H
_$L268 :

;;			mach.tx.src.panid.enb = true;
CLINEA 0000H 0001H 02DBH 0004H 0020H
	mov	r0,	#01h
	st	r0,	NEAR _mach+02eh

;;			mach.tx.src.panid.data = mach.my_addr.pan_id;
CLINEA 0000H 0001H 02DCH 0004H 0030H
	l	er0,	NEAR _mach+04h
	st	er0,	NEAR _mach+030h

;;			mach.tx.src.addr_type = IEEE802154_FC_ADDR_NONE;
CLINEA 0000H 0001H 02DDH 0004H 0033H
	mov	r0,	#00h
	st	r0,	NEAR _mach+032h

;;			break;
CLINEA 0000H 0001H 02DEH 0004H 0009H
	bal	_$L266

;;		case 1:
CLINEA 0000H 0001H 02DFH 0003H 0009H
_$L269 :

;;			mach.tx.src.panid.enb = true;
CLINEA 0000H 0001H 02E0H 0004H 0020H
	mov	r0,	#01h
	st	r0,	NEAR _mach+02eh

;;			mach.tx.src.panid.data = mach.my_addr.pan_id;
CLINEA 0000H 0001H 02E1H 0004H 0030H
	l	er0,	NEAR _mach+04h
	st	er0,	NEAR _mach+030h

;;			mach.tx.src.addr_type = IEEE802154_FC_ADDR_LDD;
CLINEA 0000H 0001H 02E2H 0004H 0032H
	mov	r0,	#01h
	st	r0,	NEAR _mach+032h

;;			mach.tx.src.addr.short_addr = mach.my_addr.lddn_addr;
CLINEA 0000H 0001H 02E3H 0004H 0038H
	l	r0,	NEAR _mach+03h
	mov	r1,	#00h
	st	er0,	NEAR _mach+034h

;;			break;
CLINEA 0000H 0001H 02E4H 0004H 0009H
	bal	_$L266

;;		case 2:
CLINEA 0000H 0001H 02E5H 0003H 0009H
_$L270 :

;;			mach.tx.src.panid.enb = true;
CLINEA 0000H 0001H 02E6H 0004H 0020H
	mov	r0,	#01h
	st	r0,	NEAR _mach+02eh

;;			mach.tx.src.panid.data = mach.my_addr.pan_id;
CLINEA 0000H 0001H 02E7H 0004H 0030H
	l	er0,	NEAR _mach+04h
	st	er0,	NEAR _mach+030h

;;			mach.tx.src.addr_type = IEEE802154_FC_ADDR_SHORT;
CLINEA 0000H 0001H 02E8H 0004H 0034H
	mov	r0,	#02h
	st	r0,	NEAR _mach+032h

;;			mach.tx.src.addr.short_addr = mach.my_addr.short_addr;
CLINEA 0000H 0001H 02E9H 0004H 0039H
	l	er0,	NEAR _mach+06h
	st	er0,	NEAR _mach+034h

;;			break;
CLINEA 0000H 0001H 02EAH 0004H 0009H
	bal	_$L266

;;		case 3:
CLINEA 0000H 0001H 02EBH 0003H 0009H
_$L271 :

;;			mach.tx.src.panid.enb = mach.my_addr.pan_coord;
CLINEA 0000H 0001H 02ECH 0004H 0032H
	l	r0,	NEAR _mach+02h
	st	r0,	NEAR _mach+02eh

;;			mach.tx.src.panid.data = mach.my_addr.pan_id;
CLINEA 0000H 0001H 02EDH 0004H 0030H
	l	er0,	NEAR _mach+04h
	st	er0,	NEAR _mach+030h

;;			mach.tx.src.addr_type = IEEE802154_FC_ADDR_IEEE;
CLINEA 0000H 0001H 02EEH 0004H 0033H
	mov	r0,	#03h
	st	r0,	NEAR _mach+032h

;;			memcpy(mach.tx.src.addr.ieee_addr, mach.my_addr.ieee_addr,8);
CLINEA 0000H 0001H 02EFH 0004H 0040H
	mov	er0,	#8 
	push	er0
	mov	r2,	#BYTE1 OFFSET (_mach+08h)
	mov	r3,	#BYTE2 OFFSET (_mach+08h)
	mov	r0,	#BYTE1 OFFSET (_mach+034h)
	mov	r1,	#BYTE2 OFFSET (_mach+034h)
	bl	_memcpy_nn
	add	sp,	#2 

;;			break;
CLINEA 0000H 0001H 02F0H 0004H 0009H
	b	_$L266
CBLOCKEND 148 1 758
CFUNCTIONEND 148


	rseg $$mach_set_dst_short_addr$mach
CFUNCTION 147

_mach_set_dst_short_addr	:
CBLOCK 147 1 766

;;{
CLINEA 0000H 0001H 02FEH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	er8
	mov	er8,	er0
CBLOCK 147 2 766
CARGUMENT 46H 0002H 0028H "panid" 02H 00H 01H
CARGUMENT 46H 0002H 0025H "addr" 02H 00H 01H

;;	mach.tx.dst.panid.enb = true;
CLINEA 0000H 0001H 02FFH 0002H 001EH
	mov	r0,	#01h
	st	r0,	NEAR _mach+020h

;;	mach.tx.dst.panid.data = panid;
CLINEA 0000H 0001H 0300H 0002H 0020H
	st	er8,	NEAR _mach+022h

;;	mach.tx.dst.addr_type = IEEE802154_FC_ADDR_SHORT;
CLINEA 0000H 0001H 0301H 0002H 0032H
	mov	r0,	#02h
	st	r0,	NEAR _mach+024h

;;	mach.tx.dst.addr.short_addr = addr;
CLINEA 0000H 0001H 0302H 0002H 0024H
	st	er2,	NEAR _mach+026h

;;	return STATUS_OK;
CLINEA 0000H 0001H 0304H 0002H 0012H
CBLOCKEND 147 2 773

;;}
CLINEA 0000H 0000H 0305H 0001H 0001H
	mov	er0,	#0 
	pop	er8
	rt
CBLOCKEND 147 1 773
CFUNCTIONEND 147


	rseg $$mach_set_my_short_addr$mach
CFUNCTION 145

_mach_set_my_short_addr	:
CBLOCK 145 1 792

;;{
CLINEA 0000H 0001H 0318H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_filt$2	set	-14
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-014
	push	bp
CBLOCK 145 2 792
CRET 0012H
CARGUMENT 46H 0002H 0024H "panid" 02H 00H 01H
CARGUMENT 46H 0002H 0025H "short_addr" 02H 00H 01H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	mach.my_addr.pan_id = panid;
CLINEA 0000H 0001H 031AH 0002H 001DH
	st	er0,	NEAR _mach+04h

;;	mach.my_addr.short_addr = short_addr;
CLINEA 0000H 0001H 031BH 0002H 0026H
	st	er2,	NEAR _mach+06h

;;	if((panid == 0xffff) || (panid == 0xfffe) || (short_addr == 0xffff))
CLINEA 0000H 0001H 031CH 0002H 0045H
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	beq	_$L275
	cmp	r0,	#0feh
	cmpc	r1,	#0ffh
	beq	_$L275
	cmp	r2,	#0ffh
	cmpc	r3,	#0ffh
	bne	_$L274
_$L275 :
CBLOCK 145 3 797

;;		mach.my_addr.pan_coord = false;
CLINEA 0000H 0001H 031EH 0003H 0021H
	mov	r0,	#00h
CBLOCKEND 145 3 800

;;	} else {
CLINEA 0000H 0000H 0320H 0002H 0009H
	bal	_$L284
_$L274 :
CBLOCK 145 4 800

;;		mach.my_addr.pan_coord = true;
CLINEA 0000H 0001H 0321H 0003H 0020H
	mov	r0,	#01h
CBLOCKEND 145 4 802

;;	}
CLINEA 0000H 0000H 0322H 0002H 0002H
_$L284 :
	st	r0,	NEAR _mach+02h

;;	if(!mach.macl->promiscuousMode)
CLINEA 0000H 0000H 0324H 0002H 0020H
	l	bp,	NEAR _mach
	l	r0,	12[bp]
	bne	_$L285
CBLOCK 145 5 805
CLOCAL 43H 000EH 000EH 0005H "filt" 04H 00H 05H 07H 00H

;;		filt.pan_id = mach.my_addr.pan_id;
CLINEA 0000H 0001H 0327H 0003H 0024H
	l	er0,	NEAR _mach+04h
	st	er0,	_filt$2[fp]

;;		filt.pan_coord = mach.my_addr.pan_coord;
CLINEA 0000H 0001H 0328H 0003H 002AH
	l	r0,	NEAR _mach+02h
	st	r0,	_filt$2+0ch[fp]

;;		filt.short_addr = mach.my_addr.short_addr;
CLINEA 0000H 0001H 0329H 0003H 002CH
	l	er0,	NEAR _mach+06h
	st	er0,	_filt$2+02h[fp]

;;		memcpy(filt.ieee_addr,mach.my_addr.ieee_addr,8);
CLINEA 0000H 0001H 032AH 0003H 0032H
	mov	er0,	#8 
	push	er0
	mov	r2,	#BYTE1 OFFSET (_mach+08h)
	mov	r3,	#BYTE2 OFFSET (_mach+08h)
	mov	er0,	fp
	add	er0,	#-10
	bl	_memcpy_nn
	add	sp,	#2 

;;		macl_set_hw_addr_filt(&filt,0x0f);			// update all of addr filter
CLINEA 0000H 0001H 032BH 0003H 0043H
	mov	er0,	#15
	mov	er2,	#0 
	push	xr0
	mov	er0,	fp
	add	er0,	#-14
	bl	_macl_set_hw_addr_filt
	add	sp,	#4 
CBLOCKEND 145 5 812

;;	}
CLINEA 0000H 0000H 032CH 0002H 0002H
_$L285 :

;;	return status;
CLINEA 0000H 0001H 032DH 0002H 000FH
CBLOCKEND 145 2 814

;;}
CLINEA 0000H 0000H 032EH 0001H 0001H
	mov	er0,	#0 
	pop	bp
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 145 1 814
CFUNCTIONEND 145


	rseg $$mach_set_coord_addr$mach
CFUNCTION 379

_mach_set_coord_addr	:
CBLOCK 379 1 831

;;{
CLINEA 0000H 0001H 033FH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_ieee_addr$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	push	er4
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 379 2 831
CRET 0008H
CARGUMENT 46H 0002H 0028H "panid" 02H 00H 01H
CARGUMENT 46H 0002H 0029H "short_addr" 02H 00H 01H
CARGUMENT 42H 0002H 0004H "ieee_addr" 04H 03H 00H 00H 00H
CLOCAL 47H 0002H 0026H 0002H "status" 02H 00H 01H

;;	int status=STATUS_OK;
CLINEA 0000H 0001H 0340H 0002H 0016H
	mov	er4,	#0 	;; _lstatus$0

;;	mach.coord_addr.pan_id = panid;
CLINEA 0000H 0001H 0342H 0002H 0020H
	st	er8,	NEAR _mach+012h

;;	mach.coord_addr.short_addr = short_addr;
CLINEA 0000H 0001H 0343H 0002H 0029H
	st	er2,	NEAR _mach+014h

;;	if(ieee_addr) memcpy(mach.coord_addr.ieee_addr,ieee_addr,8);
CLINEA 0000H 0001H 0344H 0002H 003DH
	l	er0,	_ieee_addr$4[fp]
	beq	_$L290
	mov	er0,	#8 
	push	er0
	l	er2,	_ieee_addr$4[fp]
	mov	r0,	#BYTE1 OFFSET (_mach+016h)
	mov	r1,	#BYTE2 OFFSET (_mach+016h)
	bl	_memcpy_nn
	add	sp,	#2 
_$L290 :

;;			(short_addr == 0xffff) || (short_addr == 0xfffe)) {
CLINEA 0000H 0001H 0346H 0004H 0036H
	cmp	r8,	#0ffh
	cmpc	r9,	#0ffh
	beq	_$L293
	cmp	r8,	#0feh
	cmpc	r9,	#0ffh
	beq	_$L293
	cmp	r10,	#0ffh
	cmpc	r11,	#0ffh
	beq	_$L293
	cmp	r10,	#0feh
	cmpc	r11,	#0ffh
	bne	_$L292
_$L293 :
CBLOCK 379 3 838

;;		mach.coord_addr.pan_coord = false;
CLINEA 0000H 0001H 0347H 0003H 0024H
	mov	r0,	#00h
	st	r0,	NEAR _mach+010h

;;		status = -EINVAL;
CLINEA 0000H 0001H 0348H 0003H 0013H
	mov	er4,	#-22	;; _lstatus$0
CBLOCKEND 379 3 841

;;	}
CLINEA 0000H 0000H 0349H 0002H 0002H
_$L292 :

;;	mach.coord_addr.pan_coord = true;
CLINEA 0000H 0001H 034AH 0002H 0022H
	mov	r0,	#01h
	st	r0,	NEAR _mach+010h

;;	return status;
CLINEA 0000H 0001H 034CH 0002H 000FH
	mov	er0,	er4
CBLOCKEND 379 2 845

;;}
CLINEA 0000H 0000H 034DH 0001H 0001H
	pop	er4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 379 1 845
CFUNCTIONEND 379


	rseg $$mach_set_promiscuous$mach
CFUNCTION 155

_mach_set_promiscuous	:
CBLOCK 155 1 848

;;{
CLINEA 0000H 0001H 0350H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 155 2 848
CRET 0000H
CARGUMENT 46H 0001H 0014H "on" 02H 00H 00H
CLOCAL 47H 0002H 0024H 0002H "status" 02H 00H 01H

;;	if (macl_set_promiscuous_mode(on)==STATUS_OK)
CLINEA 0000H 0001H 0352H 0002H 002EH
	bl	_macl_set_promiscuous_mode
	mov	er0,	er0
	bne	_$L306
CBLOCK 155 3 851

;;		status = STATUS_OK;
CLINEA 0000H 0001H 0354H 0003H 0015H
	mov	er0,	#0 
CBLOCKEND 155 3 853

;;	} else {
CLINEA 0000H 0000H 0355H 0002H 0009H
	pop	pc
_$L306 :
CBLOCK 155 4 853

;;		status = -EIO;
CLINEA 0000H 0001H 0356H 0003H 0010H
	mov	er0,	#-5
CBLOCKEND 155 4 855

;;	}
CLINEA 0000H 0000H 0357H 0002H 0002H
_$L308 :

;;	return status;
CLINEA 0000H 0001H 0358H 0002H 000FH
CBLOCKEND 155 2 857

;;}
CLINEA 0000H 0000H 0359H 0001H 0001H
	pop	pc
CBLOCKEND 155 1 857
CFUNCTIONEND 155


	rseg $$mach_tx$mach
CFUNCTION 149

_mach_tx	:
CBLOCK 149 1 860

;;{
CLINEA 0000H 0001H 035CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_fc$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	bp
	push	er8
	mov	r8,	r0
CBLOCK 149 2 860
CRET 0006H
CARGUMENT 46H 0001H 001CH "addr_type" 02H 00H 00H
CARGUMENT 47H 0002H 0025H "txbuf" 06H 03H 00H 00H 05H 02H 00H
CARGUMENT 43H 0002H 0004H "fc" 04H 00H 05H 0BH 00H
CLOCAL 47H 0002H 0025H 0002H "status" 02H 00H 01H

;;	mach.tx.raw.data = mach.macl->phy->out.data;
CLINEA 0000H 0001H 0360H 0002H 002DH
	l	bp,	NEAR _mach
	l	bp,	30[bp]
	l	er0,	10[bp]
	st	er0,	NEAR _mach+046h

;;	mach.tx.raw.size = mach.macl->phy->out.size;
CLINEA 0000H 0001H 0361H 0002H 002DH
	l	bp,	NEAR _mach
	l	bp,	30[bp]
	l	er0,	14[bp]
	st	er0,	NEAR _mach+04ah

;;	mach.tx.payload.data = txbuf->data;
CLINEA 0000H 0001H 0362H 0002H 0024H
	l	er0,	[er2]
	st	er0,	NEAR _mach+040h

;;	mach.tx.payload.size = txbuf->size;
CLINEA 0000H 0001H 0363H 0002H 0024H
	l	er0,	04h[er2]
	st	er0,	NEAR _mach+044h

;;	mach.tx.payload.len = txbuf->len;
CLINEA 0000H 0001H 0364H 0002H 0022H
	l	er0,	02h[er2]
	st	er0,	NEAR _mach+042h

;;	mach.tx.addr_type = addr_type;
CLINEA 0000H 0001H 0365H 0002H 001FH
	st	r8,	NEAR _mach+03dh

;;	memcpy(&mach.tx.fc.fc_bit,&fc,sizeof(fc)) ;
CLINEA 0000H 0001H 0366H 0002H 002CH
	mov	er0,	#2 
	push	er0
	mov	er2,	fp
	add	r2,	#BYTE1 4 
	addc	r3,	#BYTE2 4 
	mov	r0,	#BYTE1 OFFSET (_mach+01eh)
	mov	r1,	#BYTE2 OFFSET (_mach+01eh)
	bl	_memcpy_nn
	add	sp,	#2 

;;	if((status = mach_make_header(&mach.tx))!=STATUS_OK) {
CLINEA 0000H 0000H 0369H 0002H 0037H
	mov	r0,	#BYTE1 OFFSET (_mach+01eh)
	mov	r1,	#BYTE2 OFFSET (_mach+01eh)
	bl	_mach_make_header
	mov	er2,	er0	;; _lstatus$0
	mov	er0,	er0
	bne	_$L315
CBLOCK 149 3 873

;;	mach.sending = true;
CLINEA 0000H 0001H 0372H 0002H 0015H
	mov	r0,	#01h
	st	r0,	NEAR _mach+0f7h

;;	status = macl_xmit_sync(mach.tx.raw);
CLINEA 0000H 0000H 0373H 0002H 0026H
	mov	er0,	#4 
_$M48 :
	l	er2,	NEAR _mach+046h[er0]
	push	er2
	add	er0,	#-2
	blt	_$M48
	bl	_macl_xmit_sync
	add	sp,	#6 
	mov	er2,	er0	;; _lstatus$0

;;	mach.sending = false;
CLINEA 0000H 0001H 0375H 0002H 0016H
	mov	r0,	#00h
	st	r0,	NEAR _mach+0f7h

;;	if(status == STATUS_OK) {
CLINEA 0000H 0001H 0376H 0002H 001AH
	mov	er2,	er2
	bne	_$L313
CBLOCK 149 4 886

;;		status = mach.tx.rssi;
CLINEA 0000H 0001H 0377H 0003H 0018H
	l	r0,	NEAR _mach+03eh
	mov	r1,	#00h
	mov	er2,	er0	;; _lstatus$0
CBLOCKEND 149 4 888

;;	} else {
CLINEA 0000H 0000H 0378H 0002H 0009H
	bal	_$L315
_$L313 :
CBLOCK 149 5 888

;;		mach.tx.rssi = 0;
CLINEA 0000H 0001H 0379H 0003H 0013H
	mov	r0,	#00h
	st	r0,	NEAR _mach+03eh
CBLOCKEND 149 5 890

;;	}
CLINEA 0000H 0000H 037AH 0002H 0002H
_$L315 :

;;	return status;
CLINEA 0000H 0001H 037DH 0002H 000FH
	mov	er0,	er2
CBLOCKEND 149 3 894
CBLOCKEND 149 2 894

;;}
CLINEA 0000H 0000H 037EH 0001H 0001H
	pop	er8
	pop	bp
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 149 1 894
CFUNCTIONEND 149


	rseg $$mach_ed$mach
CFUNCTION 153

_mach_ed	:
CBLOCK 153 1 897

;;{
CLINEA 0000H 0001H 0381H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 153 2 897
CARGUMENT 46H 0002H 0024H "ed" 04H 03H 00H 00H 00H

;;	return macl_ed(ed);
CLINEA 0000H 0001H 0382H 0002H 0014H
	b	_macl_ed
CBLOCKEND 153 2 899
CLINEA 0000H 0000H 0383H 0001H 0001H
CBLOCKEND 153 1 899
CFUNCTIONEND 153


	rseg $$mach_sleep$mach
CFUNCTION 143

_mach_sleep	:
CBLOCK 143 1 902

;;{
CLINEA 0000H 0001H 0386H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 143 2 902
CARGUMENT 46H 0001H 0014H "on" 02H 00H 00H

;;	return macl_sleep(on);
CLINEA 0000H 0001H 0387H 0002H 0017H
	b	_macl_sleep
CBLOCKEND 143 2 904
CLINEA 0000H 0000H 0388H 0001H 0001H
CBLOCKEND 143 1 904
CFUNCTIONEND 143


	rseg $$macl_rx_irq$mach
CFUNCTION 137

_macl_rx_irq	:
CBLOCK 137 1 917

;;{
CLINEA 0000H 0001H 0395H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	push	bp
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 137 2 917
CRET 0006H
CARGUMENT 47H 0002H 0028H "rx" 06H 03H 00H 00H 05H 02H 00H
CARGUMENT 47H 0002H 0029H "ack" 06H 03H 00H 00H 05H 02H 00H
CLOCAL 4BH 0002H 0000H 0002H "status" 02H 00H 01H

;;	if(rx) {
CLINEA 0000H 0001H 0398H 0002H 0009H
	mov	er0,	er0
	beq	_$L319
CBLOCK 137 3 920

;;		if(ack) {
CLINEA 0000H 0001H 039AH 0003H 000BH
	mov	er2,	er2
	beq	_$L321
CBLOCK 137 4 922

;;			ack->data = NULL;
CLINEA 0000H 0001H 039CH 0004H 0014H
	mov	er0,	#0 
	st	er0,	[er2]

;;			ack->len = 0;
CLINEA 0000H 0001H 039DH 0004H 0010H
	st	er0,	02h[er2]

;;			ack->size = mach.ack.raw.size;
CLINEA 0000H 0001H 039EH 0004H 0021H
	l	er0,	NEAR _mach+0ech
	st	er0,	04h[er2]
CBLOCKEND 137 4 927

;;		}
CLINEA 0000H 0000H 039FH 0003H 0003H
_$L321 :

;;		if(rx->len == 0) {
CLINEA 0000H 0001H 03A1H 0003H 0014H
	l	er0,	02h[er8]
	bne	_$L323
CBLOCK 137 5 929

;;			return -1;
CLINEA 0000H 0001H 03A2H 0004H 000DH
	mov	er0,	#-1
CBLOCKEND 137 5 931
CBLOCKEND 137 2 1036

;;}
CLINEA 0000H 0001H 040CH 0001H 0001H
_$L318 :
	pop	bp
	pop	xr8
	pop	pc

;;		}
CLINEA 0000H 0000H 03A3H 0003H 0003H
_$L323 :

;;		mach.rx.input.data = rx->data;
CLINEA 0000H 0001H 03A6H 0003H 0020H
	l	er0,	[er8]
	st	er0,	NEAR _mach+082h

;;		mach.rx.input.len = rx->len-1;
CLINEA 0000H 0001H 03A7H 0003H 0020H
	l	er0,	02h[er8]
	add	er0,	#-1
	st	er0,	NEAR _mach+084h

;;		mach.rx.input.size = rx->size;
CLINEA 0000H 0001H 03A8H 0003H 0020H
	l	er0,	04h[er8]
	st	er0,	NEAR _mach+086h

;;		mach.rx.rssi = rx->data[rx->len-1];
CLINEA 0000H 0001H 03A9H 0003H 0025H
	l	er0,	02h[er8]
	l	bp,	[er8]
	add	er0,	bp
	l	r0,	0ffffh[er0]
	st	r0,	NEAR _mach+074h

;;		if(mach.macl->promiscuousMode) {
CLINEA 0000H 0001H 03B1H 0003H 0022H
	l	bp,	NEAR _mach
	l	r0,	12[bp]
	beq	_$L325
CBLOCK 137 6 945

;;			} else {									// other data type
CLINEA 0000H 0000H 03E1H 0004H 0026H
_$L361 :
CBLOCK 137 13 993
CBLOCKEND 137 13 994

;;	} else {
CLINEA 0000H 0000H 03E4H 0002H 0009H
	bal	_$L371
_$L319 :
CBLOCK 137 14 996

;;		if(mach.rx.raw.size >= mach.rx.input.len) {
CLINEA 0000H 0001H 03E6H 0003H 002DH
	l	er0,	NEAR _mach+080h
	l	bp,	NEAR _mach+084h
	cmp	er0,	bp
	blt	_$L368
CBLOCK 137 15 998

;;			memcpy(mach.rx.raw.data,mach.rx.input.data,mach.rx.input.len);
CLINEA 0000H 0001H 03E8H 0004H 0041H
	push	bp
	l	er2,	NEAR _mach+082h
	l	er0,	NEAR _mach+07ch
	bl	_memcpy_nn
	add	sp,	#2 

;;			mach.rx.raw.len = mach.rx.input.len;
CLINEA 0000H 0001H 03E9H 0004H 0027H
	l	er0,	NEAR _mach+084h
	st	er0,	NEAR _mach+07eh
CBLOCKEND 137 15 1002

;;					(mach.rx.fc.fc_bit.frame_type == IEEE802154_FC_TYPE_CMD)))) {
CLINEA 0000H 0000H 03F7H 0006H 0042H
	l	bp,	NEAR _mach
	l	r0,	12[bp]
	bne	_$L372

;;				((mach_match_seq_num()==false) && 
CLINEA 0000H 0001H 03F5H 0005H 0026H
	bl	_mach_match_seq_num

;;					(mach.rx.fc.fc_bit.frame_type == IEEE802154_FC_TYPE_CMD)))) {
CLINEA 0000H 0000H 03F7H 0006H 0042H
	cmp	r0,	#00h
	bne	_$L371
	l	r0,	NEAR _mach+054h
	and	r0,	#07h
	cmp	r0,	#01h
	beq	_$L372
	l	r0,	NEAR _mach+054h
	and	r0,	#07h
	cmp	r0,	#03h
	bne	_$L371
_$L372 :
CBLOCK 137 17 1015

;;			memcpy(&mach.rx_prev,&mach.rx,sizeof(mach.rx));
CLINEA 0000H 0001H 03F9H 0004H 0032H
	mov	er0,	#54
	push	er0
	mov	r2,	#BYTE1 OFFSET (_mach+054h)
	mov	r3,	#BYTE2 OFFSET (_mach+054h)
	mov	r0,	#BYTE1 OFFSET (_mach+08ah)
	mov	r1,	#BYTE2 OFFSET (_mach+08ah)
	bl	_memcpy_nn
	add	sp,	#2 

;;			mach_rx_irq(&mach.rx);				// report data to upper layer
CLINEA 0000H 0001H 0401H 0004H 003AH
	mov	r0,	#BYTE1 OFFSET (_mach+054h)
	mov	r1,	#BYTE2 OFFSET (_mach+054h)
	bl	_mach_rx_irq

;;		} else {								// match sequence number
CLINEA 0000H 0000H 0402H 0003H 002AH
_$L371 :
CBLOCK 137 18 1026
CBLOCKEND 137 18 1032
CBLOCKEND 137 14 1033
CBLOCKEND 137 17 1036

;;	return STATUS_OK;
CLINEA 0000H 0001H 040BH 0002H 0012H
	mov	er0,	#0 
	b	_$L318
CBLOCKEND 137 3 1036
CBLOCKEND 137 6 1036

;;		} else {
CLINEA 0000H 0000H 03EAH 0003H 000AH
_$L368 :
CBLOCK 137 16 1002

;;			return STATUS_OK;
CLINEA 0000H 0001H 03F2H 0004H 0014H
	mov	er0,	#0 
	b	_$L318
CBLOCKEND 137 16 1011

;;		} else {
CLINEA 0000H 0000H 03B2H 0003H 000AH
_$L325 :

;;			if((status = mach_parse_data(&mach.rx)!= STATUS_OK) ||
CLINEA 0000H 0000H 03B5H 0004H 0039H
	mov	r0,	#BYTE1 OFFSET (_mach+054h)
	mov	r1,	#BYTE2 OFFSET (_mach+054h)
	bl	_mach_parse_data

;;					 (memcmp(mach.rx.dst.addr.ieee_addr,broadcast_addr,8) !=0))) {
CLINEA 0000H 0000H 03B8H 0007H 0043H
	mov	er0,	er0
	bne	_$L329
	l	r0,	NEAR _mach+05ah
	cmp	r0,	#03h
	bne	_$L328

;;					 (memcmp(mach.rx.dst.addr.ieee_addr,mach.my_addr.ieee_addr,8)!=0) &&
CLINEA 0000H 0001H 03B7H 0007H 0049H
	mov	er0,	#8 
	push	er0
	mov	r2,	#BYTE1 OFFSET (_mach+08h)
	mov	r3,	#BYTE2 OFFSET (_mach+08h)
	mov	r0,	#BYTE1 OFFSET (_mach+05ch)
	mov	r1,	#BYTE2 OFFSET (_mach+05ch)
	bl	_memcmp_nn
	add	sp,	#2 

;;					 (memcmp(mach.rx.dst.addr.ieee_addr,broadcast_addr,8) !=0))) {
CLINEA 0000H 0000H 03B8H 0007H 0043H
	mov	er0,	er0
	beq	_$L328
	mov	er0,	#8 
	push	er0
	mov	r2,	#BYTE1 OFFSET _broadcast_addr
	mov	r3,	#BYTE2 OFFSET _broadcast_addr
	mov	r0,	#BYTE1 OFFSET (_mach+05ch)
	mov	r1,	#BYTE2 OFFSET (_mach+05ch)
	bl	_memcmp_nn
	add	sp,	#2 
	mov	er0,	er0
	beq	_$L328
_$L329 :
CBLOCK 137 8 952

;;				return -1;
CLINEA 0000H 0001H 03BEH 0005H 000EH
	mov	er0,	#-1
	b	_$L318
CBLOCKEND 137 8 959

;;			}
CLINEA 0000H 0000H 03BFH 0004H 0004H
_$L328 :

;;					(mach.rx.fc.fc_bit.frame_type == IEEE802154_FC_TYPE_CMD)) {
CLINEA 0000H 0001H 03C2H 0006H 0040H
	l	r0,	NEAR _mach+054h
	and	r0,	#07h
	cmp	r0,	#01h
	beq	_$L342
	l	r0,	NEAR _mach+054h
	and	r0,	#07h
	cmp	r0,	#03h
	bne	_$L341
_$L342 :

;;						(!mach.macl->promiscuousMode) ) {
CLINEA 0000H 0000H 03C6H 0007H 0027H
	tb	NEAR (_mach+054h).5
	bne	_$M52
	b	_$L361
_$M52 :
	mov	er10,	er10
	bne	_$M53
	b	_$L361
_$M53 :
	l	bp,	NEAR _mach
	l	r0,	12[bp]
	beq	_$M54
	b	_$L361
_$M54 :
CBLOCK 137 10 966

;;					if(mach_make_ack_header()) {
CLINEA 0000H 0001H 03C7H 0006H 0021H
	bl	_mach_make_ack_header
	cmp	r0,	#00h
	bne	_$M55
	b	_$L361
_$M55 :
CBLOCK 137 11 967

;;						ack->data = mach.ack.raw.data;
CLINEA 0000H 0001H 03C8H 0007H 0024H
	l	er0,	NEAR _mach+0e8h
	st	er0,	[er10]

;;						ack->len = mach.ack.raw.len;
CLINEA 0000H 0001H 03C9H 0007H 0022H
	l	er0,	NEAR _mach+0eah
	st	er0,	02h[er10]

;;						ack->size = mach.ack.raw.size;
CLINEA 0000H 0001H 03CAH 0007H 0024H
	l	er0,	NEAR _mach+0ech
	st	er0,	04h[er10]

;;						return STATUS_OK;
CLINEA 0000H 0001H 03D1H 0007H 0017H
	mov	er0,	#0 
	b	_$L318
CBLOCKEND 137 11 978

;;					}
CLINEA 0000H 0000H 03D2H 0006H 0006H
CBLOCKEND 137 10 979

;;			else if (mach.rx.fc.fc_bit.frame_type == IEEE802154_FC_TYPE_ACK) {
CLINEA 0000H 0001H 03D6H 0004H 0045H
_$L341 :
	l	r0,	NEAR _mach+054h
	and	r0,	#07h
	cmp	r0,	#02h
	beq	_$M56
	b	_$L371
_$M56 :
CBLOCK 137 12 982

;;				mach.tx.rssi = mach.rx.rssi;
CLINEA 0000H 0001H 03D7H 0005H 0020H
	l	r0,	NEAR _mach+074h
	st	r0,	NEAR _mach+03eh

;;				rx_enhance_ack.len = (rx_enhance_ack.size < mach.rx.payload.len) ? rx_enhance_ack.size : mach.rx.payload.len;
CLINEA 0000H 0000H 03D8H 0005H 0071H
	l	er0,	NEAR _rx_enhance_ack+04h
	l	er2,	NEAR _mach+078h
	cmp	er0,	er2
	blt	_$L365
	mov	er0,	er2
_$L365 :
	st	er0,	NEAR _rx_enhance_ack+02h

;;				memcpy(rx_enhance_ack.data,&mach.rx.input.data[mach.rx.payload_offset],rx_enhance_ack.len);
CLINEA 0000H 0001H 03D9H 0005H 005FH
	push	er0
	l	er2,	NEAR _mach+082h
	l	er0,	NEAR _mach+088h
	add	er2,	er0
	l	er0,	NEAR _rx_enhance_ack
	bl	_memcpy_nn
	add	sp,	#2 

;;				return STATUS_OK;
CLINEA 0000H 0001H 03E0H 0005H 0015H
	mov	er0,	#0 
	b	_$L318
CBLOCKEND 137 12 993
CBLOCKEND 137 1 1036
CFUNCTIONEND 137


	rseg $$mach_get_enhance_ack$mach
CFUNCTION 156

_mach_get_enhance_ack	:
CBLOCK 156 1 1038

;;void mach_get_enhance_ack(uint8_t **data,int *size){
CLINEA 0000H 0001H 040EH 0001H 0034H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	er10
	mov	er10,	er2
CBLOCK 156 2 1038
CARGUMENT 46H 0002H 0024H "data" 06H 03H 00H 03H 00H 00H 00H
CARGUMENT 47H 0002H 0029H "size" 04H 03H 00H 00H 01H

;;	*data = rx_enhance_ack.data;
CLINEA 0000H 0001H 040FH 0002H 001DH
	l	er2,	NEAR _rx_enhance_ack
	st	er2,	[er0]

;;	*size = rx_enhance_ack.len;
CLINEA 0000H 0001H 0410H 0002H 001CH
	l	er2,	NEAR _rx_enhance_ack+02h
	st	er2,	[er10]
CBLOCKEND 156 2 1042

;;}
CLINEA 0000H 0000H 0412H 0001H 0001H
	pop	er10
	rt
CBLOCKEND 156 1 1042
CFUNCTIONEND 156


	rseg $$mach_set_enhance_ack$mach
CFUNCTION 157

_mach_set_enhance_ack	:
CBLOCK 157 1 1043

;;bool  mach_set_enhance_ack(uint8_t* data, int size) {
CLINEA 0000H 0001H 0413H 0001H 0035H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 157 2 1043
CARGUMENT 46H 0002H 0028H "data" 04H 03H 00H 00H 00H
CARGUMENT 47H 0002H 0029H "size" 02H 00H 01H
CLOCAL 46H 0001H 0016H 0002H "result" 02H 00H 00H

;;	bool result=false;
CLINEA 0000H 0001H 0414H 0002H 0013H
	mov	r2,	#00h	;; _lresult$0

;;	if((data == NULL) || (size == 0)) {
CLINEA 0000H 0001H 0415H 0002H 0024H
	mov	er8,	er8
	beq	_$L388
	mov	er10,	er10
	bne	_$L387
_$L388 :
CBLOCK 157 3 1045

;;		tx_enhance_ack.data = NULL;
CLINEA 0000H 0001H 0416H 0003H 001DH
	mov	er0,	#0 
	st	er0,	NEAR _tx_enhance_ack

;;		tx_enhance_ack.len = 0;
CLINEA 0000H 0001H 0417H 0003H 0019H
	st	er0,	NEAR _tx_enhance_ack+02h

;;		tx_enhance_ack.size = 0;
CLINEA 0000H 0001H 0418H 0003H 001AH
	st	er0,	NEAR _tx_enhance_ack+04h

;;	else if(size >= 0) {
CLINEA 0000H 0001H 041AH 0002H 0015H
	bal	_$L397
_$L387 :
	mov	er0,	er10
	bns	_$L395
CBLOCK 157 4 1050

;;		result = true;
CLINEA 0000H 0001H 041BH 0003H 0010H
	mov	r2,	#01h	;; _lresult$0

;;		tx_enhance_ack.data=data;
CLINEA 0000H 0001H 041CH 0003H 001BH
	st	er8,	NEAR _tx_enhance_ack

;;		tx_enhance_ack.len = size;
CLINEA 0000H 0001H 041DH 0003H 001CH
	st	er10,	NEAR _tx_enhance_ack+02h

;;		tx_enhance_ack.size = size;
CLINEA 0000H 0001H 041EH 0003H 001DH
	st	er10,	NEAR _tx_enhance_ack+04h
CBLOCKEND 157 4 1055

;;	} else {
CLINEA 0000H 0000H 041FH 0002H 0009H
	bal	_$L397
_$L395 :
CBLOCK 157 5 1055

;;		result = false;
CLINEA 0000H 0001H 0420H 0003H 0011H
	mov	r2,	#00h	;; _lresult$0
CBLOCKEND 157 5 1057

;;	}
CLINEA 0000H 0000H 0421H 0002H 0002H
_$L397 :

;;	return result;
CLINEA 0000H 0001H 0422H 0002H 000FH
	mov	r0,	r2
CBLOCKEND 157 3 1059
CBLOCKEND 157 2 1059

;;}
CLINEA 0000H 0000H 0423H 0001H 0001H
	pop	xr8
	rt
CBLOCKEND 157 1 1059
CFUNCTIONEND 157


	rseg $$mach_set_ack_tx_interval$mach
CFUNCTION 158

_mach_set_ack_tx_interval	:
CBLOCK 158 1 1060

;;void mach_set_ack_tx_interval(uint16_t interval){
CLINEA 0000H 0001H 0424H 0001H 0031H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 158 2 1060
CARGUMENT 46H 0002H 0024H "interval" 02H 00H 01H

;;	macl_set_ack_tx_interval(interval);
CLINEA 0000H 0001H 0425H 0002H 0024H
	b	_macl_set_ack_tx_interval
CBLOCKEND 158 2 1062
CLINEA 0000H 0001H 0426H 0001H 0001H
CBLOCKEND 158 1 1062
CFUNCTIONEND 158

	public _enb_dst_panid
	public _mach_parse_data
	public _mach_ed
	public _mach_set_enhance_ack
	public _mach_set_ack_tx_interval
	public _mach_tx
	public _mach_sleep
	public _mach_set_src_addr
	public _mach_set_promiscuous
	public _mach_init
	public _mach_set_my_short_addr
	public _macl_rx_irq
	public _addr_len
	public _mach_match_seq_num
	public _mach_setup
	public _mach_set_dst_short_addr
	public _get_mac_addr
	public _mach_stop
	public _mach_update_rx_data
	public _mach_get_enhance_ack
	public _mach_set_dst_ieee_addr
	public _mach_set_coord_addr
	public _mach_make_ack_header
	public _mach_start
	public _enb_src_panid
	extrn code near : _macl_set_ack_tx_interval
	extrn code near : _macl_set_csma_params
	extrn code near : _macl_sleep
	extrn code near : _macl_ed
	extrn code near : _macl_set_channel
	extrn code near : _macl_init
	extrn code near : _memcpy_nn
	extrn code near : _memset_n
	extrn code near : _mach_rx_irq
	extrn code near : _AES128_getStatus
	extrn code near : _memcmp_nn
	extrn code near : _HAL_I2C_read
	extrn code near : _macl_set_promiscuous_mode
	extrn code near : _macl_set_frame_retries
	extrn code near : _macl_set_hw_addr_filt
	extrn code near : _AES128_CBC_encrypt
	extrn code near : _macl_stop
	extrn code near : _macl_xmit_sync
	extrn code near : _macl_start
	extrn code near : _main

	rseg $$TABenb_dst_panid$mach
_enb_dst_panid :
	db	052h

	rseg $$TABenb_src_panid$mach
_enb_src_panid :
	db	04h

	rseg $$TABaddr_len$mach
_addr_len :
	db	00h
	db	01h
	db	02h
	db	08h

	rseg $$TABbroadcast_addr$mach
_broadcast_addr :
	db	0ffh
	db	0ffh
	db	0ffh
	db	0ffh
	db	0ffh
	db	0ffh
	db	0ffh
	db	0ffh

	rseg $$NVARmach
_rx_enhance_ack_buffer :
	ds	010h
_tx_ackbuf :
	ds	020h
_mach :
	ds	0fah
_rx_enhance_ack :
	ds	06h
_tx_enhance_ack :
	ds	06h

	end
