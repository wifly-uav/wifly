;; Compile Options : /TML620504F /MS /near /IC:\LAZURI~1\LIBRAR~1\BM1383 /IC:\LAZURI~1\LIBRAR~1\BM1422 /IC:\LAZURI~1\LIBRAR~1\HARDWA~1 /IC:\LAZURI~1\LIBRAR~1\HARDWA~2 /IC:\LAZURI~1\LIBRAR~1\KXG03_~1 /IC:\LAZURI~1\LIBRAR~1\VL53L0X /IC:\LAZURI~1\LIBRAR~1\Wire /IC:\LAZURI~1\hardware\LAZURI~2 /IC:\LAZURI~1\hardware\LAZURI~2\lazurite /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\clock /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\common /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\irq /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\lp /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\MCU_SM~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\wdt /IC:\LAZURI~1\hardware\LAZURI~2\sub_ghz\ /D_ML620Q504 /DLAZURITE_MINI /DLAZURITE_IDE /DSUBGHZ /DPWR_LED /DLDO_CNT /SS 512 /SL 65 /SD /Oa /Ot /W 3 /Faobj\ /Lv 
;; Version Number  : Ver.3.53.1
;; File Name       : print.c

	type (ML620504F) 
	model small, near
	$$NINITVAR segment data 2h #0h
	$$NINITTAB segment table 2h any
	$$TABPrint$print segment table 2h #0h
	$$printBuf$print segment code 2h #0h
	$$printBuf_d$print segment code 2h #0h
	$$printBuf_f$print segment code 2h #0h
	$$printBuf_l$print segment code 2h #0h
	$$printBuf_len$print segment code 2h #0h
	$$printBuf_ln$print segment code 2h #0h
	$$printBuf_status$print segment code 2h #0h
	$$printFloat$print segment code 2h #0h
	$$printNumber$print segment code 2h #0h
	$$print_init$print segment code 2h #0h
CVERSION 3.53.1
CGLOBAL 01H 03H 0000H "printBuf_d" 08H 02H 2FH 01H 83H 34H 00H 00H 01H
CGLOBAL 01H 03H 0000H "printBuf_f" 08H 02H 30H 01H 83H 2eH 00H 00H 01H
CGLOBAL 01H 03H 0000H "printBuf_l" 08H 02H 2EH 01H 83H 2aH 00H 00H 01H
CGLOBAL 01H 03H 0000H "printBuf_ln" 08H 02H 2CH 01H 81H 02H 00H 00H 01H
CGLOBAL 01H 03H 0000H "printBuf" 08H 02H 2DH 01H 81H 06H 00H 00H 01H
CGLOBAL 01H 02H 0000H "printFloat" 08H 02H 29H 01H 83H 2aH 00H 00H 01H
CGLOBAL 01H 02H 0000H "printNumber" 08H 02H 2AH 01H 83H 42H 00H 00H 01H
CGLOBAL 01H 03H 0000H "print_init" 08H 02H 2BH 01H 80H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "printBuf_len" 08H 02H 32H 01H 80H 00H 00H 00H 01H
CGLOBAL 01H 03H 0000H "printBuf_status" 08H 02H 31H 01H 80H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 001DH 0008H 00000010H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 21H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "p" 0AH 03H 00H 02H 22H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "l" 0AH 03H 00H 02H 23H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "f" 0AH 03H 00H 02H 24H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "d" 0AH 03H 00H 02H 25H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "ln" 0AH 03H 00H 02H 26H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "status" 0AH 03H 00H 02H 27H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "len" 0AH 03H 00H 02H 28H 01H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 001CH 001BH 00000036H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 02H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "remove" 0AH 03H 00H 02H 03H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "begin" 0AH 03H 00H 02H 04H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "close" 0AH 03H 00H 02H 05H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "send" 0AH 03H 00H 02H 07H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "send64le" 0AH 03H 00H 02H 09H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "send64be" 0AH 03H 00H 02H 0BH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "rxEnable" 0AH 03H 00H 02H 0DH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000010H "setPromiscuous" 0AH 03H 00H 02H 0EH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000012H "setAckReq" 0AH 03H 00H 02H 0FH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000014H "setBroadcastEnb" 0AH 03H 00H 02H 10H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000016H "rxDisable" 0AH 03H 00H 02H 11H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000018H "readData" 0AH 03H 00H 02H 12H 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001AH "getMyAddress" 0AH 03H 00H 02H 13H 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 0000001CH "getMyAddr64" 0AH 03H 00H 02H 14H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000001EH "setMyAddress" 0AH 03H 00H 02H 15H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000020H "getStatus" 0AH 03H 00H 02H 16H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000022H "msgOut" 0AH 03H 00H 02H 17H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000024H "setSendMode" 0AH 03H 00H 02H 18H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000026H "getSendMode" 0AH 03H 00H 02H 19H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000028H "decMac" 0AH 03H 00H 02H 1AH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000002AH "setKey" 0AH 03H 00H 02H 1BH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000002CH "setEnhanceAck" 0AH 03H 00H 02H 1CH 01H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000002EH "getEnhanceAck" 0AH 03H 00H 02H 1DH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000030H "setAckTxInterval" 0AH 03H 00H 02H 1EH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000032H "getEdValue" 0AH 03H 00H 02H 1FH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000034H "antSwitch" 0AH 03H 00H 02H 20H 01H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0010H 000BH 00000002H "mac_fc_alignment"
CSTRUCTMEM 52H 00000003H 00000000H "frame_type" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "sec_enb" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "pending" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "ack_req" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "panid_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "nop" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000008H "seq_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000009H "ielist" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000AH "dst_addr_type" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000CH "frame_ver" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000EH "src_addr_type" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001BH 000BH 00000020H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "mac_header" 04H 00H 06H 11H 00H
CSTRUCTMEM 42H 00000001H 00000002H "seq_num" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "dst_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "dst_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "src_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000010H "src_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000018H "raw" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001AH "raw_len" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001CH "payload" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001EH "payload_len" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001AH 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addrType" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "senseTime" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "txInterval" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "myAddress" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "ccaWait" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0019H 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000002H "status" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0007H 0003H 00000006H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "data" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "len" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "size" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0008H 0004H 00000010H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "id" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf_size" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 00000004H "in" 04H 00H 05H 07H 00H
CSTRUCTMEM 43H 00000006H 0000000AH "out" 04H 00H 05H 07H 00H
CSTRUCTTAG 0000H 0000H 000BH 0015H 00000028H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "condition" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "ccaRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "ccaBe" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "ccaCount" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "txPower" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "txMode" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000009H "sequnceNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000AH "resendingNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000BH "rxOnEnable" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "promiscuousMode" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "ack_timeout" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000010H "status" 02H 00H 01H
CSTRUCTMEM 42H 00000004H 00000012H "total_send_bytes" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000016H "start_send_time" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000001AH "last_send_time" 02H 00H 02H
CSTRUCTMEM 43H 00000002H 0000001EH "phy" 06H 03H 00H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 00000020H "ack" 04H 00H 05H 07H 00H
CSTRUCTMEM 42H 00000002H 00000026H "tx_ack_interval" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0014H 0005H 0000000EH "mac_addr"
CSTRUCTMEM 42H 00000001H 00000000H "pan_coord" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "lddn_addr" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 000EH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "enb" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "data" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 000DH 0003H 0000000EH "fc_addr"
CSTRUCTMEM 43H 00000004H 00000000H "panid" 04H 00H 05H 0EH 00H
CSTRUCTMEM 42H 00000001H 00000004H "addr_type" 02H 00H 00H
CSTRUCTMEM 43H 00000008H 00000006H "addr" 04H 00H 06H 0FH 00H
CSTRUCTTAG 0000H 0000H 0012H 000AH 00000036H "mac_header"
CSTRUCTMEM 43H 00000002H 00000000H "fc" 04H 00H 06H 11H 00H
CSTRUCTMEM 43H 0000000EH 00000002H "dst" 04H 00H 05H 0DH 00H
CSTRUCTMEM 43H 0000000EH 00000010H "src" 04H 00H 05H 0DH 00H
CSTRUCTMEM 42H 00000001H 0000001EH "seq" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000001FH "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000020H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000006H 00000022H "payload" 04H 00H 05H 07H 00H
CSTRUCTMEM 43H 00000006H 00000028H "raw" 04H 00H 05H 07H 00H
CSTRUCTMEM 43H 00000006H 0000002EH "input" 04H 00H 05H 07H 00H
CSTRUCTMEM 43H 00000002H 00000034H "payload_offset" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0013H 000CH 00000016H "rf_param"
CSTRUCTMEM 42H 00000001H 00000000H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "cca_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "cca_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "cca_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "tx_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "tx_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "tx_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "ant_sw" 02H 00H 00H
CSTRUCTMEM 42H 00000004H 0000000AH "ack_timeout" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 0000000EH "cca_level" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000012H "tx_power" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0015H 000AH 000000FAH "mach_param"
CSTRUCTMEM 43H 00000002H 00000000H "macl" 06H 03H 00H 00H 05H 0BH 00H
CSTRUCTMEM 43H 0000000EH 00000002H "my_addr" 04H 00H 05H 14H 00H
CSTRUCTMEM 43H 0000000EH 00000010H "coord_addr" 04H 00H 05H 14H 00H
CSTRUCTMEM 43H 00000036H 0000001EH "tx" 04H 00H 05H 12H 00H
CSTRUCTMEM 43H 00000036H 00000054H "rx" 04H 00H 05H 12H 00H
CSTRUCTMEM 43H 00000036H 0000008AH "rx_prev" 04H 00H 05H 12H 00H
CSTRUCTMEM 43H 00000036H 000000C0H "ack" 04H 00H 05H 12H 00H
CSTRUCTMEM 42H 00000001H 000000F6H "coordinator" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000F7H "sending" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 000000F8H "rf" 06H 03H 00H 00H 05H 13H 00H
CSTRUCTTAG 0000H 0000H 000CH 0004H 0000000EH "ieee802154_my_addr"
CSTRUCTMEM 42H 00000002H 00000000H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000004H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "pan_coord" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0005H 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0004H 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0003H 0005H 0000000AH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "write" 0AH 03H 00H 02H 71H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "read" 0AH 03H 00H 02H 72H 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "erase" 0AH 03H 00H 02H 73H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000006H "write_byte" 0AH 03H 00H 02H 74H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000008H "read_byte" 0AH 03H 00H 02H 75H 00H 00H 00H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0002H 000FH 0000001EH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 59H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "end" 0AH 03H 00H 02H 5AH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 5BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 5CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "peek" 0AH 03H 00H 02H 5DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "flush" 0AH 03H 00H 02H 5EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000CH "print" 0AH 03H 00H 02H 5FH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "println" 0AH 03H 00H 02H 60H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000010H "print_long" 0AH 03H 00H 02H 61H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000012H "println_long" 0AH 03H 00H 02H 62H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000014H "print_double" 0AH 03H 00H 02H 63H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000016H "println_double" 0AH 03H 00H 02H 64H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000018H "write" 0AH 03H 00H 02H 65H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000001AH "write_byte" 0AH 03H 00H 02H 66H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000001CH "tx_available" 0AH 03H 00H 02H 67H 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 0011H 0003H 00000002H "mac_frame_control"
CUNIONMEM 42H 00000002H "fc8" 05H 01H 02H 00H 00H 00H
CUNIONMEM 42H 00000002H "fc16" 02H 00H 08H
CUNIONMEM 43H 00000002H "fc_bit" 04H 00H 05H 10H 00H
CUNIONTAG 0000H 0000H 000FH 0003H 00000008H "_Notag"
CUNIONMEM 42H 00000002H "short_addr" 02H 00H 08H
CUNIONMEM 42H 00000002H "lddn_addr" 02H 00H 08H
CUNIONMEM 42H 00000008H "ieee_addr" 05H 01H 08H 00H 00H 00H
CUNIONTAG 0000H 0000H 0006H 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CENUMTAG 0000H 0000H 0018H 0002H "_Notag"
CENUMMEM 00000014H "SUBGHZ_PWR_20MW"
CENUMMEM 00000001H "SUBGHZ_PWR_1MW"
CENUMTAG 0000H 0000H 0017H 0002H "_Notag"
CENUMMEM 00000064H "SUBGHZ_100KBPS"
CENUMMEM 00000032H "SUBGHZ_50KBPS"
CENUMTAG 0000H 0000H 0016H 0012H "_Notag"
CENUMMEM 00000000H "SUBGHZ_OK"
CENUMMEM 00000001H "SUBGHZ_RESET_FAIL"
CENUMMEM 00000002H "SUBGHZ_SETUP_FAIL"
CENUMMEM 00000003H "SUBGHZ_SLEEP_FAIL"
CENUMMEM 00000004H "SUBGHZ_WAKEUP_FAIL"
CENUMMEM 00000005H "SUBGHZ_MYADDR_FAIL"
CENUMMEM 00000006H "SUBGHZ_SETFIL_FAIL"
CENUMMEM 00000007H "SUBGHZ_TX_COMP_FAIL"
CENUMMEM 00000008H "SUBGHZ_TX_FAIL"
CENUMMEM 00000009H "SUBGHZ_TX_CCA_FAIL"
CENUMMEM 0000000AH "SUBGHZ_TX_ACK_FAIL"
CENUMMEM 0000000BH "SUBGHZ_RX_ENB_FAIL"
CENUMMEM 0000000CH "SUBGHZ_RX_DIS_FAIL"
CENUMMEM 0000000DH "SUBGHZ_RX_COMP_FAIL"
CENUMMEM 0000000EH "SUBGHZ_PANID"
CENUMMEM 0000000FH "SUBGHZ_ERR_ADDRTYPE"
CENUMMEM 00000010H "SUBGHZ_TTL_SEND_OVR"
CENUMMEM 00000011H "SUBGHZ_DUMMY"
CENUMTAG 0000H 0000H 000AH 000EH "_Notag"
CENUMMEM 00000000H "SUBGHZ_ST_TX_START"
CENUMMEM 00000001H "SUBGHZ_ST_CCA_FAST"
CENUMMEM 00000002H "SUBGHZ_ST_CCA_IDLE_DETECT"
CENUMMEM 00000003H "SUBGHZ_ST_CCA_ABORT"
CENUMMEM 00000004H "SUBGHZ_ST_CCA_RETRY"
CENUMMEM 00000005H "SUBGHZ_ST_CCA_FAILURE"
CENUMMEM 00000006H "SUBGHZ_ST_CCA_DONE"
CENUMMEM 00000007H "SUBGHZ_ST_TX_DONE"
CENUMMEM 00000008H "SUBGHZ_ST_TX_ACK_TIMEOUT"
CENUMMEM 00000009H "SUBGHZ_ST_TX_ACK_DONE"
CENUMMEM 0000000AH "SUBGHZ_ST_RX_START"
CENUMMEM 0000000BH "SUBGHZ_ST_RX_DONE"
CENUMMEM 0000000CH "SUBGHZ_ST_RX_ACK_DONE"
CENUMMEM 0000000DH "SUBGHZ_ST_NONE"
CENUMTAG 0000H 0000H 0009H 0005H "_Notag"
CENUMMEM 00000000H "CCA_IDLE"
CENUMMEM 00000001H "CCA_FAST"
CENUMMEM 00000002H "IDLE_DETECT"
CENUMMEM 00000003H "CCA_RETRY"
CENUMMEM 00000004H "CCA_FAILURE"
CENUMTAG 0000H 0000H 0001H 0003H "_Notag"
CENUMMEM 00000001H "HALT_I2C1_END"
CENUMMEM 00000002H "HALT_I2C0_END"
CENUMMEM 00000003H "HALT_DELAY"
CTYPEDEF 0000H 0000H 43H "SUBGHZ_POWER" 04H 00H 0AH 18H 00H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 06H 00H
CTYPEDEF 0000H 0000H 43H "SubGHz_CTRL" 04H 00H 05H 1CH 00H
CTYPEDEF 0000H 0000H 43H "INT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "PHY_PARAM" 04H 00H 05H 08H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_PARAM" 04H 00H 05H 1AH 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MSG" 04H 00H 0AH 16H 00H
CTYPEDEF 0000H 0000H 42H "bool" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "t_print" 04H 00H 05H 1DH 00H
CTYPEDEF 0000H 0000H 42H "byte" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "INT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "INT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_STATE" 04H 00H 0AH 0AH 00H
CTYPEDEF 0000H 0000H 43H "MACL_PARAM" 04H 00H 05H 0BH 00H
CTYPEDEF 0000H 0000H 42H "BOOLEAN" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_PARAM" 04H 00H 05H 1BH 00H
CTYPEDEF 0000H 0000H 42H "UCHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_STATUS" 04H 00H 05H 19H 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "uint8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_RATE" 04H 00H 0AH 17H 00H
CTYPEDEF 0000H 0000H 43H "BUFFER" 04H 00H 05H 07H 00H
CTYPEDEF 0000H 0000H 43H "int8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "int16_t" 02H 00H 08H
CTYPEDEF 0000H 0000H 43H "int32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "UINT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "DATAFLASH" 04H 00H 05H 03H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 7AH 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 79H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "CHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HardwareSerial" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 7CH 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 7BH 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "boolean" 02H 00H 00H
CTYPEDEF 0000H 0000H 42H "word" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "BOOL" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HALT_EVENT" 04H 00H 0AH 01H 00H
CTYPEDEF 0000H 0000H 43H "CCA_STATE" 04H 00H 0AH 09H 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 04H 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 05H 00H
CTYPEDEF 0000H 0000H 42H "uint32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CTYPEDEF 0000H 0000H 42H "uint16_t" 02H 00H 08H
CSGLOBAL 42H 0002H "print_buf_size" 02H 00H 08H
CSGLOBAL 43H 0002H "print_buf" 04H 03H 00H 00H 00H
CGLOBAL 01H 01H 0010H "Print" 04H 00H 05H 1DH 00H
CSGLOBAL 42H 0002H "print_buf_len" 02H 00H 08H
CFILE 0001H 0000007BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\common.h"
CFILE 0002H 00000F42H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\ml620504F.h"
CFILE 0003H 000000C9H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\string.h"
CFILE 0004H 0000007AH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\yvals.h"
CFILE 0005H 0000002DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\print.h"
CFILE 0006H 00000042H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\lazurite.h"
CFILE 0007H 0000002BH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\analogio.h"
CFILE 0008H 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\MCU_SM~1\\mcu.h"
CFILE 0009H 0000002BH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\digitalio.h"
CFILE 000AH 00000041H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\pin_assignment.h"
CFILE 000BH 00000051H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\lazurite_system.h"
CFILE 000CH 00000045H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\serial.h"
CFILE 000DH 0000002DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\wiring_shift.h"
CFILE 000EH 0000002CH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\wiring_pulse.h"
CFILE 000FH 0000002DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\WInterrupts.h"
CFILE 0010H 0000002DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\WMath.h"
CFILE 0011H 00000031H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\flash.h"
CFILE 0012H 0000002DH "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\tone.h"
CFILE 0013H 000000DAH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\stdlib.h"
CFILE 0014H 0000004FH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\math.h"
CFILE 0015H 00000082H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\subghz_api.h"
CFILE 0016H 0000009EH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\mach.h"
CFILE 0017H 00000064H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\macl.h"
CFILE 0018H 00000032H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\common_subghz.h"
CFILE 0019H 00000062H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\phy.h"
CFILE 001AH 0000003DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\endian.h"
CFILE 0000H 000000E8H "C:\\LAZURI~1\\hardware\\lazurite_subghz\\lazurite\\print.c"

	rseg $$print_init$print
CFUNCTION 299

_print_init	:
CBLOCK 299 1 59

;;{
CLINEA 0000H 0001H 003BH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	er8
	mov	er8,	er0
CBLOCK 299 2 59
CARGUMENT 47H 0002H 0028H "x" 04H 03H 00H 00H 00H
CARGUMENT 46H 0002H 0025H "size" 02H 00H 01H

;;	print_buf_size = size-1;
CLINEA 0000H 0001H 003DH 0002H 0019H
	mov	er0,	er2
	add	er0,	#-1
	st	er0,	NEAR _print_buf_size

;;	print_buf_len = 0;
CLINEA 0000H 0001H 003EH 0002H 0013H
	mov	er2,	#0 
	st	er2,	NEAR _print_buf_len

;;	print_buf = x;
CLINEA 0000H 0001H 003FH 0002H 000FH
	st	er8,	NEAR _print_buf

;;	if((print_buf_size == 0) || (print_buf == NULL)) return;
CLINEA 0000H 0001H 0040H 0002H 0039H
	mov	er0,	er0
	beq	_$L0
	mov	er0,	er8
	bne	_$L1
	bal	_$L0
_$L1 :

;;	*print_buf = NULL;
CLINEA 0000H 0001H 0041H 0002H 0013H
	mov	r0,	#00h
	st	r0,	[er8]
CBLOCKEND 299 2 66

;;}
CLINEA 0000H 0001H 0042H 0001H 0001H
_$L0 :
	pop	er8
	rt
CBLOCKEND 299 1 66
CFUNCTIONEND 299


	rseg $$printBuf_ln$print
CFUNCTION 300

_printBuf_ln	:
CBLOCK 300 1 69

;;{
CLINEA 0000H 0001H 0045H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 300 2 69
CRET 0000H
CSLOCAL 42H 0002H 0000H 0002H "s" 05H 01H 02H 00H 00H 00H

;;	if((print_buf_size == 0) || (print_buf == NULL)) return;
CLINEA 0000H 0001H 0048H 0002H 0039H
	l	er0,	NEAR _print_buf_size
	beq	_$L11
	l	er0,	NEAR _print_buf
	bne	_$L10
_$L11 :
CBLOCKEND 300 2 80

;;}
CLINEA 0000H 0001H 0050H 0001H 0001H
_$L8 :
	mov	er0,	er2
	pop	pc

;;	if((print_buf_size == 0) || (print_buf == NULL)) return;
CLINEA 0000H 0000H 0048H 0002H 0039H
_$L10 :

;;	if(print_buf_size <= print_buf_len)
CLINEA 0000H 0001H 004AH 0002H 0024H
	l	er0,	NEAR _print_buf_size
	l	er2,	NEAR _print_buf_len
	cmp	er0,	er2
	bgt	_$L17
CBLOCK 300 3 75

;;		*(print_buf + print_buf_size - 1) = NULL;
CLINEA 0000H 0001H 004CH 0003H 002BH
	l	er0,	NEAR _print_buf
	l	er2,	NEAR _print_buf_size
	add	er0,	er2
	mov	r2,	#00h
	st	r2,	0ffffh[er0]

;;		print_buf_len--;
CLINEA 0000H 0000H 004DH 0003H 0012H
	l	er0,	NEAR _print_buf_len
	add	er0,	#-1
	st	er0,	NEAR _print_buf_len
CBLOCKEND 300 3 78

;;	}
CLINEA 0000H 0000H 004EH 0002H 0002H
_$L17 :

;;	return printBuf(s);
CLINEA 0000H 0001H 004FH 0002H 0014H
	mov	r0,	#BYTE1 OFFSET _$ST0
	mov	r1,	#BYTE2 OFFSET _$ST0
	bl	_printBuf
	mov	er2,	er0
	bal	_$L8
CBLOCKEND 300 1 80
CFUNCTIONEND 300


	rseg $$printBuf$print
CFUNCTION 301

_printBuf	:
CBLOCK 301 1 83

;;{
CLINEA 0000H 0001H 0053H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 301 2 83
CRET 0002H
CARGUMENT 47H 0002H 0028H "data" 04H 03H 00H 00H 00H

;;	if((print_buf_size == 0) || (print_buf == NULL)) return;
CLINEA 0000H 0001H 0054H 0002H 0039H
	l	er0,	NEAR _print_buf_size
	beq	_$L21
	l	er0,	NEAR _print_buf
	bne	_$L20
_$L21 :
CBLOCKEND 301 2 89

;;}
CLINEA 0000H 0001H 0059H 0001H 0001H
_$L19 :
	mov	er0,	er2
	pop	er8
	pop	pc

;;	if((print_buf_size == 0) || (print_buf == NULL)) return;
CLINEA 0000H 0000H 0054H 0002H 0039H
_$L20 :

;;	print_buf_len = strlen(strncat(print_buf,data,print_buf_size-print_buf_len));
CLINEA 0000H 0000H 0056H 0002H 004EH
	l	er0,	NEAR _print_buf_size
	l	er2,	NEAR _print_buf_len
	sub	r0,	r2
	subc	r1,	r3
	push	er0
	mov	er2,	er8
	l	er0,	NEAR _print_buf
	bl	_strncat_nn
	add	sp,	#2 
	bl	_strlen_n
	st	er0,	NEAR _print_buf_len

;;	return print_buf_size-print_buf_len;
CLINEA 0000H 0001H 0058H 0002H 0025H
	l	er0,	NEAR _print_buf_size
	l	er2,	NEAR _print_buf_len
	sub	r0,	r2
	subc	r1,	r3
	mov	er2,	er0
	bal	_$L19
CBLOCKEND 301 1 89
CFUNCTIONEND 301


	rseg $$printBuf_l$print
CFUNCTION 302

_printBuf_l	:
CBLOCK 302 1 92

;;{
CLINEA 0000H 0001H 005CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_base$4	set	4
	_buf$0	set	-34
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-034
CBLOCK 302 2 92
CRET 0024H
CARGUMENT 47H 0004H 2524H "data" 02H 00H 02H
CARGUMENT 42H 0001H 0004H "base" 02H 00H 00H
CLOCAL 43H 0021H 0022H 0002H "buf" 05H 01H 21H 00H 00H 00H

;;	printNumber(buf,data,base);
CLINEA 0000H 0001H 005EH 0002H 001CH
	push	xr0
	l	r2,	_base$4[fp]
	mov	er0,	fp
	add	er0,	#-34
	bl	_printNumber
	add	sp,	#4 

;;	return printBuf(buf);
CLINEA 0000H 0001H 005FH 0002H 0016H
	mov	er0,	fp
	add	er0,	#-34
	bl	_printBuf
CBLOCKEND 302 2 96

;;}
CLINEA 0000H 0000H 0060H 0001H 0001H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 302 1 96
CFUNCTIONEND 302


	rseg $$printBuf_d$print
CFUNCTION 303

_printBuf_d	:
CBLOCK 303 1 99

;;{
CLINEA 0000H 0001H 0063H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_data$2	set	4
	_buf$0	set	-34
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-034
	push	xr4
	push	er8
	mov	r8,	r0
CBLOCK 303 2 99
CRET 002AH
CARGUMENT 46H 0001H 001CH "digit" 02H 00H 00H
CARGUMENT 43H 0008H 0004H "data" 02H 00H 04H
CLOCAL 43H 0021H 0022H 0002H "buf" 05H 01H 21H 00H 00H 00H

;;	printFloat(buf,data,digit);
CLINEA 0000H 0001H 0065H 0002H 001CH
	lea	_data$2[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r2,	r8
	mov	er0,	fp
	add	er0,	#-34
	bl	_printFloat
	add	sp,	#8 

;;	return printBuf(buf);
CLINEA 0000H 0001H 0066H 0002H 0016H
	mov	er0,	fp
	add	er0,	#-34
	bl	_printBuf
CBLOCKEND 303 2 103

;;}
CLINEA 0000H 0000H 0067H 0001H 0001H
	pop	er8
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 303 1 103
CFUNCTIONEND 303


	rseg $$printBuf_f$print
CFUNCTION 304

_printBuf_f	:
CBLOCK 304 1 106

;;{
CLINEA 0000H 0001H 006AH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_digit$4	set	4
	_buf$0	set	-34
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-034
CBLOCK 304 2 106
CRET 0024H
CARGUMENT 47H 0004H 2524H "data" 02H 00H 03H
CARGUMENT 42H 0001H 0004H "digit" 02H 00H 00H
CLOCAL 43H 0021H 0022H 0002H "buf" 05H 01H 21H 00H 00H 00H

;;	printFloat(buf,(double)data,digit);
CLINEA 0000H 0001H 006CH 0002H 0024H
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	r2,	_digit$4[fp]
	mov	er0,	fp
	add	er0,	#-34
	bl	_printFloat
	add	sp,	#8 

;;	return printBuf(buf);
CLINEA 0000H 0001H 006DH 0002H 0016H
	mov	er0,	fp
	add	er0,	#-34
	bl	_printBuf
CBLOCKEND 304 2 110

;;}
CLINEA 0000H 0000H 006EH 0001H 0001H
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 304 1 110
CFUNCTIONEND 304


	rseg $$printBuf_status$print
CFUNCTION 305

_printBuf_status	:
CBLOCK 305 1 112

;;int printBuf_status(void){
CLINEA 0000H 0001H 0070H 0001H 001AH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 305 2 112

;;	if(print_buf == NULL) return -1;
CLINEA 0000H 0001H 0071H 0002H 0021H
	l	er0,	NEAR _print_buf
	bne	_$L31
	mov	er0,	#-1
CBLOCKEND 305 2 116

;;}
CLINEA 0000H 0001H 0074H 0001H 0001H
	rt

;;	if(print_buf == NULL) return -1;
CLINEA 0000H 0000H 0071H 0002H 0021H
_$L31 :

;;	return print_buf_size-print_buf_len;
CLINEA 0000H 0001H 0073H 0002H 0025H
	l	er0,	NEAR _print_buf_size
	l	er2,	NEAR _print_buf_len
	sub	r0,	r2
	subc	r1,	r3
	rt
CBLOCKEND 305 1 116
CFUNCTIONEND 305


	rseg $$printBuf_len$print
CFUNCTION 306

_printBuf_len	:
CBLOCK 306 1 119

;;{
CLINEA 0000H 0001H 0077H 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 306 2 119

;;	return print_buf_len;
CLINEA 0000H 0001H 0078H 0002H 0016H
	l	er0,	NEAR _print_buf_len
CBLOCKEND 306 2 121

;;}
CLINEA 0000H 0000H 0079H 0001H 0001H
	rt
CBLOCKEND 306 1 121
CFUNCTIONEND 306


	rseg $$printNumber$print
CFUNCTION 298

_printNumber	:
CBLOCK 298 1 124

;;{
CLINEA 0000H 0001H 007CH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_sign$36	set	-43
	_data$4	set	4
	_n$38	set	-38
	_m$42	set	-42
	_buf$0	set	-34
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-044
	push	xr8
	push	xr4
	push	bp
	mov	r10,	r2
	mov	er8,	er0
CBLOCK 298 2 124
CRET 0038H
CARGUMENT 47H 0002H 0028H "x" 04H 03H 00H 00H 00H
CARGUMENT 46H 0001H 001EH "base" 02H 00H 00H
CARGUMENT 43H 0004H 0004H "data" 02H 00H 02H
CLOCAL 43H 0021H 0022H 0002H "buf" 05H 01H 21H 00H 00H 00H
CLOCAL 46H 0001H 001FH 0002H "digit" 02H 00H 00H
CLOCAL 43H 0001H 002BH 0002H "sign" 02H 00H 00H
CLOCAL 42H 0004H 0026H 0002H "n" 02H 00H 02H
CLOCAL 42H 0004H 002AH 0002H "m" 02H 00H 02H
CLOCAL 47H 0001H 0014H 0002H "c" 02H 00H 00H
CLOCAL 46H 0002H 0026H 0002H "i" 02H 00H 01H

;; 	unsigned char digit = 0;		// number of digit
CLINEA 0000H 0001H 007EH 0003H 002EH
	mov	r0,	#00h
	mov	r11,	#00h	;; _ldigit$34

;;	char sign = 0;					// sign
CLINEA 0000H 0001H 007FH 0002H 001BH
	st	r0,	_sign$36[fp]

;;	if (base < 2) base = 10;			// if base is wrong, it is fixed to DEC
CLINEA 0000H 0001H 0084H 0002H 0043H
	cmp	r2,	#02h
	bge	_$L35
	mov	r10,	#0ah
_$L35 :

;;	n = (unsigned long)data;
CLINEA 0000H 0001H 0085H 0002H 0019H
	l	er0,	_data$4[fp]
	l	er2,	_data$4+02h[fp]
	st	er0,	_n$38[fp]
	st	er2,	_n$38+02h[fp]

;;	if((base == DEC) && (data < 0))		// process for minus
CLINEA 0000H 0001H 0087H 0002H 0036H
	cmp	r10,	#0ah
	bne	_$L37
	mov	er2,	er2
	bps	_$L37
CBLOCK 298 3 136

;;		sign = 1;						// stack sign bit
CLINEA 0000H 0001H 0089H 0003H 0022H
	mov	r0,	#01h
	st	r0,	_sign$36[fp]

;;		n = ~n;							// convert to absolute value
CLINEA 0000H 0001H 008AH 0003H 002CH
	l	er0,	_n$38[fp]
	l	er2,	_n$38+02h[fp]
	xor	r0,	#0ffh
	xor	r1,	#0ffh
	xor	r2,	#0ffh
	xor	r3,	#0ffh

;;		n += 1;							// convert to absolute value
CLINEA 0000H 0001H 008BH 0003H 002CH
	add	er0,	#1 
	addc	r2,	#00h
	addc	r3,	#00h
	st	er0,	_n$38[fp]
	st	er2,	_n$38+02h[fp]
CBLOCKEND 298 3 140

;;	}
CLINEA 0000H 0000H 008CH 0002H 0002H
_$L37 :
CBLOCK 298 4 142

;;		m = n;
CLINEA 0000H 0001H 008FH 0003H 0008H
	l	er0,	_n$38[fp]
	l	er2,	_n$38+02h[fp]
	st	er0,	_m$42[fp]
	st	er2,	_m$42+02h[fp]

;;		n /= base;
CLINEA 0000H 0001H 0090H 0003H 000CH
	mov	r0,	r10
	mov	r1,	#00h
	mov	er2,	#0 
	l	er4,	_n$38[fp]
	l	er6,	_n$38+02h[fp]
	push	qr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr4
	st	er4,	_n$38[fp]
	st	er6,	_n$38+02h[fp]

;;		c = (char)(m - base * n);
CLINEA 0000H 0001H 0091H 0003H 001BH
	push	xr0
	push	xr4
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	_m$42[fp]
	sub	r0,	r4

;;		buf[digit] = (char)(c < 10 ? c + '0' : c + 'A' - 10);
CLINEA 0000H 0000H 0092H 0003H 0037H
	cmp	r0,	#0ah
	bges	_$L48
	extbw	er0
	add	er0,	#48
	bal	_$L50
_$L48 :
	extbw	er0
	add	er0,	#55
_$L50 :
	mov	r12,	r11
	mov	r13,	#00h
	add	bp,	fp
	st	r0,	-34[bp]

;;		digit++;
CLINEA 0000H 0000H 0093H 0003H 000AH
	add	r11,	#01h
CBLOCKEND 298 4 148

;;	} while(n);
CLINEA 0000H 0000H 0094H 0002H 000CH
	l	er0,	_n$38[fp]
	l	er2,	_n$38+02h[fp]
	cmp	r0,	#00h
	cmpc	r1,	#00h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bne	_$L37

;;	if((base == DEC) && (sign == 1))	// generate sign
CLINEA 0000H 0001H 0096H 0002H 0032H
	cmp	r10,	#0ah
	bne	_$L51
	l	r0,	_sign$36[fp]
	cmp	r0,	#01h
	bne	_$L51
CBLOCK 298 5 151

;;		buf[digit] = '-';
CLINEA 0000H 0001H 0098H 0003H 0013H
	mov	r12,	r11
	mov	r13,	#00h
	add	bp,	fp
	mov	r0,	#02dh
	st	r0,	-34[bp]

;;		digit++;
CLINEA 0000H 0000H 0099H 0003H 000AH
	add	r11,	#01h
CBLOCKEND 298 5 154

;;	}
CLINEA 0000H 0000H 009AH 0002H 0002H
_$L51 :

;;	for(i=0;i<(size_t)digit;i++)				// reverse charactor
CLINEA 0000H 0001H 009CH 0006H 0009H
	mov	er4,	#0 	;; _li$48

;;	for(i=0;i<(size_t)digit;i++)				// reverse charactor
CLINEA 0000H 0000H 009CH 000AH 0019H
	bal	_$L63

;;	for(i=0;i<(size_t)digit;i++)				// reverse charactor
CLINEA 0000H 0000H 009CH 001AH 001CH
_$L60 :
CBLOCK 298 6 157

;;		x[i] = buf[digit-i-1];
CLINEA 0000H 0001H 009EH 0003H 0018H
	mov	r12,	r11
	mov	r13,	#00h
	sub	r12,	r4
	subc	r13,	r5
	add	bp,	fp
	mov	er0,	er8
	add	er0,	er4
	l	r2,	-35[bp]
	st	r2,	[er0]
CBLOCKEND 298 6 159

;;	for(i=0;i<(size_t)digit;i++)				// reverse charactor
CLINEA 0000H 0000H 009CH 001AH 001CH
	add	er4,	#1 

;;	for(i=0;i<(size_t)digit;i++)				// reverse charactor
CLINEA 0000H 0000H 009CH 000AH 0019H
_$L63 :
	mov	r0,	r11
	mov	r1,	#00h
	cmp	er4,	er0
	blt	_$L60

;;	x[i] = NULL;						// add NULL code
CLINEA 0000H 0001H 00A0H 0002H 0023H
	mov	er0,	er8
	add	er0,	er4
	mov	r2,	#00h
	st	r2,	[er0]

;;	return i;
CLINEA 0000H 0001H 00A1H 0002H 000AH
	mov	er0,	er4
CBLOCKEND 298 2 162

;;}
CLINEA 0000H 0000H 00A2H 0001H 0001H
	pop	bp
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 298 1 162
CFUNCTIONEND 298


	rseg $$printFloat$print
CFUNCTION 297

_printFloat	:
CBLOCK 297 1 170

;;{
CLINEA 0000H 0001H 00AAH 0001H 0001H
;;*****************************************
;;	register/stack information
;;*****************************************
	_data$4	set	4
	_round$4	set	-8
	_m$0	set	-12
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-012
	push	xr8
	push	xr4
	push	bp
	mov	er8,	er0
	mov	r10,	r2
CBLOCK 297 2 170
CRET 0018H
CARGUMENT 47H 0002H 0028H "x" 04H 03H 00H 00H 00H
CARGUMENT 46H 0001H 001EH "digit" 02H 00H 00H
CARGUMENT 43H 0008H 0004H "data" 02H 00H 04H
CLOCAL 43H 0004H 000CH 0002H "m" 02H 00H 02H
CLOCAL 43H 0008H 0008H 0002H "round" 02H 00H 04H
CLOCAL 46H 0002H 002AH 0002H "n" 02H 00H 01H
CLOCAL 46H 0001H 001FH 0002H "i" 02H 00H 00H
CSLOCAL 42H 0004H 0001H 0002H "s" 05H 01H 04H 00H 00H 00H

;;	size_t n = 0;
CLINEA 0000H 0001H 00ADH 0002H 000EH
	mov	bp,	#0 	;; _ln$12

;;	if((data > 2147483647.5)||(data < -2147483647.5))
CLINEA 0000H 0001H 00B2H 0002H 0032H
	lea	_data$4[fp]
	l	qr0,	[ea]
	push	qr0
	mov	er0,	#0 
	mov	er2,	#-32
	mov	er4,	#-1
	mov	r6,	#0dfh
	mov	r7,	#041h
	push	qr0
	bl	__dcmpu8sw
	add	sp,	#16
	mov	psw,	r0
	bgt	_$L67
	l	qr0,	[ea]
	push	qr0
	mov	er0,	#0 
	mov	er2,	#-32
	mov	er4,	#-1
	mov	r6,	#0dfh
	mov	r7,	#0c1h
	push	qr0
	bl	__dcmpu8sw
	add	sp,	#16
	mov	psw,	r0
	bge	_$L66
_$L67 :
CBLOCK 297 3 179

;;		strcpy(x,s);
CLINEA 0000H 0001H 00B4H 0003H 000EH
	mov	r2,	#BYTE1 OFFSET _$ST1
	mov	r3,	#BYTE2 OFFSET _$ST1
	mov	er0,	er8
	bl	_strcpy_nn

;;		return sizeof(s);
CLINEA 0000H 0001H 00B5H 0003H 0013H
	mov	er0,	#4 
CBLOCKEND 297 3 182
CBLOCKEND 297 2 231

;;}
CLINEA 0000H 0001H 00E7H 0001H 0001H
_$L64 :
	pop	bp
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc

;;	}
CLINEA 0000H 0000H 00B6H 0002H 0002H
_$L66 :

;;	if(data < 0)
CLINEA 0000H 0001H 00B9H 0002H 000DH
	l	qr0,	[ea]
	push	qr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	push	xr0
	bl	__dcmpu8sw
	add	sp,	#16
	mov	psw,	r0
	bge	_$L73
CBLOCK 297 4 186

;;		data *= -1;
CLINEA 0000H 0001H 00BBH 0003H 000DH
	l	qr0,	[ea]
	push	qr0
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#0f0h
	mov	r7,	#0bfh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	pop	qr0
	st	qr0,	[ea]

;;		x[n++] = '-';
CLINEA 0000H 0001H 00BCH 0003H 000FH
	mov	r0,	#02dh
	st	r0,	[er8]
	mov	bp,	#1 	;; _ln$12
CBLOCKEND 297 4 189

;;	}
CLINEA 0000H 0000H 00BDH 0002H 0002H
_$L73 :

;;	round = 0.5;
CLINEA 0000H 0001H 00BFH 0002H 000DH
	lea	_round$4[fp]
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#0e0h
	mov	r7,	#03fh
	st	qr0,	[ea]

;;	for(i=0;i<digit;++i)
CLINEA 0000H 0001H 00C0H 0002H 0015H
	mov	r11,	#00h	;; _li$14
	bal	_$L80
_$L77 :
CBLOCK 297 5 193

;;		round /= 10;
CLINEA 0000H 0001H 00C2H 0003H 000EH
	lea	_round$4[fp]
	l	qr0,	[ea]
	push	qr0
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#024h
	mov	r7,	#040h
	push	qr0
	bl	__ddivu8sw
	add	sp,	#8 
	pop	qr0
	st	qr0,	[ea]
CBLOCKEND 297 5 195

;;	for(i=0;i<digit;++i)
CLINEA 0000H 0000H 00C0H 0002H 0015H
	add	r11,	#01h
_$L80 :

;;	for(i=0;i<digit;++i)
CLINEA 0000H 0000H 00C0H 000AH 0019H
	cmp	r11,	r10
	blt	_$L77

;;	data += round;
CLINEA 0000H 0001H 00C4H 0002H 000FH
	lea	_data$4[fp]
	l	qr0,	[ea]
	push	qr0
	lea	_round$4[fp]
	l	qr0,	[ea]
	push	qr0
	bl	__daddu8sw
	add	sp,	#8 
	pop	qr0
	lea	_data$4[fp]
	st	qr0,	[ea]

;;	m=(long)data;						// convert integer
CLINEA 0000H 0001H 00C7H 0002H 0026H
	push	qr0
	bl	__dtolu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	_m$0[fp]
	st	er2,	_m$0+02h[fp]

;;	n += printNumber(x+n,m,DEC);		// convert integer part to charactor
CLINEA 0000H 0001H 00CAH 0002H 0043H
	push	xr0
	mov	r2,	#0ah
	mov	er0,	er8
	add	er0,	bp
	bl	_printNumber
	add	sp,	#4 
	add	bp,	er0
	mov	er0,	bp

;;	if(digit == 0) return n;			// in case of integer
CLINEA 0000H 0001H 00CCH 0002H 0031H
	cmp	r10,	#00h
	bne	_$L81
	b	_$L64
_$L81 :

;;	x[n++] = '.';
CLINEA 0000H 0001H 00CFH 0002H 000EH
	mov	er0,	er8
	add	er0,	bp
	mov	r2,	#02eh
	st	r2,	[er0]
	add	bp,	#1 

;;	data -= m;
CLINEA 0000H 0001H 00D2H 0002H 000BH
	lea	_data$4[fp]
	l	qr0,	[ea]
	push	qr0
	l	er0,	_m$0[fp]
	l	er2,	_m$0+02h[fp]
	push	xr0
	add	sp,	#-4
	bl	__dildu8sw
	bl	__dsubu8sw
	add	sp,	#8 
	pop	qr0
	st	qr0,	[ea]

;;	for(i=0;i<digit;i++)
CLINEA 0000H 0001H 00D3H 0002H 0015H
	mov	r11,	#00h	;; _li$14
	bal	_$L88
_$L85 :
CBLOCK 297 6 212

;;		data *= 10;
CLINEA 0000H 0001H 00D5H 0003H 000DH
	lea	_data$4[fp]
	l	qr0,	[ea]
	push	qr0
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#024h
	mov	r7,	#040h
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	pop	qr0
	st	qr0,	[ea]

;;		m = (long)data;
CLINEA 0000H 0001H 00D6H 0003H 0011H
	push	qr0
	bl	__dtolu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	_m$0[fp]
	st	er2,	_m$0+02h[fp]

;;		if(m==0)
CLINEA 0000H 0001H 00D7H 0003H 000AH
	cmp	r0,	#00h
	cmpc	r1,	#00h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bne	_$L89
CBLOCK 297 7 216

;;			x[n++] = '0';
CLINEA 0000H 0001H 00D9H 0004H 0010H
	mov	er0,	er8
	add	er0,	bp
	mov	r2,	#030h
	st	r2,	[er0]
	add	bp,	#1 
CBLOCKEND 297 7 218

;;		}
CLINEA 0000H 0000H 00DAH 0003H 0003H
_$L89 :
CBLOCKEND 297 6 219

;;	for(i=0;i<digit;i++)
CLINEA 0000H 0000H 00D3H 0002H 0015H
	add	r11,	#01h
_$L88 :

;;	for(i=0;i<digit;i++)
CLINEA 0000H 0000H 00D3H 000AH 0019H
	cmp	r11,	r10
	blt	_$L85

;;	if( m != 0 )
CLINEA 0000H 0001H 00DDH 0002H 000DH
	l	er0,	_m$0[fp]
	l	er2,	_m$0+02h[fp]
	cmp	r0,	#00h
	cmpc	r1,	#00h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	beq	_$L91
CBLOCK 297 8 222

;;		 n += printNumber(x+n,m,DEC);
CLINEA 0000H 0001H 00DFH 0004H 001FH
	push	xr0
	mov	r2,	#0ah
	mov	er0,	er8
	add	er0,	bp
	bl	_printNumber
	add	sp,	#4 
	add	bp,	er0
CBLOCKEND 297 8 224

;;	else
CLINEA 0000H 0001H 00E1H 0002H 0005H
	bal	_$L93
_$L91 :
CBLOCK 297 9 226

;;		x[n++] = NULL;
CLINEA 0000H 0001H 00E3H 0003H 0010H
	mov	er0,	er8
	add	er0,	bp
	mov	r2,	#00h
	st	r2,	[er0]
	add	bp,	#1 
CBLOCKEND 297 9 228

;;	}
CLINEA 0000H 0000H 00E4H 0002H 0002H
_$L93 :

;;	return n;
CLINEA 0000H 0001H 00E6H 0002H 000AH
	mov	er0,	bp
	b	_$L64
CBLOCKEND 297 1 231
CFUNCTIONEND 297

	public _printBuf_d
	public _printBuf_f
	public _printBuf_l
	public _printBuf_ln
	public _printBuf
	public _printFloat
	public _printNumber
	public _Print
	public _print_init
	public _printBuf_len
	public _printBuf_status
	extrn code near : _strlen_n
	extrn code near : _strncat_nn
	extrn code near : _strcpy_nn
	extrn code near : _main

	rseg $$NINITTAB
	dw	00h
	dw	00h
	dw	00h
	DB	"\x0a", 00H
	DB	"ovf", 00H

	rseg $$TABPrint$print
_Print :
	dw	_print_init
	dw	_printBuf
	dw	_printBuf_l
	dw	_printBuf_f
	dw	_printBuf_d
	dw	_printBuf_ln
	dw	_printBuf_status
	dw	_printBuf_len

	rseg $$NINITVAR
_print_buf_size :
	ds	02h
_print_buf_len :
	ds	02h
_print_buf :
	ds	02h
_$ST0 :
	ds	02h
_$ST1 :
	ds	04h
	extrn code : __lmulu8sw
	extrn code : __uldivu8sw
	extrn code : __ftodu8sw
	extrn code : __daddu8sw
	extrn code : __dsubu8sw
	extrn code : __dcmpu8sw
	extrn code : __dmulu8sw
	extrn code : __ddivu8sw
	extrn code : __dildu8sw
	extrn code : __dtolu8sw

	end
