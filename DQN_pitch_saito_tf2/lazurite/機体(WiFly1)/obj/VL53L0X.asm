;; Compile Options : /TML620504F /MS /near /IC:\LAZURI~1\LIBRAR~1\BM1383 /IC:\LAZURI~1\LIBRAR~1\BM1422 /IC:\LAZURI~1\LIBRAR~1\HARDWA~1 /IC:\LAZURI~1\LIBRAR~1\HARDWA~2 /IC:\LAZURI~1\LIBRAR~1\KXG03_~1 /IC:\LAZURI~1\LIBRAR~1\VL53L0X /IC:\LAZURI~1\LIBRAR~1\Wire /IC:\LAZURI~1\hardware\LAZURI~2 /IC:\LAZURI~1\hardware\LAZURI~2\lazurite /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\clock /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\common /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\irq /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\lp /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\MCU_SM~1 /IC:\LAZURI~1\hardware\LAZURI~2\ML620Q~1\wdt /IC:\LAZURI~1\hardware\LAZURI~2\sub_ghz\ /D_ML620Q504 /DLAZURITE_MINI /DLAZURITE_IDE /DSUBGHZ /DPWR_LED /DLDO_CNT /SS 512 /SL 65 /SD /Oa /Ot /W 3 /Faobj\ /Lv 
;; Version Number  : Ver.3.53.1
;; File Name       : VL53L0X.c

	type (ML620504F) 
	model small, near
	$$TAB$$S10$VL53L0X segment table 2h #0h
	$$TAB$$S11$VL53L0X segment table 2h #0h
	$$TAB$$S14$VL53L0X segment table 2h #0h
	$$TAB$$S6$VL53L0X segment table 2h #0h
	$$TAB$$S7$VL53L0X segment table 2h #0h
	$$VL53L0X$VL53L0X segment code 2h #0h
	$$decodeTimeout$VL53L0X segment code 2h #0h
	$$encodeTimeout$VL53L0X segment code 2h #0h
	$$getMeasurementTimingBudget$VL53L0X segment code 2h #0h
	$$getSequenceStepEnables$VL53L0X segment code 2h #0h
	$$getSequenceStepTimeouts$VL53L0X segment code 2h #0h
	$$getSignalRateLimit$VL53L0X segment code 2h #0h
	$$getSpadInfo$VL53L0X segment code 2h #0h
	$$getVcselPulsePeriod$VL53L0X segment code 2h #0h
	$$init_VL53L0X$VL53L0X segment code 2h #0h
	$$performSingleRefCalibration$VL53L0X segment code 2h #0h
	$$readMulti$VL53L0X segment code 2h #0h
	$$readRangeContinuousMillimeters$VL53L0X segment code 2h #0h
	$$readRangeSingleMillimeters$VL53L0X segment code 2h #0h
	$$readReg$VL53L0X segment code 2h #0h
	$$readReg16Bit$VL53L0X segment code 2h #0h
	$$readReg32Bit$VL53L0X segment code 2h #0h
	$$setAddress$VL53L0X segment code 2h #0h
	$$setMeasurementTimingBudget$VL53L0X segment code 2h #0h
	$$setSignalRateLimit$VL53L0X segment code 2h #0h
	$$setVcselPulsePeriod$VL53L0X segment code 2h #0h
	$$startContinuous$VL53L0X segment code 2h #0h
	$$stopContinuous$VL53L0X segment code 2h #0h
	$$timeoutMclksToMicroseconds$VL53L0X segment code 2h #0h
	$$timeoutMicrosecondsToMclks$VL53L0X segment code 2h #0h
	$$timeoutOccurred$VL53L0X segment code 2h #0h
	$$writeMulti$VL53L0X segment code 2h #0h
	$$writeReg$VL53L0X segment code 2h #0h
	$$writeReg16Bit$VL53L0X segment code 2h #0h
	$$writeReg32Bit$VL53L0X segment code 2h #0h
CVERSION 3.53.1
CGLOBAL 01H 03H 0000H "stopContinuous" 08H 02H 47H 01H 81H 02H 00H 00H 07H
CGLOBAL 01H 02H 0000H "timeoutOccurred" 08H 02H 4AH 01H 80H 00H 00H 00H 00H
CGLOBAL 01H 03H 0000H "writeReg" 08H 02H 38H 01H 81H 04H 00H 00H 07H
CGLOBAL 01H 02H 0000H "setVcselPulsePeriod" 08H 02H 44H 01H 83H 28H 00H 00H 00H
CGLOBAL 01H 02H 0000H "getVcselPulsePeriod" 08H 02H 45H 01H 81H 02H 00H 00H 00H
CGLOBAL 01H 03H 0000H "writeMulti" 08H 02H 3EH 01H 83H 0aH 00H 00H 07H
CGLOBAL 01H 02H 0000H "performSingleRefCalibration" 08H 02H 4EH 01H 81H 02H 00H 00H 00H
CGLOBAL 01H 02H 0000H "init_VL53L0X" 08H 02H 37H 01H 83H 16H 00H 00H 00H
CGLOBAL 01H 03H 0000H "startContinuous" 08H 02H 46H 01H 81H 0eH 00H 00H 07H
CSGLOBAL 02H 0000H "decodeTimeout" 08H 02H 4FH 01H 80H 02H 00H 00H 08H
CGLOBAL 01H 03H 0000H "writeReg16Bit" 08H 02H 39H 01H 81H 06H 00H 00H 07H
CGLOBAL 01H 03H 0000H "getSignalRateLimit" 08H 02H 41H 01H 81H 0aH 00H 00H 03H
CGLOBAL 01H 02H 0000H "readRangeSingleMillimeters" 08H 02H 49H 01H 81H 02H 00H 00H 08H
CGLOBAL 01H 02H 0000H "setSignalRateLimit" 08H 02H 40H 01H 81H 1aH 00H 00H 00H
CGLOBAL 01H 03H 0000H "writeReg32Bit" 08H 02H 3AH 01H 83H 06H 00H 00H 07H
CGLOBAL 01H 03H 0000H "readMulti" 08H 02H 3FH 01H 83H 0cH 00H 00H 07H
CGLOBAL 01H 02H 0000H "getSpadInfo" 08H 02H 4BH 01H 81H 06H 00H 00H 00H
CGLOBAL 01H 02H 0000H "setMeasurementTimingBudget" 08H 02H 42H 01H 83H 32H 00H 00H 00H
CGLOBAL 01H 03H 0000H "getSequenceStepTimeouts" 08H 02H 4DH 01H 81H 06H 00H 00H 07H
CGLOBAL 01H 02H 0000H "readReg32Bit" 08H 02H 3DH 01H 83H 0eH 00H 00H 02H
CGLOBAL 01H 02H 0000H "readReg" 08H 02H 3BH 01H 81H 06H 00H 00H 00H
CGLOBAL 01H 02H 0000H "readRangeContinuousMillimeters" 08H 02H 48H 01H 81H 04H 00H 00H 08H
CGLOBAL 01H 03H 0000H "getSequenceStepEnables" 08H 02H 4CH 01H 81H 04H 00H 00H 07H
CGLOBAL 01H 03H 0000H "setAddress" 08H 02H 36H 01H 81H 04H 00H 00H 07H
CGLOBAL 01H 02H 0000H "readReg16Bit" 08H 02H 3CH 01H 81H 06H 00H 00H 08H
CSGLOBAL 02H 0000H "timeoutMclksToMicroseconds" 08H 02H 51H 01H 81H 10H 00H 00H 02H
CSGLOBAL 02H 0000H "timeoutMicrosecondsToMclks" 08H 02H 52H 01H 83H 1cH 00H 00H 02H
CSGLOBAL 02H 0000H "encodeTimeout" 08H 02H 50H 01H 80H 06H 00H 00H 08H
CGLOBAL 01H 02H 0000H "getMeasurementTimingBudget" 08H 02H 43H 01H 83H 28H 00H 00H 02H
CGLOBAL 01H 03H 0000H "VL53L0X" 08H 02H 35H 01H 80H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0022H 0008H 00000016H "SequenceStepTimeouts"
CSTRUCTMEM 42H 00000002H 00000000H "pre_range_vcsel_period_pclks" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "final_range_vcsel_period_pclks" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "msrc_dss_tcc_mclks" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "pre_range_mclks" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "final_range_mclks" 02H 00H 08H
CSTRUCTMEM 42H 00000004H 0000000AH "msrc_dss_tcc_us" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000000EH "pre_range_us" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000012H "final_range_us" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0021H 0005H 00000006H "SequenceStepEnables"
CSTRUCTMEM 42H 00000001H 00000000H "tcc" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "msrc" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "dss" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "pre_range" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "final_range" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001EH 000AH 00000014H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 2BH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "requestFrom" 0AH 03H 00H 02H 2CH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 2DH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 2EH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "beginTransmission" 0AH 03H 00H 02H 2FH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000AH "write_byte" 0AH 03H 00H 02H 30H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000CH "write" 0AH 03H 00H 02H 31H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "endTransmission" 0AH 03H 00H 02H 32H 01H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 00000010H "setTimeout" 0AH 03H 00H 02H 33H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000012H "end" 0AH 03H 00H 02H 34H 01H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 001DH 001BH 00000036H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 0CH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "remove" 0AH 03H 00H 02H 0DH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "begin" 0AH 03H 00H 02H 0EH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "close" 0AH 03H 00H 02H 0FH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "send" 0AH 03H 00H 02H 11H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "send64le" 0AH 03H 00H 02H 13H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "send64be" 0AH 03H 00H 02H 15H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "rxEnable" 0AH 03H 00H 02H 17H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000010H "setPromiscuous" 0AH 03H 00H 02H 18H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000012H "setAckReq" 0AH 03H 00H 02H 19H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000014H "setBroadcastEnb" 0AH 03H 00H 02H 1AH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000016H "rxDisable" 0AH 03H 00H 02H 1BH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000018H "readData" 0AH 03H 00H 02H 1CH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001AH "getMyAddress" 0AH 03H 00H 02H 1DH 01H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 0000001CH "getMyAddr64" 0AH 03H 00H 02H 1EH 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000001EH "setMyAddress" 0AH 03H 00H 02H 1FH 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000020H "getStatus" 0AH 03H 00H 02H 20H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000022H "msgOut" 0AH 03H 00H 02H 21H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000024H "setSendMode" 0AH 03H 00H 02H 22H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000026H "getSendMode" 0AH 03H 00H 02H 23H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000028H "decMac" 0AH 03H 00H 02H 24H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 0000002AH "setKey" 0AH 03H 00H 02H 25H 01H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000002CH "setEnhanceAck" 0AH 03H 00H 02H 26H 01H 00H 00H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000002EH "getEnhanceAck" 0AH 03H 00H 02H 27H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000030H "setAckTxInterval" 0AH 03H 00H 02H 28H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000032H "getEdValue" 0AH 03H 00H 02H 29H 01H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000034H "antSwitch" 0AH 03H 00H 02H 2AH 01H 00H 00H 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0011H 000BH 00000002H "mac_fc_alignment"
CSTRUCTMEM 52H 00000003H 00000000H "frame_type" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "sec_enb" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "pending" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "ack_req" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "panid_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "nop" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000008H "seq_comp" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000009H "ielist" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000AH "dst_addr_type" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000CH "frame_ver" 02H 00H 00H
CSTRUCTMEM 52H 00000002H 0000000EH "src_addr_type" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 001CH 000BH 00000020H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "mac_header" 04H 00H 06H 12H 00H
CSTRUCTMEM 42H 00000001H 00000002H "seq_num" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "dst_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "dst_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "src_panid" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000010H "src_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000018H "raw" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001AH "raw_len" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 0000001CH "payload" 04H 03H 00H 00H 00H
CSTRUCTMEM 43H 00000002H 0000001EH "payload_len" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001BH 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "addrType" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "senseTime" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000004H "txInterval" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000006H "myAddress" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000008H "ccaWait" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 001AH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000002H "status" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0008H 0003H 00000006H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "data" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "len" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "size" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0009H 0004H 00000010H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "id" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "buf_size" 02H 00H 08H
CSTRUCTMEM 43H 00000006H 00000004H "in" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 0000000AH "out" 04H 00H 05H 08H 00H
CSTRUCTTAG 0000H 0000H 000CH 0015H 00000028H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "condition" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "ccaRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "ccaBe" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "ccaCount" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "txPower" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "txRetry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "txMode" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000009H "sequnceNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000AH "resendingNum" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000BH "rxOnEnable" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "promiscuousMode" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "ack_timeout" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000010H "status" 02H 00H 01H
CSTRUCTMEM 42H 00000004H 00000012H "total_send_bytes" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 00000016H "start_send_time" 02H 00H 02H
CSTRUCTMEM 42H 00000004H 0000001AH "last_send_time" 02H 00H 02H
CSTRUCTMEM 43H 00000002H 0000001EH "phy" 06H 03H 00H 00H 05H 09H 00H
CSTRUCTMEM 43H 00000006H 00000020H "ack" 04H 00H 05H 08H 00H
CSTRUCTMEM 42H 00000002H 00000026H "tx_ack_interval" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 0015H 0005H 0000000EH "mac_addr"
CSTRUCTMEM 42H 00000001H 00000000H "pan_coord" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "lddn_addr" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000006H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 000FH 0002H 00000004H "_Notag"
CSTRUCTMEM 42H 00000001H 00000000H "enb" 02H 00H 00H
CSTRUCTMEM 42H 00000002H 00000002H "data" 02H 00H 08H
CSTRUCTTAG 0000H 0000H 000EH 0003H 0000000EH "fc_addr"
CSTRUCTMEM 43H 00000004H 00000000H "panid" 04H 00H 05H 0FH 00H
CSTRUCTMEM 42H 00000001H 00000004H "addr_type" 02H 00H 00H
CSTRUCTMEM 43H 00000008H 00000006H "addr" 04H 00H 06H 10H 00H
CSTRUCTTAG 0000H 0000H 0013H 000AH 00000036H "mac_header"
CSTRUCTMEM 43H 00000002H 00000000H "fc" 04H 00H 06H 12H 00H
CSTRUCTMEM 43H 0000000EH 00000002H "dst" 04H 00H 05H 0EH 00H
CSTRUCTMEM 43H 0000000EH 00000010H "src" 04H 00H 05H 0EH 00H
CSTRUCTMEM 42H 00000001H 0000001EH "seq" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 0000001FH "addr_type" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000020H "rssi" 02H 00H 00H
CSTRUCTMEM 43H 00000006H 00000022H "payload" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 00000028H "raw" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000006H 0000002EH "input" 04H 00H 05H 08H 00H
CSTRUCTMEM 43H 00000002H 00000034H "payload_offset" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0014H 000CH 00000016H "rf_param"
CSTRUCTMEM 42H 00000001H 00000000H "ch" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000001H "pages" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000002H "cca_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000003H "cca_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000004H "cca_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "tx_min_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "tx_max_be" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "tx_retry" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "ant_sw" 02H 00H 00H
CSTRUCTMEM 42H 00000004H 0000000AH "ack_timeout" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 0000000EH "cca_level" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000012H "tx_power" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0016H 000AH 000000FAH "mach_param"
CSTRUCTMEM 43H 00000002H 00000000H "macl" 06H 03H 00H 00H 05H 0CH 00H
CSTRUCTMEM 43H 0000000EH 00000002H "my_addr" 04H 00H 05H 15H 00H
CSTRUCTMEM 43H 0000000EH 00000010H "coord_addr" 04H 00H 05H 15H 00H
CSTRUCTMEM 43H 00000036H 0000001EH "tx" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000036H 00000054H "rx" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000036H 0000008AH "rx_prev" 04H 00H 05H 13H 00H
CSTRUCTMEM 43H 00000036H 000000C0H "ack" 04H 00H 05H 13H 00H
CSTRUCTMEM 42H 00000001H 000000F6H "coordinator" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 000000F7H "sending" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 000000F8H "rf" 06H 03H 00H 00H 05H 14H 00H
CSTRUCTTAG 0000H 0000H 000DH 0004H 0000000EH "ieee802154_my_addr"
CSTRUCTMEM 42H 00000002H 00000000H "pan_id" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000002H "short_addr" 02H 00H 08H
CSTRUCTMEM 42H 00000008H 00000004H "ieee_addr" 05H 01H 08H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 0000000CH "pan_coord" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0006H 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0005H 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0004H 0005H 0000000AH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "write" 0AH 03H 00H 02H 7BH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000002H "read" 0AH 03H 00H 02H 7CH 00H 00H 00H 00H 00H 08H
CSTRUCTMEM 43H 00000002H 00000004H "erase" 0AH 03H 00H 02H 7DH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000006H "write_byte" 0AH 03H 00H 02H 7EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 00000008H "read_byte" 0AH 03H 00H 02H 7FH 00H 00H 00H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0003H 0008H 00000010H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "init" 0AH 03H 00H 02H 68H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "p" 0AH 03H 00H 02H 69H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000004H "l" 0AH 03H 00H 02H 6AH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "f" 0AH 03H 00H 02H 6BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "d" 0AH 03H 00H 02H 6CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "ln" 0AH 03H 00H 02H 6DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000CH "status" 0AH 03H 00H 02H 6EH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000EH "len" 0AH 03H 00H 02H 6FH 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0002H 000FH 0000001EH "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "begin" 0AH 03H 00H 02H 59H 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000002H "end" 0AH 03H 00H 02H 5AH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 43H 00000002H 00000004H "available" 0AH 03H 00H 02H 5BH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000006H "read" 0AH 03H 00H 02H 5CH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 00000008H "peek" 0AH 03H 00H 02H 5DH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000000AH "flush" 0AH 03H 00H 02H 5EH 00H 00H 00H 00H 00H 07H
CSTRUCTMEM 42H 00000002H 0000000CH "print" 0AH 03H 00H 02H 5FH 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000000EH "println" 0AH 03H 00H 02H 60H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000010H "print_long" 0AH 03H 00H 02H 61H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000012H "println_long" 0AH 03H 00H 02H 62H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000014H "print_double" 0AH 03H 00H 02H 63H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000016H "println_double" 0AH 03H 00H 02H 64H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 00000018H "write" 0AH 03H 00H 02H 65H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 42H 00000002H 0000001AH "write_byte" 0AH 03H 00H 02H 66H 00H 00H 00H 00H 00H 01H
CSTRUCTMEM 43H 00000002H 0000001CH "tx_available" 0AH 03H 00H 02H 67H 00H 00H 00H 00H 00H 01H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 0012H 0003H 00000002H "mac_frame_control"
CUNIONMEM 42H 00000002H "fc8" 05H 01H 02H 00H 00H 00H
CUNIONMEM 42H 00000002H "fc16" 02H 00H 08H
CUNIONMEM 43H 00000002H "fc_bit" 04H 00H 05H 11H 00H
CUNIONTAG 0000H 0000H 0010H 0003H 00000008H "_Notag"
CUNIONMEM 42H 00000002H "short_addr" 02H 00H 08H
CUNIONMEM 42H 00000002H "lddn_addr" 02H 00H 08H
CUNIONMEM 42H 00000008H "ieee_addr" 05H 01H 08H 00H 00H 00H
CUNIONTAG 0000H 0000H 0007H 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CENUMTAG 0000H 0000H 0020H 0002H "vcselPeriodType"
CENUMMEM 00000000H "VcselPeriodPreRange"
CENUMMEM 00000001H "VcselPeriodFinalRange"
CENUMTAG 0000H 0000H 001FH 003AH "regAddr"
CENUMMEM 00000000H "SYSRANGE_START"
CENUMMEM 0000000CH "SYSTEM_THRESH_HIGH"
CENUMMEM 0000000EH "SYSTEM_THRESH_LOW"
CENUMMEM 00000001H "SYSTEM_SEQUENCE_CONFIG"
CENUMMEM 00000009H "SYSTEM_RANGE_CONFIG"
CENUMMEM 00000004H "SYSTEM_INTERMEASUREMENT_PERIOD"
CENUMMEM 0000000AH "SYSTEM_INTERRUPT_CONFIG_GPIO"
CENUMMEM 00000084H "GPIO_HV_MUX_ACTIVE_HIGH"
CENUMMEM 0000000BH "SYSTEM_INTERRUPT_CLEAR"
CENUMMEM 00000013H "RESULT_INTERRUPT_STATUS"
CENUMMEM 00000014H "RESULT_RANGE_STATUS"
CENUMMEM 000000BCH "RESULT_CORE_AMBIENT_WINDOW_EVENTS_RTN"
CENUMMEM 000000C0H "RESULT_CORE_RANGING_TOTAL_EVENTS_RTN"
CENUMMEM 000000D0H "RESULT_CORE_AMBIENT_WINDOW_EVENTS_REF"
CENUMMEM 000000D4H "RESULT_CORE_RANGING_TOTAL_EVENTS_REF"
CENUMMEM 000000B6H "RESULT_PEAK_SIGNAL_RATE_REF"
CENUMMEM 00000028H "ALGO_PART_TO_PART_RANGE_OFFSET_MM"
CENUMMEM 0000008AH "I2C_SLAVE_DEVICE_ADDRESS"
CENUMMEM 00000060H "MSRC_CONFIG_CONTROL"
CENUMMEM 00000027H "PRE_RANGE_CONFIG_MIN_SNR"
CENUMMEM 00000056H "PRE_RANGE_CONFIG_VALID_PHASE_LOW"
CENUMMEM 00000057H "PRE_RANGE_CONFIG_VALID_PHASE_HIGH"
CENUMMEM 00000064H "PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT"
CENUMMEM 00000067H "FINAL_RANGE_CONFIG_MIN_SNR"
CENUMMEM 00000047H "FINAL_RANGE_CONFIG_VALID_PHASE_LOW"
CENUMMEM 00000048H "FINAL_RANGE_CONFIG_VALID_PHASE_HIGH"
CENUMMEM 00000044H "FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT"
CENUMMEM 00000061H "PRE_RANGE_CONFIG_SIGMA_THRESH_HI"
CENUMMEM 00000062H "PRE_RANGE_CONFIG_SIGMA_THRESH_LO"
CENUMMEM 00000050H "PRE_RANGE_CONFIG_VCSEL_PERIOD"
CENUMMEM 00000051H "PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI"
CENUMMEM 00000052H "PRE_RANGE_CONFIG_TIMEOUT_MACROP_LO"
CENUMMEM 00000081H "SYSTEM_HISTOGRAM_BIN"
CENUMMEM 00000033H "HISTOGRAM_CONFIG_INITIAL_PHASE_SELECT"
CENUMMEM 00000055H "HISTOGRAM_CONFIG_READOUT_CTRL"
CENUMMEM 00000070H "FINAL_RANGE_CONFIG_VCSEL_PERIOD"
CENUMMEM 00000071H "FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI"
CENUMMEM 00000072H "FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO"
CENUMMEM 00000020H "CROSSTALK_COMPENSATION_PEAK_RATE_MCPS"
CENUMMEM 00000046H "MSRC_CONFIG_TIMEOUT_MACROP"
CENUMMEM 000000BFH "SOFT_RESET_GO2_SOFT_RESET_N"
CENUMMEM 000000C0H "IDENTIFICATION_MODEL_ID"
CENUMMEM 000000C2H "IDENTIFICATION_REVISION_ID"
CENUMMEM 000000F8H "OSC_CALIBRATE_VAL"
CENUMMEM 00000032H "GLOBAL_CONFIG_VCSEL_WIDTH"
CENUMMEM 000000B0H "GLOBAL_CONFIG_SPAD_ENABLES_REF_0"
CENUMMEM 000000B1H "GLOBAL_CONFIG_SPAD_ENABLES_REF_1"
CENUMMEM 000000B2H "GLOBAL_CONFIG_SPAD_ENABLES_REF_2"
CENUMMEM 000000B3H "GLOBAL_CONFIG_SPAD_ENABLES_REF_3"
CENUMMEM 000000B4H "GLOBAL_CONFIG_SPAD_ENABLES_REF_4"
CENUMMEM 000000B5H "GLOBAL_CONFIG_SPAD_ENABLES_REF_5"
CENUMMEM 000000B6H "GLOBAL_CONFIG_REF_EN_START_SELECT"
CENUMMEM 0000004EH "DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD"
CENUMMEM 0000004FH "DYNAMIC_SPAD_REF_EN_START_OFFSET"
CENUMMEM 00000080H "POWER_MANAGEMENT_GO1_POWER_FORCE"
CENUMMEM 00000089H "VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV"
CENUMMEM 00000030H "ALGO_PHASECAL_LIM"
CENUMMEM 00000030H "ALGO_PHASECAL_CONFIG_TIMEOUT"
CENUMTAG 0000H 0000H 0019H 0002H "_Notag"
CENUMMEM 00000014H "SUBGHZ_PWR_20MW"
CENUMMEM 00000001H "SUBGHZ_PWR_1MW"
CENUMTAG 0000H 0000H 0018H 0002H "_Notag"
CENUMMEM 00000064H "SUBGHZ_100KBPS"
CENUMMEM 00000032H "SUBGHZ_50KBPS"
CENUMTAG 0000H 0000H 0017H 0012H "_Notag"
CENUMMEM 00000000H "SUBGHZ_OK"
CENUMMEM 00000001H "SUBGHZ_RESET_FAIL"
CENUMMEM 00000002H "SUBGHZ_SETUP_FAIL"
CENUMMEM 00000003H "SUBGHZ_SLEEP_FAIL"
CENUMMEM 00000004H "SUBGHZ_WAKEUP_FAIL"
CENUMMEM 00000005H "SUBGHZ_MYADDR_FAIL"
CENUMMEM 00000006H "SUBGHZ_SETFIL_FAIL"
CENUMMEM 00000007H "SUBGHZ_TX_COMP_FAIL"
CENUMMEM 00000008H "SUBGHZ_TX_FAIL"
CENUMMEM 00000009H "SUBGHZ_TX_CCA_FAIL"
CENUMMEM 0000000AH "SUBGHZ_TX_ACK_FAIL"
CENUMMEM 0000000BH "SUBGHZ_RX_ENB_FAIL"
CENUMMEM 0000000CH "SUBGHZ_RX_DIS_FAIL"
CENUMMEM 0000000DH "SUBGHZ_RX_COMP_FAIL"
CENUMMEM 0000000EH "SUBGHZ_PANID"
CENUMMEM 0000000FH "SUBGHZ_ERR_ADDRTYPE"
CENUMMEM 00000010H "SUBGHZ_TTL_SEND_OVR"
CENUMMEM 00000011H "SUBGHZ_DUMMY"
CENUMTAG 0000H 0000H 000BH 000EH "_Notag"
CENUMMEM 00000000H "SUBGHZ_ST_TX_START"
CENUMMEM 00000001H "SUBGHZ_ST_CCA_FAST"
CENUMMEM 00000002H "SUBGHZ_ST_CCA_IDLE_DETECT"
CENUMMEM 00000003H "SUBGHZ_ST_CCA_ABORT"
CENUMMEM 00000004H "SUBGHZ_ST_CCA_RETRY"
CENUMMEM 00000005H "SUBGHZ_ST_CCA_FAILURE"
CENUMMEM 00000006H "SUBGHZ_ST_CCA_DONE"
CENUMMEM 00000007H "SUBGHZ_ST_TX_DONE"
CENUMMEM 00000008H "SUBGHZ_ST_TX_ACK_TIMEOUT"
CENUMMEM 00000009H "SUBGHZ_ST_TX_ACK_DONE"
CENUMMEM 0000000AH "SUBGHZ_ST_RX_START"
CENUMMEM 0000000BH "SUBGHZ_ST_RX_DONE"
CENUMMEM 0000000CH "SUBGHZ_ST_RX_ACK_DONE"
CENUMMEM 0000000DH "SUBGHZ_ST_NONE"
CENUMTAG 0000H 0000H 000AH 0005H "_Notag"
CENUMMEM 00000000H "CCA_IDLE"
CENUMMEM 00000001H "CCA_FAST"
CENUMMEM 00000002H "IDLE_DETECT"
CENUMMEM 00000003H "CCA_RETRY"
CENUMMEM 00000004H "CCA_FAILURE"
CENUMTAG 0000H 0000H 0001H 0003H "_Notag"
CENUMMEM 00000001H "HALT_I2C1_END"
CENUMMEM 00000002H "HALT_I2C0_END"
CENUMMEM 00000003H "HALT_DELAY"
CTYPEDEF 0000H 0000H 43H "SUBGHZ_POWER" 04H 00H 0AH 19H 00H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 07H 00H
CTYPEDEF 0000H 0000H 43H "SubGHz_CTRL" 04H 00H 05H 1DH 00H
CTYPEDEF 0000H 0000H 43H "INT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "PHY_PARAM" 04H 00H 05H 09H 00H
CTYPEDEF 0000H 0000H 43H "TwoWire" 04H 00H 05H 1EH 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_PARAM" 04H 00H 05H 1BH 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MSG" 04H 00H 0AH 17H 00H
CTYPEDEF 0000H 0000H 42H "bool" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "t_print" 04H 00H 05H 03H 00H
CTYPEDEF 0000H 0000H 42H "byte" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "INT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "INT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_STATE" 04H 00H 0AH 0BH 00H
CTYPEDEF 0000H 0000H 43H "MACL_PARAM" 04H 00H 05H 0CH 00H
CTYPEDEF 0000H 0000H 43H "SequenceStepTimeouts" 04H 00H 05H 22H 00H
CTYPEDEF 0000H 0000H 42H "BOOLEAN" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_MAC_PARAM" 04H 00H 05H 1CH 00H
CTYPEDEF 0000H 0000H 42H "UCHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_STATUS" 04H 00H 05H 1AH 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "uint8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "SUBGHZ_RATE" 04H 00H 0AH 18H 00H
CTYPEDEF 0000H 0000H 43H "BUFFER" 04H 00H 05H 08H 00H
CTYPEDEF 0000H 0000H 43H "int8_t" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "int16_t" 02H 00H 08H
CTYPEDEF 0000H 0000H 43H "int32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "UINT8" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "DATAFLASH" 04H 00H 05H 04H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 84H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 83H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "CHAR" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HardwareSerial" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 86H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 85H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT16" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "UINT32" 02H 00H 02H
CTYPEDEF 0000H 0000H 42H "boolean" 02H 00H 00H
CTYPEDEF 0000H 0000H 42H "word" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "BOOL" 02H 00H 00H
CTYPEDEF 0000H 0000H 43H "HALT_EVENT" 04H 00H 0AH 01H 00H
CTYPEDEF 0000H 0000H 43H "CCA_STATE" 04H 00H 0AH 0AH 00H
CTYPEDEF 0000H 0000H 43H "SequenceStepEnables" 04H 00H 05H 21H 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 05H 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 06H 00H
CTYPEDEF 0000H 0000H 42H "uint32_t" 02H 00H 02H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CTYPEDEF 0000H 0000H 42H "uint16_t" 02H 00H 08H
CGLOBAL 00H 42H 0004H "measurement_timing_budget_us" 02H 00H 02H
CGLOBAL 00H 42H 0001H "address" 02H 00H 00H
CGLOBAL 00H 42H 0002H "timeout_start_ms" 02H 00H 08H
CGLOBAL 00H 42H 0002H "io_timeout" 02H 00H 08H
CGLOBAL 00H 42H 0001H "stop_variable" 02H 00H 00H
CGLOBAL 02H 01H 001EH "Serial" 04H 00H 05H 02H 00H
CGLOBAL 00H 42H 0001H "did_timeout" 02H 00H 00H
CGLOBAL 00H 42H 0001H "last_status" 02H 00H 00H
CGLOBAL 02H 01H 0014H "Wire" 04H 00H 05H 1EH 00H
CFILE 0001H 00000003H "C:\\LAZURI~1\\LIBRAR~1\\VL53L0X\\VL53L0X_ide.h"
CFILE 0002H 00000042H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite.h"
CFILE 0003H 0000007BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\common.h"
CFILE 0004H 00000F42H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\ml620504F.h"
CFILE 0005H 000000C9H "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\string.h"
CFILE 0006H 0000007AH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\yvals.h"
CFILE 0007H 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\analogio.h"
CFILE 0008H 00000022H "C:\\LAZURI~1\\hardware\\LAZURI~2\\ML620Q~1\\MCU_SM~1\\mcu.h"
CFILE 0009H 0000002BH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\digitalio.h"
CFILE 000AH 00000041H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\pin_assignment.h"
CFILE 000BH 00000051H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\lazurite_system.h"
CFILE 000CH 00000045H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\serial.h"
CFILE 000DH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\print.h"
CFILE 000EH 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_shift.h"
CFILE 000FH 0000002CH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\wiring_pulse.h"
CFILE 0010H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WInterrupts.h"
CFILE 0011H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\WMath.h"
CFILE 0012H 00000031H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\flash.h"
CFILE 0013H 0000002DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\tone.h"
CFILE 0014H 000000DAH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\stdlib.h"
CFILE 0015H 0000004FH "C:\\LazuriteIDE\\bin\\U8Dev\\Inc\\math.h"
CFILE 0016H 00000082H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\subghz_api.h"
CFILE 0017H 0000009EH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\mach.h"
CFILE 0018H 00000064H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\macl.h"
CFILE 0019H 00000032H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\common_subghz.h"
CFILE 001AH 00000062H "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\phy.h"
CFILE 001BH 0000003DH "C:\\LAZURI~1\\hardware\\LAZURI~2\\sub_ghz\\endian.h"
CFILE 001CH 00000039H "C:\\LAZURI~1\\LIBRAR~1\\Wire\\Wire.h"
CFILE 001DH 00000105H "C:\\LAZURI~1\\LIBRAR~1\\VL53L0X\\VL53L0X.h"
CFILE 001EH 00000042H "C:\\LAZURI~1\\hardware\\LAZURI~2\\lazurite\\Lazurite.h"
CFILE 0000H 000003EBH "C:\\LAZURI~1\\LIBRAR~1\\VL53L0X\\VL53L0X.c"

	rseg $$VL53L0X$VL53L0X
CFUNCTION 309

_VL53L0X	:
CBLOCK 309 1 39

;;void VL53L0X(void){
CLINEA 0000H 0001H 0027H 0001H 0013H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 309 2 39

;;  address=0x29;
CLINEA 0000H 0001H 0028H 0003H 000FH
	mov	r0,	#029h
	st	r0,	NEAR _address

;;  io_timeout=0; // no timeout
CLINEA 0000H 0001H 002AH 0003H 001DH
	mov	er0,	#0 
	st	er0,	NEAR _io_timeout

;;  did_timeout=false;
CLINEA 0000H 0001H 002BH 0003H 0014H
	st	r0,	NEAR _did_timeout
CBLOCKEND 309 2 44

;;}
CLINEA 0000H 0001H 002CH 0001H 0001H
	rt
CBLOCKEND 309 1 44
CFUNCTIONEND 309


	rseg $$setAddress$VL53L0X
CFUNCTION 310

_setAddress	:
CBLOCK 310 1 47

;;void setAddress(uint8_t new_addr){
CLINEA 0000H 0001H 002FH 0001H 0022H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	r8,	r0
CBLOCK 310 2 47
CRET 0002H
CARGUMENT 46H 0001H 001CH "new_addr" 02H 00H 00H

;;  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
CLINEA 0000H 0001H 0030H 0003H 0036H
	mov	r1,	r0
	and	r1,	#07fh
	mov	r0,	#08ah
	bl	_writeReg

;;  address = new_addr;
CLINEA 0000H 0001H 0031H 0003H 0015H
	st	r8,	NEAR _address
CBLOCKEND 310 2 50

;;}
CLINEA 0000H 0001H 0032H 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 310 1 50
CFUNCTIONEND 310


	rseg $$init_VL53L0X$VL53L0X
CFUNCTION 311

_init_VL53L0X	:
CBLOCK 311 1 60

;;bool init_VL53L0X(bool io_2v8){
CLINEA 0000H 0001H 003CH 0001H 001FH
;;*****************************************
;;	register/stack information
;;*****************************************
	_spad_type_is_aperture$2	set	-1
	_spad_count$0	set	-2
	_ref_spad_map$4	set	-8
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-08
	push	xr4
	push	bp
	push	er8
	mov	r8,	r0
CBLOCK 311 2 60
CRET 0012H
CARGUMENT 46H 0001H 001CH "io_2v8" 02H 00H 00H
CLOCAL 42H 0001H 0002H 0002H "spad_count" 02H 00H 00H
CLOCAL 42H 0001H 0001H 0002H "spad_type_is_aperture" 02H 00H 00H
CLOCAL 42H 0006H 0008H 0002H "ref_spad_map" 05H 01H 06H 00H 00H 00H
CLOCAL 46H 0001H 001DH 0002H "first_spad_to_enable" 02H 00H 00H
CLOCAL 46H 0001H 001BH 0002H "spads_enabled" 02H 00H 00H
CLOCAL 46H 0001H 001AH 0002H "i" 02H 00H 00H

;;  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
CLINEA 0000H 0001H 0040H 0003H 0061H
	l	r0,	_spad_type_is_aperture$2[fp]
	beq	_$L3
	mov	er0,	#12
	bal	_$L5
_$L3 :
	mov	er0,	#0 
_$L5 :
	mov	r9,	r0	;; _lfirst_spad_to_enable$10

;;  uint8_t spads_enabled = 0;
CLINEA 0000H 0001H 0041H 0003H 001CH
	mov	r7,	#00h	;; _lspads_enabled$12

;;  VL53L0X();
CLINEA 0000H 0001H 0044H 0003H 000CH
	bl	_VL53L0X

;;  Serial.println("init VL53L0X!");
CLINEA 0000H 0001H 0045H 0003H 0022H
	mov	r0,	#BYTE1 OFFSET $$S6
	mov	r1,	#BYTE2 OFFSET $$S6
	l	er2,	NEAR _Serial+0eh
	bl	er2

;;  Serial.print_long((long)readReg(IDENTIFICATION_MODEL_ID), HEX);
CLINEA 0000H 0001H 0047H 0003H 0041H
	l	er0,	NEAR _Serial+010h
	mov	er4,	er0
	mov	r0,	#0c0h
	bl	_readReg
	mov	r1,	r0
	mov	r0,	#010h
	push	r0
	mov	r0,	r1
	mov	r1,	#00h
	mov	er2,	#0 
	bl	er4
	add	sp,	#2 

;;  Serial.println("	ID!");
CLINEA 0000H 0001H 0048H 0003H 0019H
	mov	r0,	#BYTE1 OFFSET $$S7
	mov	r1,	#BYTE2 OFFSET $$S7
	l	er2,	NEAR _Serial+0eh
	bl	er2

;;  if (readReg(IDENTIFICATION_MODEL_ID) != 0xEE) {
CLINEA 0000H 0001H 004AH 0003H 0031H
	mov	r0,	#0c0h
	bl	_readReg
	cmp	r0,	#0eeh
	beq	_$L8
CBLOCK 311 3 74

;;  	Serial.println("Cannot check model ID!");
CLINEA 0000H 0001H 004BH 0004H 002CH
	mov	r0,	#BYTE1 OFFSET $$S10
	mov	r1,	#BYTE2 OFFSET $$S10
	l	er2,	NEAR _Serial+0eh
	bl	er2

;;  	return false; 
CLINEA 0000H 0001H 004CH 0004H 0011H
	mov	r0,	#00h
CBLOCKEND 311 3 77
CBLOCKEND 311 2 296

;;}
CLINEA 0000H 0001H 0128H 0001H 0001H
_$L2 :
	pop	er8
	pop	bp
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc

;;  }
CLINEA 0000H 0000H 004DH 0003H 0003H
_$L8 :

;;  Serial.println("success check model ID!");
CLINEA 0000H 0001H 004EH 0003H 002CH
	mov	r0,	#BYTE1 OFFSET $$S11
	mov	r1,	#BYTE2 OFFSET $$S11
	l	er2,	NEAR _Serial+0eh
	bl	er2

;;  if (io_2v8)  {
CLINEA 0000H 0001H 0053H 0003H 0010H
	cmp	r8,	#00h
	beq	_$L12
CBLOCK 311 4 83

;;      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
CLINEA 0000H 0001H 0055H 0007H 0046H
	mov	r0,	#089h
	bl	_readReg
	mov	r1,	r0
	or	r1,	#01h
	mov	r0,	#089h
	bl	_writeReg
CBLOCKEND 311 4 86

;;  }
CLINEA 0000H 0000H 0056H 0003H 0003H
_$L12 :

;;  Serial.println("Set standard mode!");
CLINEA 0000H 0001H 0058H 0003H 0027H
	mov	r0,	#BYTE1 OFFSET $$S14
	mov	r1,	#BYTE2 OFFSET $$S14
	l	er2,	NEAR _Serial+0eh
	bl	er2

;;  writeReg(0x88, 0x00);
CLINEA 0000H 0001H 005AH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#088h
	bl	_writeReg

;;  writeReg(0x80, 0x01);
CLINEA 0000H 0001H 005CH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 005DH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x00);
CLINEA 0000H 0001H 005EH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  stop_variable = readReg(0x91);
CLINEA 0000H 0000H 005FH 0003H 0020H
	mov	r0,	#091h
	bl	_readReg
	st	r0,	NEAR _stop_variable

;;  writeReg(0x00, 0x01);
CLINEA 0000H 0001H 0060H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 0061H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x80, 0x00);
CLINEA 0000H 0001H 0062H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
CLINEA 0000H 0001H 0065H 0003H 0045H
	mov	r0,	#060h
	bl	_readReg
	mov	r1,	r0
	or	r1,	#012h
	mov	r0,	#060h
	bl	_writeReg

;;  setSignalRateLimit(0.25);
CLINEA 0000H 0001H 0068H 0003H 001BH
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#03eh
	bl	_setSignalRateLimit

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
CLINEA 0000H 0001H 006AH 0003H 0029H
	mov	r1,	#0ffh
	mov	r0,	#01h
	bl	_writeReg

;;  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) {
CLINEA 0000H 0001H 0072H 0003H 003AH
	mov	er2,	fp
	add	er2,	#-1
	mov	er0,	fp
	add	er0,	#-2
	bl	_getSpadInfo
	cmp	r0,	#00h
	bne	_$L15
CBLOCK 311 5 114

;;  	return false; 
CLINEA 0000H 0001H 0073H 0004H 0011H
	mov	r0,	#00h
	b	_$L2
CBLOCKEND 311 5 116

;;  }
CLINEA 0000H 0000H 0074H 0003H 0003H
_$L15 :

;;  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
CLINEA 0000H 0001H 007AH 0003H 003FH
	mov	r0,	#06h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	r0,	#0b0h
	bl	_readMulti
	add	sp,	#2 

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 007EH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
CLINEA 0000H 0001H 007FH 0003H 0033H
	mov	r1,	#00h
	mov	r0,	#04fh
	bl	_writeReg

;;  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
CLINEA 0000H 0001H 0080H 0003H 0036H
	mov	r1,	#02ch
	mov	r0,	#04eh
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 0081H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
CLINEA 0000H 0001H 0082H 0003H 0034H
	mov	r1,	#0b4h
	mov	r0,	#0b6h
	bl	_writeReg

;;  for (i = 0; i < 48; i++)  {
CLINEA 0000H 0001H 0087H 0003H 001DH
	mov	r6,	#00h	;; _li$14
_$L21 :
CBLOCK 311 6 135

;;    if (i < first_spad_to_enable || spads_enabled == spad_count)    {
CLINEA 0000H 0001H 0088H 0005H 0045H
	cmp	r6,	r9
	blt	_$L26
	l	r0,	_spad_count$0[fp]
	cmp	r0,	r7
	bne	_$L25
_$L26 :
CBLOCK 311 7 136

;;      ref_spad_map[i / 8] &= ~(1 << (i % 8));
CLINEA 0000H 0001H 008BH 0007H 002DH
	mov	r0,	r6
	mov	r1,	#00h
	mov	bp,	er0
	bps	_$M3
	add	r12,	#07h
	addc	r13,	#00h
_$M3 :
	srlc	r12,	#03h
	sra	r13,	#03h
	add	bp,	fp
	mov	er2,	#8 
	bl	__imodu8sw
	mov	er2,	er0
	mov	er0,	#1 
_$M5 :
	cmp	r2,	#07h
	cmpc	r3,	#00h
	ble	_$M4
	sllc	r1,	#07h
	sll	r0,	#07h
	add	er2,	#-7
	bne	_$M5
_$M4 :
	sll	r0,	r2
	xor	r0,	#0ffh
	l	r1,	-8[bp]
	and	r1,	r0
	st	r1,	-8[bp]

;;    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)    {
CLINEA 0000H 0001H 008DH 0005H 0039H
	bal	_$L33
_$L25 :
	mov	r0,	r6
	mov	r1,	#00h
	mov	bp,	er0
	bps	_$M6
	add	r12,	#07h
	addc	r13,	#00h
_$M6 :
	srlc	r12,	#03h
	sra	r13,	#03h
	add	bp,	fp
	l	r4,	-8[bp]
	mov	r5,	#00h
	mov	er2,	#8 
	bl	__imodu8sw
	mov	er2,	er0
	mov	er0,	er4
_$M8 :
	cmp	r2,	#07h
	cmpc	r3,	#00h
	ble	_$M7
	srlc	r0,	#07h
	sra	r1,	#07h
	add	er2,	#-7
	bne	_$M8
_$M7 :
	srlc	r0,	r2
	tb	r0.0
	beq	_$L33
CBLOCK 311 8 141

;;      spads_enabled++;
CLINEA 0000H 0000H 008EH 0007H 0016H
	add	r7,	#01h
CBLOCKEND 311 8 143

;;    }
CLINEA 0000H 0000H 008FH 0005H 0005H
_$L33 :
CBLOCKEND 311 6 144
CBLOCKEND 311 7 296

;;  for (i = 0; i < 48; i++)  {
CLINEA 0000H 0000H 0087H 0003H 001DH
	add	r6,	#01h
	cmp	r6,	#030h
	blt	_$L21

;;  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
CLINEA 0000H 0001H 0092H 0003H 0040H
	mov	r0,	#06h
	push	r0
	mov	er2,	fp
	add	er2,	#-8
	mov	r0,	#0b0h
	bl	_writeMulti
	add	sp,	#2 

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 0099H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x00);
CLINEA 0000H 0001H 009AH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 009CH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x09, 0x00);
CLINEA 0000H 0001H 009DH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#09h
	bl	_writeReg

;;  writeReg(0x10, 0x00);
CLINEA 0000H 0001H 009EH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#010h
	bl	_writeReg

;;  writeReg(0x11, 0x00);
CLINEA 0000H 0001H 009FH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#011h
	bl	_writeReg

;;  writeReg(0x24, 0x01);
CLINEA 0000H 0001H 00A1H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#024h
	bl	_writeReg

;;  writeReg(0x25, 0xFF);
CLINEA 0000H 0001H 00A2H 0003H 0017H
	mov	r1,	#0ffh
	mov	r0,	#025h
	bl	_writeReg

;;  writeReg(0x75, 0x00);
CLINEA 0000H 0001H 00A3H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#075h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 00A5H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x4E, 0x2C);
CLINEA 0000H 0001H 00A6H 0003H 0017H
	mov	r1,	#02ch
	mov	r0,	#04eh
	bl	_writeReg

;;  writeReg(0x48, 0x00);
CLINEA 0000H 0001H 00A7H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#048h
	bl	_writeReg

;;  writeReg(0x30, 0x20);
CLINEA 0000H 0001H 00A8H 0003H 0017H
	mov	r1,	#020h
	mov	r0,	#030h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 00AAH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x30, 0x09);
CLINEA 0000H 0001H 00ABH 0003H 0017H
	mov	r1,	#09h
	mov	r0,	#030h
	bl	_writeReg

;;  writeReg(0x54, 0x00);
CLINEA 0000H 0001H 00ACH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#054h
	bl	_writeReg

;;  writeReg(0x31, 0x04);
CLINEA 0000H 0001H 00ADH 0003H 0017H
	mov	r1,	#04h
	mov	r0,	#031h
	bl	_writeReg

;;  writeReg(0x32, 0x03);
CLINEA 0000H 0001H 00AEH 0003H 0017H
	mov	r1,	#03h
	mov	r0,	#032h
	bl	_writeReg

;;  writeReg(0x40, 0x83);
CLINEA 0000H 0001H 00AFH 0003H 0017H
	mov	r1,	#083h
	mov	r0,	#040h
	bl	_writeReg

;;  writeReg(0x46, 0x25);
CLINEA 0000H 0001H 00B0H 0003H 0017H
	mov	r1,	#025h
	mov	r0,	#046h
	bl	_writeReg

;;  writeReg(0x60, 0x00);
CLINEA 0000H 0001H 00B1H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#060h
	bl	_writeReg

;;  writeReg(0x27, 0x00);
CLINEA 0000H 0001H 00B2H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#027h
	bl	_writeReg

;;  writeReg(0x50, 0x06);
CLINEA 0000H 0001H 00B3H 0003H 0017H
	mov	r1,	#06h
	mov	r0,	#050h
	bl	_writeReg

;;  writeReg(0x51, 0x00);
CLINEA 0000H 0001H 00B4H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#051h
	bl	_writeReg

;;  writeReg(0x52, 0x96);
CLINEA 0000H 0001H 00B5H 0003H 0017H
	mov	r1,	#096h
	mov	r0,	#052h
	bl	_writeReg

;;  writeReg(0x56, 0x08);
CLINEA 0000H 0001H 00B6H 0003H 0017H
	mov	r1,	#08h
	mov	r0,	#056h
	bl	_writeReg

;;  writeReg(0x57, 0x30);
CLINEA 0000H 0001H 00B7H 0003H 0017H
	mov	r1,	#030h
	mov	r0,	#057h
	bl	_writeReg

;;  writeReg(0x61, 0x00);
CLINEA 0000H 0001H 00B8H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#061h
	bl	_writeReg

;;  writeReg(0x62, 0x00);
CLINEA 0000H 0001H 00B9H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#062h
	bl	_writeReg

;;  writeReg(0x64, 0x00);
CLINEA 0000H 0001H 00BAH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#064h
	bl	_writeReg

;;  writeReg(0x65, 0x00);
CLINEA 0000H 0001H 00BBH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#065h
	bl	_writeReg

;;  writeReg(0x66, 0xA0);
CLINEA 0000H 0001H 00BCH 0003H 0017H
	mov	r1,	#0a0h
	mov	r0,	#066h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 00BEH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x22, 0x32);
CLINEA 0000H 0001H 00BFH 0003H 0017H
	mov	r1,	#032h
	mov	r0,	#022h
	bl	_writeReg

;;  writeReg(0x47, 0x14);
CLINEA 0000H 0001H 00C0H 0003H 0017H
	mov	r1,	#014h
	mov	r0,	#047h
	bl	_writeReg

;;  writeReg(0x49, 0xFF);
CLINEA 0000H 0001H 00C1H 0003H 0017H
	mov	r1,	#0ffh
	mov	r0,	#049h
	bl	_writeReg

;;  writeReg(0x4A, 0x00);
CLINEA 0000H 0001H 00C2H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#04ah
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 00C4H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x7A, 0x0A);
CLINEA 0000H 0001H 00C5H 0003H 0017H
	mov	r1,	#0ah
	mov	r0,	#07ah
	bl	_writeReg

;;  writeReg(0x7B, 0x00);
CLINEA 0000H 0001H 00C6H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#07bh
	bl	_writeReg

;;  writeReg(0x78, 0x21);
CLINEA 0000H 0001H 00C7H 0003H 0017H
	mov	r1,	#021h
	mov	r0,	#078h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 00C9H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x23, 0x34);
CLINEA 0000H 0001H 00CAH 0003H 0017H
	mov	r1,	#034h
	mov	r0,	#023h
	bl	_writeReg

;;  writeReg(0x42, 0x00);
CLINEA 0000H 0001H 00CBH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#042h
	bl	_writeReg

;;  writeReg(0x44, 0xFF);
CLINEA 0000H 0001H 00CCH 0003H 0017H
	mov	r1,	#0ffh
	mov	r0,	#044h
	bl	_writeReg

;;  writeReg(0x45, 0x26);
CLINEA 0000H 0001H 00CDH 0003H 0017H
	mov	r1,	#026h
	mov	r0,	#045h
	bl	_writeReg

;;  writeReg(0x46, 0x05);
CLINEA 0000H 0001H 00CEH 0003H 0017H
	mov	r1,	#05h
	mov	r0,	#046h
	bl	_writeReg

;;  writeReg(0x40, 0x40);
CLINEA 0000H 0001H 00CFH 0003H 0017H
	mov	r1,	#040h
	mov	r0,	#040h
	bl	_writeReg

;;  writeReg(0x0E, 0x06);
CLINEA 0000H 0001H 00D0H 0003H 0017H
	mov	r1,	#06h
	mov	r0,	#0eh
	bl	_writeReg

;;  writeReg(0x20, 0x1A);
CLINEA 0000H 0001H 00D1H 0003H 0017H
	mov	r1,	#01ah
	mov	r0,	#020h
	bl	_writeReg

;;  writeReg(0x43, 0x40);
CLINEA 0000H 0001H 00D2H 0003H 0017H
	mov	r1,	#040h
	mov	r0,	#043h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 00D4H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x34, 0x03);
CLINEA 0000H 0001H 00D5H 0003H 0017H
	mov	r1,	#03h
	mov	r0,	#034h
	bl	_writeReg

;;  writeReg(0x35, 0x44);
CLINEA 0000H 0001H 00D6H 0003H 0017H
	mov	r1,	#044h
	mov	r0,	#035h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 00D8H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x31, 0x04);
CLINEA 0000H 0001H 00D9H 0003H 0017H
	mov	r1,	#04h
	mov	r0,	#031h
	bl	_writeReg

;;  writeReg(0x4B, 0x09);
CLINEA 0000H 0001H 00DAH 0003H 0017H
	mov	r1,	#09h
	mov	r0,	#04bh
	bl	_writeReg

;;  writeReg(0x4C, 0x05);
CLINEA 0000H 0001H 00DBH 0003H 0017H
	mov	r1,	#05h
	mov	r0,	#04ch
	bl	_writeReg

;;  writeReg(0x4D, 0x04);
CLINEA 0000H 0001H 00DCH 0003H 0017H
	mov	r1,	#04h
	mov	r0,	#04dh
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 00DEH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x44, 0x00);
CLINEA 0000H 0001H 00DFH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#044h
	bl	_writeReg

;;  writeReg(0x45, 0x20);
CLINEA 0000H 0001H 00E0H 0003H 0017H
	mov	r1,	#020h
	mov	r0,	#045h
	bl	_writeReg

;;  writeReg(0x47, 0x08);
CLINEA 0000H 0001H 00E1H 0003H 0017H
	mov	r1,	#08h
	mov	r0,	#047h
	bl	_writeReg

;;  writeReg(0x48, 0x28);
CLINEA 0000H 0001H 00E2H 0003H 0017H
	mov	r1,	#028h
	mov	r0,	#048h
	bl	_writeReg

;;  writeReg(0x67, 0x00);
CLINEA 0000H 0001H 00E3H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#067h
	bl	_writeReg

;;  writeReg(0x70, 0x04);
CLINEA 0000H 0001H 00E4H 0003H 0017H
	mov	r1,	#04h
	mov	r0,	#070h
	bl	_writeReg

;;  writeReg(0x71, 0x01);
CLINEA 0000H 0001H 00E5H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#071h
	bl	_writeReg

;;  writeReg(0x72, 0xFE);
CLINEA 0000H 0001H 00E6H 0003H 0017H
	mov	r1,	#0feh
	mov	r0,	#072h
	bl	_writeReg

;;  writeReg(0x76, 0x00);
CLINEA 0000H 0001H 00E7H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#076h
	bl	_writeReg

;;  writeReg(0x77, 0x00);
CLINEA 0000H 0001H 00E8H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#077h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 00EAH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x0D, 0x01);
CLINEA 0000H 0001H 00EBH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0dh
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 00EDH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x80, 0x01);
CLINEA 0000H 0001H 00EEH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(0x01, 0xF8);
CLINEA 0000H 0001H 00EFH 0003H 0017H
	mov	r1,	#0f8h
	mov	r0,	#01h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 00F1H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x8E, 0x01);
CLINEA 0000H 0001H 00F2H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#08eh
	bl	_writeReg

;;  writeReg(0x00, 0x01);
CLINEA 0000H 0001H 00F3H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 00F4H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x80, 0x00);
CLINEA 0000H 0001H 00F5H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
CLINEA 0000H 0001H 00FCH 0003H 002FH
	mov	r1,	#04h
	mov	r0,	#0ah
	bl	_writeReg

;;  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
CLINEA 0000H 0001H 00FDH 0003H 005CH
	mov	r0,	#084h
	bl	_readReg
	mov	r1,	r0
	and	r1,	#0efh
	mov	r0,	#084h
	bl	_writeReg

;;  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
CLINEA 0000H 0001H 00FEH 0003H 0029H
	mov	r1,	#01h
	mov	r0,	#0bh
	bl	_writeReg

;;  measurement_timing_budget_us = getMeasurementTimingBudget();
CLINEA 0000H 0000H 0102H 0003H 003EH
	bl	_getMeasurementTimingBudget
	st	er0,	NEAR _measurement_timing_budget_us
	st	er2,	NEAR _measurement_timing_budget_us+02h

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
CLINEA 0000H 0001H 0109H 0003H 0029H
	mov	r1,	#0e8h
	mov	r0,	#01h
	bl	_writeReg

;;  setMeasurementTimingBudget(measurement_timing_budget_us);
CLINEA 0000H 0001H 010EH 0003H 003BH
	l	er0,	NEAR _measurement_timing_budget_us
	l	er2,	NEAR _measurement_timing_budget_us+02h
	bl	_setMeasurementTimingBudget

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
CLINEA 0000H 0001H 0116H 0003H 0029H
	mov	r1,	#01h
	mov	r0,	#01h
	bl	_writeReg

;;  if (!performSingleRefCalibration(0x40)) { return false; }
CLINEA 0000H 0001H 0117H 0003H 003BH
	mov	r0,	#040h
	bl	_performSingleRefCalibration
	cmp	r0,	#00h
	bne	_$L35
CBLOCK 311 9 279
	mov	r0,	#00h
	b	_$L2
CBLOCKEND 311 9 279
_$L35 :

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
CLINEA 0000H 0001H 011DH 0003H 0029H
	mov	r1,	#02h
	mov	r0,	#01h
	bl	_writeReg

;;  if (!performSingleRefCalibration(0x00)) { return false; }
CLINEA 0000H 0001H 011EH 0003H 003BH
	mov	r0,	#00h
	bl	_performSingleRefCalibration
	cmp	r0,	#00h
	bne	_$L39
CBLOCK 311 10 286
	mov	r0,	#00h
	b	_$L2
CBLOCKEND 311 10 286
_$L39 :

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
CLINEA 0000H 0001H 0123H 0003H 0029H
	mov	r1,	#0e8h
	mov	r0,	#01h
	bl	_writeReg

;;  return true;
CLINEA 0000H 0001H 0127H 0003H 000EH
	mov	r0,	#01h
	b	_$L2
CBLOCKEND 311 1 296
CFUNCTIONEND 311


	rseg $$writeReg$VL53L0X
CFUNCTION 312

_writeReg	:
CBLOCK 312 1 299

;;void writeReg(uint8_t reg, uint8_t value){
CLINEA 0000H 0001H 012BH 0001H 002AH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 312 2 299
CRET 0002H
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CARGUMENT 46H 0001H 001DH "value" 02H 00H 00H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 012CH 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 012DH 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte(value);
CLINEA 0000H 0001H 012EH 0003H 0019H
	mov	r0,	r9
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 012FH 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status
CBLOCKEND 312 2 304

;;}
CLINEA 0000H 0001H 0130H 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 312 1 304
CFUNCTIONEND 312


	rseg $$writeReg16Bit$VL53L0X
CFUNCTION 313

_writeReg16Bit	:
CBLOCK 313 1 307

;;void writeReg16Bit(uint8_t reg, uint16_t value){
CLINEA 0000H 0001H 0133H 0001H 0030H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	mov	r8,	r0
	mov	er10,	er2
CBLOCK 313 2 307
CRET 0004H
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CARGUMENT 46H 0002H 0029H "value" 02H 00H 01H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 0134H 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 0135H 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte((value >> 8) & 0xFF); // value high byte
CLINEA 0000H 0001H 0136H 0003H 003AH
	mov	r0,	r11
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte( value       & 0xFF); // value low byte
CLINEA 0000H 0001H 0137H 0003H 0039H
	mov	r0,	r10
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 0138H 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status
CBLOCKEND 313 2 313

;;}
CLINEA 0000H 0001H 0139H 0001H 0001H
	pop	xr8
	pop	pc
CBLOCKEND 313 1 313
CFUNCTIONEND 313


	rseg $$writeReg32Bit$VL53L0X
CFUNCTION 314

_writeReg32Bit	:
CBLOCK 314 1 316

;;void writeReg32Bit(uint8_t reg, uint32_t value){
CLINEA 0000H 0001H 013CH 0001H 0030H
;;*****************************************
;;	register/stack information
;;*****************************************
	_value$2	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	er8
	mov	r8,	r0
CBLOCK 314 2 316
CRET 0004H
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CARGUMENT 42H 0004H 0004H "value" 02H 00H 02H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 013DH 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 013EH 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte((value >> 24) & 0xFF); // value highest byte
CLINEA 0000H 0001H 013FH 0003H 003EH
	l	r0,	_value$2+03h[fp]
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte((value >> 16) & 0xFF);
CLINEA 0000H 0001H 0140H 0003H 0028H
	l	er0,	_value$2+02h[fp]
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte((value >>  8) & 0xFF);
CLINEA 0000H 0001H 0141H 0003H 0028H
	l	r0,	_value$2+01h[fp]
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  Wire.write_byte( value        & 0xFF); // value lowest byte
CLINEA 0000H 0001H 0142H 0003H 003DH
	l	r0,	_value$2[fp]
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 0143H 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status
CBLOCKEND 314 2 324

;;}
CLINEA 0000H 0001H 0144H 0001H 0001H
	pop	er8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 314 1 324
CFUNCTIONEND 314


	rseg $$readReg$VL53L0X
CFUNCTION 315

_readReg	:
CBLOCK 315 1 327

;;uint8_t readReg(uint8_t reg){
CLINEA 0000H 0001H 0147H 0001H 001DH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	push	er4
	mov	r8,	r0
CBLOCK 315 2 327
CRET 0004H
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CLOCAL 46H 0001H 0014H 0002H "value" 02H 00H 00H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 014AH 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 014BH 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 014CH 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status

;;  Wire.requestFrom(address, (uint8_t)1, true);
CLINEA 0000H 0001H 014EH 0003H 002EH
	mov	r2,	#01h
	mov	r1,	#01h
	l	r0,	NEAR _address
	l	er4,	NEAR _Wire+02h
	bl	er4

;;  value = Wire.read();
CLINEA 0000H 0000H 014FH 0003H 0016H
	l	er0,	NEAR _Wire+06h
	bl	er0

;;  return value;
CLINEA 0000H 0001H 0151H 0003H 000FH
CBLOCKEND 315 2 338

;;}
CLINEA 0000H 0000H 0152H 0001H 0001H
	pop	er4
	pop	er8
	pop	pc
CBLOCKEND 315 1 338
CFUNCTIONEND 315


	rseg $$readReg16Bit$VL53L0X
CFUNCTION 316

_readReg16Bit	:
CBLOCK 316 1 341

;;uint16_t readReg16Bit(uint8_t reg){
CLINEA 0000H 0001H 0155H 0001H 0023H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	push	er4
	mov	r8,	r0
CBLOCK 316 2 341
CRET 0004H
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CLOCAL 46H 0002H 0026H 0002H "value" 02H 00H 08H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 0158H 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 0159H 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 015AH 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status

;;  Wire.requestFrom(address, (uint8_t)2, true);
CLINEA 0000H 0001H 015CH 0003H 002EH
	mov	r2,	#01h
	mov	r1,	#02h
	l	r0,	NEAR _address
	l	er4,	NEAR _Wire+02h
	bl	er4

;;  value  = (uint16_t)Wire.read() << 8; // value high byte
CLINEA 0000H 0000H 015DH 0003H 0039H
	l	er0,	NEAR _Wire+06h
	bl	er0
	mov	r1,	r0
	mov	r0,	#00h
	mov	er4,	er0	;; _lvalue$0

;;  value |=           Wire.read();      // value low byte
CLINEA 0000H 0001H 015EH 0003H 0038H
	l	er0,	NEAR _Wire+06h
	bl	er0
	mov	er2,	er0
	mov	er0,	er4
	or	r0,	r2
	or	r1,	r3

;;  return value;
CLINEA 0000H 0001H 0160H 0003H 000FH
CBLOCKEND 316 2 353

;;}
CLINEA 0000H 0000H 0161H 0001H 0001H
	pop	er4
	pop	er8
	pop	pc
CBLOCKEND 316 1 353
CFUNCTIONEND 316


	rseg $$readReg32Bit$VL53L0X
CFUNCTION 317

_readReg32Bit	:
CBLOCK 317 1 356

;;uint32_t readReg32Bit(uint8_t reg){
CLINEA 0000H 0001H 0164H 0001H 0023H
;;*****************************************
;;	register/stack information
;;*****************************************
	_value$0	set	-4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-04
	push	xr4
	push	er8
	mov	r8,	r0
CBLOCK 317 2 356
CRET 000CH
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CLOCAL 42H 0004H 0004H 0002H "value" 02H 00H 02H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 0167H 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 0168H 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 0169H 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status

;;  Wire.requestFrom(address, (uint8_t)4, true);
CLINEA 0000H 0001H 016BH 0003H 002EH
	mov	r2,	#01h
	mov	r1,	#04h
	l	r0,	NEAR _address
	l	er4,	NEAR _Wire+02h
	bl	er4

;;  value  = (uint32_t)Wire.read() << 24; // value highest byte
CLINEA 0000H 0000H 016CH 0003H 003DH
	l	er0,	NEAR _Wire+06h
	bl	er0
	mov	r3,	r0
	mov	r2,	#00h
	mov	er0,	#0 
	st	er0,	_value$0[fp]
	st	er2,	_value$0+02h[fp]

;;  value |= (uint32_t)Wire.read() << 16;
CLINEA 0000H 0001H 016DH 0003H 0027H
	l	er0,	NEAR _Wire+06h
	bl	er0
	mov	er2,	er0
	mov	er4,	#0 
	mov	er6,	er2
	l	er0,	_value$0[fp]
	l	er2,	_value$0+02h[fp]
	or	r0,	r4
	or	r1,	r5
	or	r2,	r6
	or	r3,	r7
	st	er0,	_value$0[fp]
	st	er2,	_value$0+02h[fp]

;;  value |= (uint16_t)Wire.read() <<  8;
CLINEA 0000H 0001H 016EH 0003H 0027H
	l	er0,	NEAR _Wire+06h
	bl	er0
	mov	r1,	r0
	mov	r0,	#00h
	mov	er4,	er0
	mov	er6,	#0 
	l	er0,	_value$0[fp]
	l	er2,	_value$0+02h[fp]
	or	r0,	r4
	or	r1,	r5
	or	r2,	r6
	or	r3,	r7
	st	er0,	_value$0[fp]
	st	er2,	_value$0+02h[fp]

;;  value |=           Wire.read();       // value lowest byte
CLINEA 0000H 0001H 016FH 0003H 003CH
	l	er0,	NEAR _Wire+06h
	bl	er0
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	mov	er4,	er0
	mov	er6,	er2
	l	er0,	_value$0[fp]
	l	er2,	_value$0+02h[fp]
	or	r0,	r4
	or	r1,	r5
	or	r2,	r6
	or	r3,	r7
	st	er0,	_value$0[fp]
	st	er2,	_value$0+02h[fp]

;;  return value;
CLINEA 0000H 0001H 0171H 0003H 000FH
CBLOCKEND 317 2 370

;;}
CLINEA 0000H 0000H 0172H 0001H 0001H
	pop	er8
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 317 1 370
CFUNCTIONEND 317


	rseg $$writeMulti$VL53L0X
CFUNCTION 318

_writeMulti	:
CBLOCK 318 1 374

;;void writeMulti(uint8_t reg, uint8_t const * src, uint8_t count){
CLINEA 0000H 0001H 0176H 0001H 0041H
;;*****************************************
;;	register/stack information
;;*****************************************
	_count$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	push	er4
	mov	r8,	r0
	mov	er10,	er2
CBLOCK 318 2 374
CRET 0008H
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CARGUMENT 44H 0002H 0029H "src" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "count" 02H 00H 00H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 0177H 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 0178H 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  while (count-- > 0)
CLINEA 0000H 0000H 017AH 0001H 0001H
	bal	_$L54

;;  while (count-- > 0)
CLINEA 0000H 0000H 017AH 0003H 0015H
_$L52 :
CBLOCK 318 3 379

;;    Wire.write_byte(*(src++));
CLINEA 0000H 0001H 017CH 0005H 001EH
	l	er0,	NEAR _Wire+0ah
	mov	er4,	er0
	l	r0,	[er10]
	add	er10,	#1 
	bl	er4
CBLOCKEND 318 3 381

;;  while (count-- > 0)
CLINEA 0000H 0000H 017AH 0001H 0001H
_$L54 :
	l	r0,	_count$4[fp]
	mov	r1,	r0
	add	r0,	#0ffh
	st	r0,	_count$4[fp]
	cmp	r1,	#00h
	bgt	_$L52

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 017FH 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status
CBLOCKEND 318 2 384

;;}
CLINEA 0000H 0001H 0180H 0001H 0001H
	pop	er4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 318 1 384
CFUNCTIONEND 318


	rseg $$readMulti$VL53L0X
CFUNCTION 319

_readMulti	:
CBLOCK 319 1 388

;;void readMulti(uint8_t reg, uint8_t * dst, uint8_t count){
CLINEA 0000H 0001H 0184H 0001H 003AH
;;*****************************************
;;	register/stack information
;;*****************************************
	_count$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	push	xr8
	push	bp
	push	er4
	mov	r8,	r0
	mov	er10,	er2
CBLOCK 319 2 388
CRET 000AH
CARGUMENT 46H 0001H 001CH "reg" 02H 00H 00H
CARGUMENT 46H 0002H 0029H "dst" 04H 03H 00H 00H 00H
CARGUMENT 42H 0001H 0004H "count" 02H 00H 00H

;;  Wire.beginTransmission(address);
CLINEA 0000H 0001H 0185H 0003H 0022H
	l	r0,	NEAR _address
	l	er2,	NEAR _Wire+08h
	bl	er2

;;  Wire.write_byte(reg);
CLINEA 0000H 0001H 0186H 0003H 0017H
	mov	r0,	r8
	l	er2,	NEAR _Wire+0ah
	bl	er2

;;  last_status = Wire.endTransmission(true);
CLINEA 0000H 0000H 0187H 0003H 002BH
	mov	r0,	#01h
	l	er2,	NEAR _Wire+0eh
	bl	er2
	st	r0,	NEAR _last_status

;;  Wire.requestFrom(address, count, true);
CLINEA 0000H 0001H 0189H 0003H 0029H
	mov	r2,	#01h
	l	r1,	_count$4[fp]
	l	r0,	NEAR _address
	l	er4,	NEAR _Wire+02h
	bl	er4

;;  while (count-- > 0)
CLINEA 0000H 0000H 018BH 0001H 0001H
	bal	_$L60

;;  while (count-- > 0)
CLINEA 0000H 0000H 018BH 0003H 0015H
_$L58 :
CBLOCK 319 3 396

;;    *(dst++) = Wire.read();
CLINEA 0000H 0001H 018DH 0005H 001BH
	mov	bp,	er10
	add	er10,	#1 
	l	er0,	NEAR _Wire+06h
	bl	er0
	st	r0,	[bp]
CBLOCKEND 319 3 398

;;  while (count-- > 0)
CLINEA 0000H 0000H 018BH 0001H 0001H
_$L60 :
	l	r0,	_count$4[fp]
	mov	r1,	r0
	add	r0,	#0ffh
	st	r0,	_count$4[fp]
	cmp	r1,	#00h
	bgt	_$L58
CBLOCKEND 319 2 399

;;}
CLINEA 0000H 0001H 018FH 0001H 0001H
	pop	er4
	pop	bp
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 319 1 399
CFUNCTIONEND 319


	rseg $$setSignalRateLimit$VL53L0X
CFUNCTION 320

_setSignalRateLimit	:
CBLOCK 320 1 409

;;bool setSignalRateLimit(float limit_Mcps){
CLINEA 0000H 0001H 0199H 0001H 002AH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	push	xr4
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 320 2 409
CRET 0008H
CARGUMENT 47H 0004H 2928H "limit_Mcps" 02H 00H 03H

;;  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
CLINEA 0000H 0001H 019AH 0003H 003EH
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L63
	push	xr8
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#0a4h
	mov	r1,	#070h
	mov	r2,	#03dh
	mov	r3,	#0ah
	mov	er4,	#-41
	mov	r6,	#07fh
	mov	r7,	#040h
	push	qr0
	bl	__dcmpu8sw
	add	sp,	#16
	mov	psw,	r0
	ble	_$L62
_$L63 :
CBLOCK 320 3 410
	mov	r0,	#00h
CBLOCKEND 320 3 410
CBLOCKEND 320 2 415

;;}
CLINEA 0000H 0001H 019FH 0001H 0001H
_$L61 :
	pop	xr4
	pop	xr8
	pop	pc

;;  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
CLINEA 0000H 0000H 019AH 0003H 003EH
_$L62 :

;;  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
CLINEA 0000H 0001H 019DH 0003H 0054H
	push	xr8
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#043h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er2
	add	sp,	#2 
	mov	r0,	#044h
	bl	_writeReg16Bit

;;  return true;
CLINEA 0000H 0001H 019EH 0003H 000EH
	mov	r0,	#01h
	bal	_$L61
CBLOCKEND 320 1 415
CFUNCTIONEND 320


	rseg $$getSignalRateLimit$VL53L0X
CFUNCTION 321

_getSignalRateLimit	:
CBLOCK 321 1 418

;;float getSignalRateLimit(void){
CLINEA 0000H 0001H 01A2H 0001H 001FH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 321 2 418
CRET 0000H

;;  return (float)readReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT) / (1 << 7);
CLINEA 0000H 0001H 01A3H 0003H 0055H
	mov	r0,	#044h
	bl	_readReg16Bit
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	mov	er0,	#0 
	mov	r3,	#043h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
CBLOCKEND 321 2 420

;;}
CLINEA 0000H 0000H 01A4H 0001H 0001H
	pop	pc
CBLOCKEND 321 1 420
CFUNCTIONEND 321


	rseg $$setMeasurementTimingBudget$VL53L0X
CFUNCTION 322

_setMeasurementTimingBudget	:
CBLOCK 322 1 429

;;bool setMeasurementTimingBudget(uint32_t budget_us){
CLINEA 0000H 0001H 01ADH 0001H 0034H
;;*****************************************
;;	register/stack information
;;*****************************************
	_used_budget_us$46	set	-32
	_enables$0	set	-6
	_timeouts$6	set	-28
	_final_range_timeout_mclks$54	set	-36
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-036
	push	xr8
	push	xr4
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 322 2 429
CRET 002EH
CARGUMENT 46H 0004H 2928H "budget_us" 02H 00H 02H
CLOCAL 43H 0006H 0006H 0002H "enables" 04H 00H 05H 21H 00H
CLOCAL 43H 0016H 001CH 0002H "timeouts" 04H 00H 05H 22H 00H
CLOCAL 4AH 0002H 0000H 0002H "StartOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "EndOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "MsrcOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "TccOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "DssOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "PreRangeOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "FinalRangeOverhead" 02H 00H 08H
CLOCAL 4AH 0004H 0000H 0002H "MinTimingBudget" 02H 00H 02H
CLOCAL 42H 0004H 0020H 0002H "used_budget_us" 02H 00H 02H
CLOCAL 4AH 0004H 0000H 0002H "final_range_timeout_us" 02H 00H 02H
CLOCAL 42H 0004H 0024H 0002H "final_range_timeout_mclks" 02H 00H 02H

;;  uint32_t used_budget_us = StartOverhead + EndOverhead;
CLINEA 0000H 0001H 01BBH 0003H 0038H
	mov	r0,	#036h
	mov	r1,	#0bh
	mov	er2,	#0 
	st	er0,	_used_budget_us$46[fp]
	st	er2,	_used_budget_us$46+02h[fp]

;;  if (budget_us < MinTimingBudget) { return false; }
CLINEA 0000H 0001H 01C0H 0003H 0034H
	cmp	r8,	#020h
	cmpc	r9,	#04eh
	cmpc	r10,	#00h
	cmpc	r11,	#00h
	bge	_$L71
CBLOCK 322 3 448
	mov	r0,	#00h
CBLOCKEND 322 3 448
CBLOCKEND 322 2 510

;;}
CLINEA 0000H 0001H 01FEH 0001H 0001H
_$L70 :
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc

;;  if (budget_us < MinTimingBudget) { return false; }
CLINEA 0000H 0000H 01C0H 0003H 0034H
_$L71 :

;;  getSequenceStepEnables(&enables);
CLINEA 0000H 0001H 01C4H 0003H 0023H
	mov	er0,	fp
	add	er0,	#-6
	bl	_getSequenceStepEnables

;;  getSequenceStepTimeouts(enables.pre_range, &timeouts);
CLINEA 0000H 0001H 01C5H 0003H 0038H
	mov	er2,	fp
	add	er2,	#-28
	l	r0,	_enables$0+03h[fp]
	bl	_getSequenceStepTimeouts

;;  if (enables.tcc)  {
CLINEA 0000H 0001H 01C7H 0003H 0015H
	l	r0,	_enables$0[fp]
	beq	_$L73
CBLOCK 322 4 455

;;    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
CLINEA 0000H 0001H 01C8H 0005H 003FH
	l	er0,	_timeouts$6+0ah[fp]
	l	er2,	_timeouts$6+0ch[fp]
	add	r0,	#084h
	addc	r1,	#0dh
	addc	r2,	#00h
	addc	r3,	#00h
	st	er0,	_used_budget_us$46[fp]
	st	er2,	_used_budget_us$46+02h[fp]
CBLOCKEND 322 4 457

;;  }
CLINEA 0000H 0000H 01C9H 0003H 0003H
_$L73 :

;;  if (enables.dss)  {
CLINEA 0000H 0001H 01CBH 0003H 0015H
	l	r0,	_enables$0+02h[fp]
	beq	_$L75
CBLOCK 322 5 459

;;    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
CLINEA 0000H 0001H 01CCH 0005H 0043H
	l	er0,	_timeouts$6+0ah[fp]
	l	er2,	_timeouts$6+0ch[fp]
	add	r0,	#0b2h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	sllc	r3,	#01h
	sllc	r2,	#01h
	sllc	r1,	#01h
	sll	r0,	#01h
	mov	er4,	er0
	mov	er6,	er2
	l	er0,	_used_budget_us$46[fp]
	l	er2,	_used_budget_us$46+02h[fp]
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	st	er0,	_used_budget_us$46[fp]
	st	er2,	_used_budget_us$46+02h[fp]

;;  else if (enables.msrc)  {
CLINEA 0000H 0001H 01CEH 0003H 001BH
	bal	_$L78
_$L75 :
	l	r0,	_enables$0+01h[fp]
	beq	_$L78
CBLOCK 322 6 462

;;    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
CLINEA 0000H 0001H 01CFH 0005H 0040H
	l	er0,	_timeouts$6+0ah[fp]
	l	er2,	_timeouts$6+0ch[fp]
	add	r0,	#094h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	mov	er4,	er0
	mov	er6,	er2
	l	er0,	_used_budget_us$46[fp]
	l	er2,	_used_budget_us$46+02h[fp]
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	st	er0,	_used_budget_us$46[fp]
	st	er2,	_used_budget_us$46+02h[fp]
CBLOCKEND 322 6 464

;;  }
CLINEA 0000H 0000H 01D0H 0003H 0003H
_$L78 :

;;  if (enables.pre_range)  {
CLINEA 0000H 0001H 01D2H 0003H 001BH
	l	r0,	_enables$0+03h[fp]
	beq	_$L80
CBLOCKEND 322 5 510
CBLOCK 322 7 466

;;    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
CLINEA 0000H 0001H 01D3H 0005H 0041H
	l	er0,	_timeouts$6+0eh[fp]
	l	er2,	_timeouts$6+010h[fp]
	add	r0,	#094h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	mov	er4,	er0
	mov	er6,	er2
	l	er0,	_used_budget_us$46[fp]
	l	er2,	_used_budget_us$46+02h[fp]
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	st	er0,	_used_budget_us$46[fp]
	st	er2,	_used_budget_us$46+02h[fp]
CBLOCKEND 322 7 468

;;  }
CLINEA 0000H 0000H 01D4H 0003H 0003H
_$L80 :

;;  if (enables.final_range)  {
CLINEA 0000H 0001H 01D6H 0003H 001DH
	l	r0,	_enables$0+04h[fp]
	beq	_$L82
CBLOCK 322 8 470

;;    used_budget_us += FinalRangeOverhead;
CLINEA 0000H 0001H 01D7H 0005H 0029H
	l	er0,	_used_budget_us$46[fp]
	l	er2,	_used_budget_us$46+02h[fp]
	add	r0,	#026h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	st	er0,	_used_budget_us$46[fp]
	st	er2,	_used_budget_us$46+02h[fp]

;;    if (used_budget_us > budget_us)    {
CLINEA 0000H 0001H 01DFH 0005H 0028H
	cmp	er0,	er8
	cmpc	r2,	r10
	cmpc	r3,	r11
	ble	_$L84
CBLOCK 322 9 479

;;      return false;
CLINEA 0000H 0001H 01E1H 0007H 0013H
	mov	r0,	#00h
	b	_$L70
CBLOCKEND 322 9 482

;;    }
CLINEA 0000H 0000H 01E2H 0005H 0005H
_$L84 :

;;                                 timeouts.final_range_vcsel_period_pclks);
CLINEA 0000H 0000H 01F0H 0022H 004AH
	l	r0,	_timeouts$6+02h[fp]
	push	r0
	mov	er0,	er8
	mov	er2,	er10
	l	er4,	_used_budget_us$46[fp]
	l	er6,	_used_budget_us$46+02h[fp]
	sub	r0,	r4
	subc	r1,	r5
	subc	r2,	r6
	subc	r3,	r7
	bl	_timeoutMicrosecondsToMclks
	add	sp,	#2 
	st	er0,	_final_range_timeout_mclks$54[fp]
	st	er2,	_final_range_timeout_mclks$54+02h[fp]

;;    if (enables.pre_range)    {
CLINEA 0000H 0001H 01F2H 0005H 001FH
	l	r0,	_enables$0+03h[fp]
	beq	_$L86
CBLOCK 322 10 498

;;      final_range_timeout_mclks += timeouts.pre_range_mclks;
CLINEA 0000H 0001H 01F3H 0007H 003CH
	l	er0,	_timeouts$6+06h[fp]
	mov	er4,	er0
	mov	er6,	#0 
	l	er0,	_final_range_timeout_mclks$54[fp]
	l	er2,	_final_range_timeout_mclks$54+02h[fp]
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	st	er0,	_final_range_timeout_mclks$54[fp]
	st	er2,	_final_range_timeout_mclks$54+02h[fp]
CBLOCKEND 322 10 500

;;    }
CLINEA 0000H 0000H 01F4H 0005H 0005H
_$L86 :

;;      encodeTimeout(final_range_timeout_mclks));
CLINEA 0000H 0001H 01F7H 0007H 0030H
	l	er0,	_final_range_timeout_mclks$54[fp]
	bl	_encodeTimeout
	mov	er2,	er0
	mov	r0,	#071h
	bl	_writeReg16Bit

;;    measurement_timing_budget_us = budget_us; // store for internal reuse
CLINEA 0000H 0001H 01FBH 0005H 0049H
	st	er8,	NEAR _measurement_timing_budget_us
	st	er10,	NEAR _measurement_timing_budget_us+02h
CBLOCKEND 322 8 508

;;  }
CLINEA 0000H 0000H 01FCH 0003H 0003H
_$L82 :

;;  return true;
CLINEA 0000H 0001H 01FDH 0003H 000EH
	mov	r0,	#01h
	b	_$L70
CBLOCKEND 322 1 510
CFUNCTIONEND 322


	rseg $$getMeasurementTimingBudget$VL53L0X
CFUNCTION 323

_getMeasurementTimingBudget	:
CBLOCK 323 1 515

;;uint32_t getMeasurementTimingBudget(void){
CLINEA 0000H 0001H 0203H 0001H 002AH
;;*****************************************
;;	register/stack information
;;*****************************************
	_enables$0	set	-6
	_timeouts$6	set	-28
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-028
	push	xr8
	push	xr4
CBLOCK 323 2 515
CRET 0026H
CLOCAL 43H 0006H 0006H 0002H "enables" 04H 00H 05H 21H 00H
CLOCAL 43H 0016H 001CH 0002H "timeouts" 04H 00H 05H 22H 00H
CLOCAL 4AH 0002H 0000H 0002H "StartOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "EndOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "MsrcOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "TccOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "DssOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "PreRangeOverhead" 02H 00H 08H
CLOCAL 4AH 0002H 0000H 0002H "FinalRangeOverhead" 02H 00H 08H
CLOCAL 46H 0004H 2928H 0002H "budget_us" 02H 00H 02H

;;  uint32_t budget_us = StartOverhead + EndOverhead;
CLINEA 0000H 0001H 0210H 0003H 0033H
	mov	r0,	#036h
	mov	r1,	#0bh
	mov	er8,	er0	;; _lbudget_us$42
	mov	er10,	#0 	;; _lbudget_us$42

;;  getSequenceStepEnables(&enables);
CLINEA 0000H 0001H 0212H 0003H 0023H
	mov	er0,	fp
	add	er0,	#-6
	bl	_getSequenceStepEnables

;;  getSequenceStepTimeouts(enables.pre_range, &timeouts);
CLINEA 0000H 0001H 0213H 0003H 0038H
	mov	er2,	fp
	add	er2,	#-28
	l	r0,	_enables$0+03h[fp]
	bl	_getSequenceStepTimeouts

;;  if (enables.tcc)  {
CLINEA 0000H 0001H 0215H 0003H 0015H
	l	r0,	_enables$0[fp]
	beq	_$L89
CBLOCK 323 3 533

;;    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
CLINEA 0000H 0001H 0216H 0005H 003AH
	l	er0,	_timeouts$6+0ah[fp]
	l	er2,	_timeouts$6+0ch[fp]
	add	r0,	#084h
	addc	r1,	#0dh
	addc	r2,	#00h
	addc	r3,	#00h
	mov	er8,	er0	;; _lbudget_us$42
	mov	er10,	er2	;; _lbudget_us$42
CBLOCKEND 323 3 535

;;  }
CLINEA 0000H 0000H 0217H 0003H 0003H
_$L89 :

;;  if (enables.dss)  {
CLINEA 0000H 0001H 0219H 0003H 0015H
	l	r0,	_enables$0+02h[fp]
	beq	_$L91
CBLOCK 323 4 537

;;    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
CLINEA 0000H 0001H 021AH 0005H 003EH
	l	er0,	_timeouts$6+0ah[fp]
	l	er2,	_timeouts$6+0ch[fp]
	add	r0,	#0b2h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	sllc	r3,	#01h
	sllc	r2,	#01h
	sllc	r1,	#01h
	sll	r0,	#01h
	mov	er4,	er0
	mov	er6,	er2
	mov	er0,	er8
	mov	er2,	er10
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	mov	er8,	er0	;; _lbudget_us$42
	mov	er10,	er2	;; _lbudget_us$42

;;  else if (enables.msrc)  {
CLINEA 0000H 0001H 021CH 0003H 001BH
	bal	_$L94
_$L91 :
	l	r0,	_enables$0+01h[fp]
	beq	_$L94
CBLOCK 323 5 540

;;    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
CLINEA 0000H 0001H 021DH 0005H 003BH
	l	er0,	_timeouts$6+0ah[fp]
	l	er2,	_timeouts$6+0ch[fp]
	add	r0,	#094h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	mov	er4,	er0
	mov	er6,	er2
	mov	er0,	er8
	mov	er2,	er10
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	mov	er8,	er0	;; _lbudget_us$42
	mov	er10,	er2	;; _lbudget_us$42
CBLOCKEND 323 5 542

;;  }
CLINEA 0000H 0000H 021EH 0003H 0003H
_$L94 :

;;  if (enables.pre_range)  {
CLINEA 0000H 0001H 0220H 0003H 001BH
	l	r0,	_enables$0+03h[fp]
	beq	_$L96
CBLOCKEND 323 4 554
CBLOCK 323 6 544

;;    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
CLINEA 0000H 0001H 0221H 0005H 003CH
	l	er0,	_timeouts$6+0eh[fp]
	l	er2,	_timeouts$6+010h[fp]
	add	r0,	#094h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	mov	er4,	er0
	mov	er6,	er2
	mov	er0,	er8
	mov	er2,	er10
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	mov	er8,	er0	;; _lbudget_us$42
	mov	er10,	er2	;; _lbudget_us$42
CBLOCKEND 323 6 546

;;  }
CLINEA 0000H 0000H 0222H 0003H 0003H
_$L96 :

;;  if (enables.final_range)  {
CLINEA 0000H 0001H 0224H 0003H 001DH
	l	r0,	_enables$0+04h[fp]
	beq	_$L98
CBLOCK 323 7 548

;;    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
CLINEA 0000H 0001H 0225H 0005H 0040H
	l	er0,	_timeouts$6+012h[fp]
	l	er2,	_timeouts$6+014h[fp]
	add	r0,	#026h
	addc	r1,	#02h
	addc	r2,	#00h
	addc	r3,	#00h
	mov	er4,	er0
	mov	er6,	er2
	mov	er0,	er8
	mov	er2,	er10
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	mov	er8,	er0	;; _lbudget_us$42
	mov	er10,	er2	;; _lbudget_us$42
CBLOCKEND 323 7 550

;;  }
CLINEA 0000H 0000H 0226H 0003H 0003H
_$L98 :

;;  measurement_timing_budget_us = budget_us; // store for internal reuse
CLINEA 0000H 0001H 0228H 0003H 0047H
	mov	er0,	er8
	mov	er2,	er10
	st	er8,	NEAR _measurement_timing_budget_us
	st	er10,	NEAR _measurement_timing_budget_us+02h

;;  return budget_us;
CLINEA 0000H 0001H 0229H 0003H 0013H
CBLOCKEND 323 2 554

;;}
CLINEA 0000H 0000H 022AH 0001H 0001H
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 323 1 554
CFUNCTIONEND 323


	rseg $$setVcselPulsePeriod$VL53L0X
CFUNCTION 324

_setVcselPulsePeriod	:
CBLOCK 324 1 563

;;bool setVcselPulsePeriod(enum vcselPeriodType type, uint8_t period_pclks){
CLINEA 0000H 0001H 0233H 0001H 004AH
;;*****************************************
;;	register/stack information
;;*****************************************
	_enables$10	set	-6
	_timeouts$16	set	-28
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-028
	push	xr8
	push	er4
	mov	r10,	r2
	mov	er8,	er0
CBLOCK 324 2 563
CRET 0024H
CARGUMENT 47H 0002H 0028H "type" 04H 00H 0AH 20H 00H
CARGUMENT 46H 0001H 001EH "period_pclks" 02H 00H 00H
CLOCAL 46H 0001H 0018H 0002H "vcsel_period_reg" 02H 00H 00H
CLOCAL 46H 0002H 0024H 0002H "new_pre_range_timeout_mclks" 02H 00H 08H
CLOCAL 46H 0002H 0024H 0002H "new_msrc_timeout_mclks" 02H 00H 08H
CLOCAL 46H 0002H 0025H 0002H "new_final_range_timeout_mclks" 02H 00H 08H
CLOCAL 46H 0001H 0018H 0002H "sequence_config" 02H 00H 00H
CLOCAL 43H 0006H 0006H 0002H "enables" 04H 00H 05H 21H 00H
CLOCAL 43H 0016H 001CH 0002H "timeouts" 04H 00H 05H 22H 00H

;;  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
CLINEA 0000H 0001H 0234H 0003H 003DH
	mov	r0,	r2
	srl	r0,	#01h
	add	r0,	#0ffh
	mov	r4,	r0	;; _lvcsel_period_reg$0

;;  getSequenceStepEnables(&enables);
CLINEA 0000H 0001H 023DH 0003H 0023H
	mov	er0,	fp
	add	er0,	#-6
	bl	_getSequenceStepEnables

;;  getSequenceStepTimeouts(enables.pre_range, &timeouts);
CLINEA 0000H 0001H 023EH 0003H 0038H
	mov	er2,	fp
	add	er2,	#-28
	l	r0,	_enables$10+03h[fp]
	bl	_getSequenceStepTimeouts

;;  if (type == VcselPeriodPreRange)  {
CLINEA 0000H 0001H 024DH 0003H 0025H
	mov	er8,	er8
	bne	_$L101
CBLOCK 324 3 589

;;    switch (period_pclks)    {
CLINEA 0000H 0001H 024FH 0005H 001EH
CBLOCK 324 4 591
	cmp	r10,	#0ch
	beq	_$L108

;;    switch (period_pclks)    {
CLINEA 0000H 0000H 024FH 0005H 001EH
	cmp	r10,	#0eh
	bne	_$M22
	b	_$L109
_$M22 :

;;    switch (period_pclks)    {
CLINEA 0000H 0000H 024FH 0005H 001EH
	cmp	r10,	#010h
	bne	_$M23
	b	_$L110
_$M23 :

;;    switch (period_pclks)    {
CLINEA 0000H 0000H 024FH 0005H 001EH
	cmp	r10,	#012h
	bne	_$M24
	b	_$L111
_$M24 :

;;        return false;
CLINEA 0000H 0001H 0262H 0009H 0015H
	mov	r0,	#00h
CBLOCKEND 324 4 611
CBLOCKEND 324 2 733

;;}
CLINEA 0000H 0001H 02DDH 0001H 0001H
_$L100 :
	pop	er4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc

;;      case 12:
CLINEA 0000H 0001H 0250H 0007H 000EH
_$L108 :

;;        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
CLINEA 0000H 0001H 0251H 0009H 003AH
	mov	r1,	#018h
	mov	r0,	#057h
	bl	_writeReg

;;    }
CLINEA 0000H 0000H 0263H 0005H 0005H
_$L106 :

;;    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
CLINEA 0000H 0001H 0264H 0005H 0035H
	mov	r1,	#08h
	mov	r0,	#056h
	bl	_writeReg

;;    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
CLINEA 0000H 0001H 0267H 0005H 003EH
	mov	r1,	r4
	mov	r0,	#050h
	bl	_writeReg

;;      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
CLINEA 0000H 0000H 026FH 0007H 0046H
	push	r10
	l	er0,	_timeouts$16+0eh[fp]
	l	er2,	_timeouts$16+010h[fp]
	bl	_timeoutMicrosecondsToMclks
	add	sp,	#2 

;;      encodeTimeout(new_pre_range_timeout_mclks));
CLINEA 0000H 0001H 0272H 0007H 0032H
	mov	er2,	#0 
	bl	_encodeTimeout
	mov	er2,	er0
	mov	r0,	#051h
	bl	_writeReg16Bit

;;      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
CLINEA 0000H 0000H 027AH 0007H 0049H
	push	r10
	l	er0,	_timeouts$16+0ah[fp]
	l	er2,	_timeouts$16+0ch[fp]
	bl	_timeoutMicrosecondsToMclks
	add	sp,	#2 

;;      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
CLINEA 0000H 0001H 027DH 0007H 004BH
	cmp	r0,	#00h
	cmpc	r1,	#01h
	ble	_$L112
	mov	r0,	#0ffh
	bal	_$L114
_$L112 :
	add	er0,	#-1
_$L114 :
	mov	r1,	r0
	mov	r0,	#046h
	bl	_writeReg
CBLOCKEND 324 3 640

;;  else if (type == VcselPeriodFinalRange){
CLINEA 0000H 0001H 0281H 0003H 002AH
	bal	_$L115
_$L101 :
	cmp	r8,	#01h
	cmpc	r9,	#00h
	beq	_$M25
	b	_$L116
_$M25 :
CBLOCK 324 5 641

;;    switch (period_pclks){
CLINEA 0000H 0001H 0282H 0005H 001AH
CBLOCK 324 6 642
	cmp	r10,	#08h
	bne	_$M26
	b	_$L123
_$M26 :

;;    switch (period_pclks){
CLINEA 0000H 0000H 0282H 0005H 001AH
	cmp	r10,	#0ah
	bne	_$M27
	b	_$L124
_$M27 :

;;    switch (period_pclks){
CLINEA 0000H 0000H 0282H 0005H 001AH
	cmp	r10,	#0ch
	bne	_$M28
	b	_$L125
_$M28 :

;;    switch (period_pclks){
CLINEA 0000H 0000H 0282H 0005H 001AH
	cmp	r10,	#0eh
	bne	_$M29
	b	_$L126
_$M29 :

;;        return false;
CLINEA 0000H 0001H 02ADH 0009H 0015H
	mov	r0,	#00h
	bal	_$L100
CBLOCKEND 324 6 686

;;    }
CLINEA 0000H 0000H 02AEH 0005H 0005H
_$L121 :

;;    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
CLINEA 0000H 0001H 02B1H 0005H 0040H
	mov	r1,	r4
	mov	r0,	#070h
	bl	_writeReg

;;      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
CLINEA 0000H 0000H 02BEH 0007H 0048H
	push	r10
	l	er0,	_timeouts$16+012h[fp]
	l	er2,	_timeouts$16+014h[fp]
	bl	_timeoutMicrosecondsToMclks
	add	sp,	#2 
	mov	er2,	er0	;; _lnew_final_range_timeout_mclks$6

;;    if (enables.pre_range){
CLINEA 0000H 0001H 02C0H 0005H 001BH
	l	r0,	_enables$10+03h[fp]
	beq	_$L127
CBLOCK 324 7 704

;;      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
CLINEA 0000H 0001H 02C1H 0007H 0040H
	mov	er0,	er2
	l	er2,	_timeouts$16+06h[fp]
	add	er0,	er2
	mov	er2,	er0	;; _lnew_final_range_timeout_mclks$6
CBLOCKEND 324 7 706

;;    }
CLINEA 0000H 0000H 02C2H 0005H 0005H
_$L127 :

;;      encodeTimeout(new_final_range_timeout_mclks));
CLINEA 0000H 0001H 02C5H 0007H 0034H
	mov	er0,	er2
	mov	er2,	#0 
	bl	_encodeTimeout
	mov	er2,	er0
	mov	r0,	#071h
	bl	_writeReg16Bit
CBLOCKEND 324 5 712

;;  }
CLINEA 0000H 0000H 02CCH 0003H 0003H
_$L115 :

;;  setMeasurementTimingBudget(measurement_timing_budget_us);
CLINEA 0000H 0001H 02D0H 0003H 003BH
	l	er0,	NEAR _measurement_timing_budget_us
	l	er2,	NEAR _measurement_timing_budget_us+02h
	bl	_setMeasurementTimingBudget

;;  sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
CLINEA 0000H 0000H 02D5H 0003H 0034H
	mov	r0,	#01h
	bl	_readReg
	mov	r4,	r0	;; _lsequence_config$8

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
CLINEA 0000H 0001H 02D6H 0003H 0029H
	mov	r1,	#02h
	mov	r0,	#01h
	bl	_writeReg

;;  performSingleRefCalibration(0x0);
CLINEA 0000H 0001H 02D7H 0003H 0023H
	mov	r0,	#00h
	bl	_performSingleRefCalibration

;;  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
CLINEA 0000H 0001H 02D8H 0003H 0034H
	mov	r1,	r4
	mov	r0,	#01h
	bl	_writeReg

;;  return true;
CLINEA 0000H 0001H 02DCH 0003H 000EH
	mov	r0,	#01h
	b	_$L100

;;      case 14:
CLINEA 0000H 0001H 0254H 0007H 000EH
_$L109 :

;;        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
CLINEA 0000H 0001H 0255H 0009H 003AH
	mov	r1,	#030h
	mov	r0,	#057h
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 0256H 0009H 000EH
	b	_$L106

;;      case 16:
CLINEA 0000H 0001H 0258H 0007H 000EH
_$L110 :

;;        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
CLINEA 0000H 0001H 0259H 0009H 003AH
	mov	r1,	#040h
	mov	r0,	#057h
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 025AH 0009H 000EH
	b	_$L106

;;      case 18:
CLINEA 0000H 0001H 025CH 0007H 000EH
_$L111 :

;;        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
CLINEA 0000H 0001H 025DH 0009H 003AH
	mov	r1,	#050h
	mov	r0,	#057h
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 025EH 0009H 000EH
	b	_$L106

;;      case 8:
CLINEA 0000H 0001H 0283H 0007H 000DH
_$L123 :

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
CLINEA 0000H 0001H 0284H 0009H 003CH
	mov	r1,	#010h
	mov	r0,	#048h
	bl	_writeReg

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
CLINEA 0000H 0001H 0285H 0009H 003CH
	mov	r1,	#08h
	mov	r0,	#047h
	bl	_writeReg

;;        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
CLINEA 0000H 0001H 0286H 0009H 0032H
	mov	r1,	#02h
	mov	r0,	#032h
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
CLINEA 0000H 0001H 0287H 0009H 0035H
	mov	r1,	#0ch
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 0288H 0009H 001DH
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_LIM, 0x30);
CLINEA 0000H 0001H 0289H 0009H 002AH
	mov	r1,	#030h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 028AH 0009H 001DH
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 028BH 0009H 000EH
	b	_$L121

;;      case 10:
CLINEA 0000H 0001H 028DH 0007H 000EH
_$L124 :

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
CLINEA 0000H 0001H 028EH 0009H 003CH
	mov	r1,	#028h
	mov	r0,	#048h
	bl	_writeReg

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
CLINEA 0000H 0001H 028FH 0009H 003CH
	mov	r1,	#08h
	mov	r0,	#047h
	bl	_writeReg

;;        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
CLINEA 0000H 0001H 0290H 0009H 0032H
	mov	r1,	#03h
	mov	r0,	#032h
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
CLINEA 0000H 0001H 0291H 0009H 0035H
	mov	r1,	#09h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 0292H 0009H 001DH
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_LIM, 0x20);
CLINEA 0000H 0001H 0293H 0009H 002AH
	mov	r1,	#020h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 0294H 0009H 001DH
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 0295H 0009H 000EH
	b	_$L121

;;      case 12:
CLINEA 0000H 0001H 0297H 0007H 000EH
_$L125 :

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
CLINEA 0000H 0001H 0298H 0009H 003CH
	mov	r1,	#038h
	mov	r0,	#048h
	bl	_writeReg

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
CLINEA 0000H 0001H 0299H 0009H 003CH
	mov	r1,	#08h
	mov	r0,	#047h
	bl	_writeReg

;;        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
CLINEA 0000H 0001H 029AH 0009H 0032H
	mov	r1,	#03h
	mov	r0,	#032h
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
CLINEA 0000H 0001H 029BH 0009H 0035H
	mov	r1,	#08h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 029CH 0009H 001DH
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_LIM, 0x20);
CLINEA 0000H 0001H 029DH 0009H 002AH
	mov	r1,	#020h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 029EH 0009H 001DH
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 029FH 0009H 000EH
	b	_$L121

;;      case 14:
CLINEA 0000H 0001H 02A1H 0007H 000EH
_$L126 :

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
CLINEA 0000H 0001H 02A2H 0009H 003CH
	mov	r1,	#048h
	mov	r0,	#048h
	bl	_writeReg

;;        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
CLINEA 0000H 0001H 02A3H 0009H 003CH
	mov	r1,	#08h
	mov	r0,	#047h
	bl	_writeReg

;;        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
CLINEA 0000H 0001H 02A4H 0009H 0032H
	mov	r1,	#03h
	mov	r0,	#032h
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
CLINEA 0000H 0001H 02A5H 0009H 0035H
	mov	r1,	#07h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 02A6H 0009H 001DH
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;        writeReg(ALGO_PHASECAL_LIM, 0x20);
CLINEA 0000H 0001H 02A7H 0009H 002AH
	mov	r1,	#020h
	mov	r0,	#030h
	bl	_writeReg

;;        writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 02A8H 0009H 001DH
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;        break;
CLINEA 0000H 0001H 02A9H 0009H 000EH
	b	_$L121

;;  else{
CLINEA 0000H 0000H 02C9H 0003H 0007H
_$L116 :
CBLOCK 324 8 713

;;    return false;
CLINEA 0000H 0001H 02CBH 0005H 0011H
	mov	r0,	#00h
	b	_$L100
CBLOCKEND 324 8 716
CBLOCKEND 324 1 733
CFUNCTIONEND 324


	rseg $$getVcselPulsePeriod$VL53L0X
CFUNCTION 325

_getVcselPulsePeriod	:
CBLOCK 325 1 737

;;uint8_t getVcselPulsePeriod(enum vcselPeriodType type){
CLINEA 0000H 0001H 02E1H 0001H 0037H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 325 2 737
CRET 0000H
CARGUMENT 47H 0002H 0024H "type" 04H 00H 0AH 20H 00H

;;  if (type == VcselPeriodPreRange){
CLINEA 0000H 0001H 02E2H 0003H 0023H
	mov	er0,	er0
	bne	_$L131
CBLOCK 325 3 738

;;    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
CLINEA 0000H 0001H 02E3H 0005H 0045H
	mov	r0,	#050h
	bl	_readReg
	mov	r1,	#00h
	add	er0,	#1 
	sll	r0,	#01h
CBLOCKEND 325 3 740
CBLOCKEND 325 2 745

;;}
CLINEA 0000H 0001H 02E9H 0001H 0001H
_$L130 :
	pop	pc

;;  else if (type == VcselPeriodFinalRange){
CLINEA 0000H 0000H 02E5H 0003H 002AH
_$L131 :
	cmp	r0,	#01h
	cmpc	r1,	#00h
	bne	_$L134
CBLOCK 325 4 741

;;    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
CLINEA 0000H 0001H 02E6H 0005H 0047H
	mov	r0,	#070h
	bl	_readReg
	mov	r1,	#00h
	add	er0,	#1 
	sll	r0,	#01h
	bal	_$L130
CBLOCKEND 325 4 743

;;  else { return 255; }
CLINEA 0000H 0000H 02E8H 0003H 0016H
_$L134 :
CBLOCK 325 5 744
	mov	r0,	#0ffh
	bal	_$L130
CBLOCKEND 325 5 744
CBLOCKEND 325 1 745
CFUNCTIONEND 325


	rseg $$startContinuous$VL53L0X
CFUNCTION 326

_startContinuous	:
CBLOCK 326 1 753

;;void startContinuous(uint32_t period_ms){
CLINEA 0000H 0001H 02F1H 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 326 2 753
CRET 0004H
CARGUMENT 46H 0004H 2928H "period_ms" 02H 00H 02H

;;  writeReg(0x80, 0x01);
CLINEA 0000H 0001H 02F2H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 02F3H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x00);
CLINEA 0000H 0001H 02F4H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0x91, stop_variable);
CLINEA 0000H 0001H 02F5H 0003H 0020H
	l	r1,	NEAR _stop_variable
	mov	r0,	#091h
	bl	_writeReg

;;  writeReg(0x00, 0x01);
CLINEA 0000H 0001H 02F6H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 02F7H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x80, 0x00);
CLINEA 0000H 0001H 02F8H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#080h
	bl	_writeReg

;;  if (period_ms != 0){
CLINEA 0000H 0001H 02FAH 0003H 0016H
	cmp	r8,	#00h
	cmpc	r9,	#00h
	cmpc	r10,	#00h
	cmpc	r11,	#00h
	beq	_$L138
CBLOCK 326 3 762
CLOCAL 46H 0002H 0025H 0003H "osc_calibrate_val" 02H 00H 08H

;;    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
CLINEA 0000H 0001H 02FFH 0005H 0041H
	mov	r0,	#0f8h
	bl	_readReg16Bit

;;    if (osc_calibrate_val != 0){
CLINEA 0000H 0001H 0301H 0005H 0020H
	mov	er0,	er0
	beq	_$L140
CBLOCK 326 4 769

;;      period_ms *= osc_calibrate_val;
CLINEA 0000H 0001H 0302H 0007H 0025H
	mov	er2,	#0 
	push	xr0
	push	xr8
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	mov	er8,	er0
	mov	er10,	er2
CBLOCKEND 326 4 771

;;    }
CLINEA 0000H 0000H 0303H 0005H 0005H
_$L140 :

;;    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
CLINEA 0000H 0001H 0305H 0005H 003DH
	push	xr8
	mov	r0,	#04h
	bl	_writeReg32Bit
	add	sp,	#4 

;;    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
CLINEA 0000H 0001H 0309H 0005H 0046H
	mov	r1,	#04h
	mov	r0,	#00h
	bl	_writeReg
CBLOCKEND 326 3 778

;;  else{
CLINEA 0000H 0001H 030BH 0003H 0007H
	bal	_$L142
_$L138 :
CBLOCK 326 5 779

;;    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
CLINEA 0000H 0001H 030DH 0005H 004BH
	mov	r1,	#02h
	mov	r0,	#00h
	bl	_writeReg
CBLOCKEND 326 5 782

;;  }
CLINEA 0000H 0000H 030EH 0003H 0003H
_$L142 :
CBLOCKEND 326 2 783

;;}
CLINEA 0000H 0001H 030FH 0001H 0001H
	pop	xr8
	pop	pc
CBLOCKEND 326 1 783
CFUNCTIONEND 326


	rseg $$stopContinuous$VL53L0X
CFUNCTION 327

_stopContinuous	:
CBLOCK 327 1 787

;;void stopContinuous(void){
CLINEA 0000H 0001H 0313H 0001H 001AH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 327 2 787
CRET 0000H

;;  writeReg(SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
CLINEA 0000H 0001H 0314H 0003H 0049H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 0316H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x00);
CLINEA 0000H 0001H 0317H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0x91, 0x00);
CLINEA 0000H 0001H 0318H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#091h
	bl	_writeReg

;;  writeReg(0x00, 0x01);
CLINEA 0000H 0001H 0319H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 031AH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg
CBLOCKEND 327 2 795

;;}
CLINEA 0000H 0001H 031BH 0001H 0001H
	pop	pc
CBLOCKEND 327 1 795
CFUNCTIONEND 327


	rseg $$readRangeContinuousMillimeters$VL53L0X
CFUNCTION 328

_readRangeContinuousMillimeters	:
CBLOCK 328 1 800

;;uint16_t readRangeContinuousMillimeters(void){
CLINEA 0000H 0001H 0320H 0001H 002EH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er4
CBLOCK 328 2 800
CRET 0002H
CLOCAL 46H 0002H 0026H 0002H "range" 02H 00H 08H

;;  startTimeout();
CLINEA 0000H 0000H 0322H 0003H 0011H
	bl	_millis
	st	er0,	NEAR _timeout_start_ms

;;  }
CLINEA 0000H 0000H 0328H 0003H 0003H
_$L156 :

;;  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){
CLINEA 0000H 0001H 0323H 0003H 0039H
	mov	r0,	#013h
	bl	_readReg
	and	r0,	#07h
	bne	_$L146
CBLOCK 328 3 803

;;    if (checkTimeoutExpired()){
CLINEA 0000H 0000H 0324H 0005H 001FH
	l	er0,	NEAR _io_timeout
	cmp	r0,	#00h
	cmpc	r1,	#00h
	ble	_$L156
	bl	_millis
	l	er2,	NEAR _timeout_start_ms
	sub	r0,	r2
	subc	r1,	r3
	l	er2,	NEAR _io_timeout
	cmp	er0,	er2
	ble	_$L156
CBLOCK 328 4 804

;;      did_timeout = true;
CLINEA 0000H 0001H 0325H 0007H 0019H
	mov	r0,	#01h
	st	r0,	NEAR _did_timeout

;;      return 65535;
CLINEA 0000H 0001H 0326H 0007H 0013H
	mov	er0,	#-1
CBLOCKEND 328 4 807
CBLOCKEND 328 2 817

;;}
CLINEA 0000H 0001H 0331H 0001H 0001H
_$L144 :
	pop	er4
	pop	pc

;;    }
CLINEA 0000H 0000H 0327H 0005H 0005H
CBLOCKEND 328 3 808

;;  }
CLINEA 0000H 0000H 0328H 0003H 0003H
_$L146 :

;;  range = readReg16Bit(RESULT_RANGE_STATUS + 10);
CLINEA 0000H 0000H 032CH 0003H 0031H
	mov	r0,	#01eh
	bl	_readReg16Bit
	mov	er4,	er0	;; _lrange$0

;;  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
CLINEA 0000H 0001H 032EH 0003H 0029H
	mov	r1,	#01h
	mov	r0,	#0bh
	bl	_writeReg

;;  return range;
CLINEA 0000H 0001H 0330H 0003H 000FH
	mov	er0,	er4
	bal	_$L144
CBLOCKEND 328 1 817
CFUNCTIONEND 328


	rseg $$readRangeSingleMillimeters$VL53L0X
CFUNCTION 329

_readRangeSingleMillimeters	:
CBLOCK 329 1 822

;;uint16_t readRangeSingleMillimeters(void){
CLINEA 0000H 0001H 0336H 0001H 002AH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 329 2 822
CRET 0000H

;;  writeReg(0x80, 0x01);
CLINEA 0000H 0001H 0337H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 0338H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x00);
CLINEA 0000H 0001H 0339H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0x91, stop_variable);
CLINEA 0000H 0001H 033AH 0003H 0020H
	l	r1,	NEAR _stop_variable
	mov	r0,	#091h
	bl	_writeReg

;;  writeReg(0x00, 0x01);
CLINEA 0000H 0001H 033BH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 033CH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x80, 0x00);
CLINEA 0000H 0001H 033DH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(SYSRANGE_START, 0x01);
CLINEA 0000H 0001H 033FH 0003H 0021H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  startTimeout();
CLINEA 0000H 0000H 0342H 0003H 0011H
	bl	_millis
	st	er0,	NEAR _timeout_start_ms

;;  }
CLINEA 0000H 0000H 0348H 0003H 0003H
_$L169 :

;;  while (readReg(SYSRANGE_START) & 0x01){
CLINEA 0000H 0001H 0343H 0003H 0029H
	mov	r0,	#00h
	bl	_readReg
	tb	r0.0
	beq	_$L159
CBLOCK 329 3 835

;;    if (checkTimeoutExpired()){
CLINEA 0000H 0000H 0344H 0005H 001FH
	l	er0,	NEAR _io_timeout
	cmp	r0,	#00h
	cmpc	r1,	#00h
	ble	_$L169
	bl	_millis
	l	er2,	NEAR _timeout_start_ms
	sub	r0,	r2
	subc	r1,	r3
	l	er2,	NEAR _io_timeout
	cmp	er0,	er2
	ble	_$L169
CBLOCK 329 4 836

;;      did_timeout = true;
CLINEA 0000H 0001H 0345H 0007H 0019H
	mov	r0,	#01h
	st	r0,	NEAR _did_timeout

;;      return 65535;
CLINEA 0000H 0001H 0346H 0007H 0013H
	mov	er0,	#-1
CBLOCKEND 329 4 839
CBLOCKEND 329 2 843

;;}
CLINEA 0000H 0001H 034BH 0001H 0001H
_$L157 :
	pop	pc

;;    }
CLINEA 0000H 0000H 0347H 0005H 0005H
CBLOCKEND 329 3 840

;;  }
CLINEA 0000H 0000H 0348H 0003H 0003H
_$L159 :

;;  return readRangeContinuousMillimeters();
CLINEA 0000H 0001H 034AH 0003H 002AH
	bl	_readRangeContinuousMillimeters
	bal	_$L157
CBLOCKEND 329 1 843
CFUNCTIONEND 329


	rseg $$timeoutOccurred$VL53L0X
CFUNCTION 330

_timeoutOccurred	:
CBLOCK 330 1 847

;;bool timeoutOccurred(){
CLINEA 0000H 0001H 034FH 0001H 0017H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

CBLOCK 330 2 847
CLOCAL 46H 0001H 0015H 0002H "tmp" 02H 00H 00H

;;  bool tmp = did_timeout;
CLINEA 0000H 0001H 0350H 0003H 0019H
	l	r0,	NEAR _did_timeout
	mov	r1,	r0	;; _ltmp$0

;;  did_timeout = false;
CLINEA 0000H 0001H 0351H 0003H 0016H
	mov	r0,	#00h
	st	r0,	NEAR _did_timeout

;;  return tmp;
CLINEA 0000H 0001H 0352H 0003H 000DH
	mov	r0,	r1
CBLOCKEND 330 2 851

;;}
CLINEA 0000H 0000H 0353H 0001H 0001H
	rt
CBLOCKEND 330 1 851
CFUNCTIONEND 330


	rseg $$getSpadInfo$VL53L0X
CFUNCTION 331

_getSpadInfo	:
CBLOCK 331 1 858

;;bool getSpadInfo(uint8_t * count, bool * type_is_aperture){
CLINEA 0000H 0001H 035AH 0001H 003BH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 331 2 858
CRET 0004H
CARGUMENT 46H 0002H 0028H "count" 04H 03H 00H 00H 00H
CARGUMENT 46H 0002H 0029H "type_is_aperture" 04H 03H 00H 00H 00H
CLOCAL 46H 0001H 0015H 0002H "tmp" 02H 00H 00H

;;  writeReg(0x80, 0x01);
CLINEA 0000H 0001H 035DH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 035EH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x00);
CLINEA 0000H 0001H 035FH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x06);
CLINEA 0000H 0001H 0361H 0003H 0017H
	mov	r1,	#06h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x83, readReg(0x83) | 0x04);
CLINEA 0000H 0001H 0362H 0003H 0027H
	mov	r0,	#083h
	bl	_readReg
	mov	r1,	r0
	or	r1,	#04h
	mov	r0,	#083h
	bl	_writeReg

;;  writeReg(0xFF, 0x07);
CLINEA 0000H 0001H 0363H 0003H 0017H
	mov	r1,	#07h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x81, 0x01);
CLINEA 0000H 0001H 0364H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#081h
	bl	_writeReg

;;  writeReg(0x80, 0x01);
CLINEA 0000H 0001H 0366H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#080h
	bl	_writeReg

;;  writeReg(0x94, 0x6b);
CLINEA 0000H 0001H 0368H 0003H 0017H
	mov	r1,	#06bh
	mov	r0,	#094h
	bl	_writeReg

;;  writeReg(0x83, 0x00);
CLINEA 0000H 0001H 0369H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#083h
	bl	_writeReg

;;  startTimeout();
CLINEA 0000H 0000H 036AH 0003H 0011H
	bl	_millis
	st	er0,	NEAR _timeout_start_ms

;;  }
CLINEA 0000H 0000H 036DH 0003H 0003H
_$L183 :

;;  while (readReg(0x83) == 0x00){
CLINEA 0000H 0001H 036BH 0003H 0020H
	mov	r0,	#083h
	bl	_readReg
	cmp	r0,	#00h
	bne	_$L173
CBLOCK 331 3 875

;;    if (checkTimeoutExpired()) { return false; }
CLINEA 0000H 0000H 036CH 0005H 0030H
	l	er0,	NEAR _io_timeout
	cmp	r0,	#00h
	cmpc	r1,	#00h
	ble	_$L183
	bl	_millis
	l	er2,	NEAR _timeout_start_ms
	sub	r0,	r2
	subc	r1,	r3
	l	er2,	NEAR _io_timeout
	cmp	er0,	er2
	ble	_$L183
CBLOCK 331 4 876
	mov	r0,	#00h
CBLOCKEND 331 4 876
CBLOCKEND 331 2 894

;;}
CLINEA 0000H 0001H 037EH 0001H 0001H
_$L171 :
	pop	xr8
	pop	pc

;;    if (checkTimeoutExpired()) { return false; }
CLINEA 0000H 0000H 036CH 0005H 0030H
CBLOCKEND 331 3 877

;;  }
CLINEA 0000H 0000H 036DH 0003H 0003H
_$L173 :

;;  writeReg(0x83, 0x01);
CLINEA 0000H 0001H 036EH 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#083h
	bl	_writeReg

;;  tmp = readReg(0x92);
CLINEA 0000H 0000H 036FH 0003H 0016H
	mov	r0,	#092h
	bl	_readReg
	mov	r1,	r0	;; _ltmp$0

;;  *count = tmp & 0x7f;
CLINEA 0000H 0001H 0371H 0003H 0016H
	and	r0,	#07fh
	st	r0,	[er8]

;;  *type_is_aperture = (tmp >> 7) & 0x01;
CLINEA 0000H 0001H 0372H 0003H 0028H
	mov	r0,	r1
	srl	r0,	#07h
	and	r0,	#01h
	st	r0,	[er10]

;;  writeReg(0x81, 0x00);
CLINEA 0000H 0001H 0374H 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#081h
	bl	_writeReg

;;  writeReg(0xFF, 0x06);
CLINEA 0000H 0001H 0375H 0003H 0017H
	mov	r1,	#06h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x83, readReg(0x83)  & ~0x04);
CLINEA 0000H 0001H 0376H 0003H 0029H
	mov	r0,	#083h
	bl	_readReg
	mov	r1,	r0
	and	r1,	#0fbh
	mov	r0,	#083h
	bl	_writeReg

;;  writeReg(0xFF, 0x01);
CLINEA 0000H 0001H 0377H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x00, 0x01);
CLINEA 0000H 0001H 0378H 0003H 0017H
	mov	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  writeReg(0xFF, 0x00);
CLINEA 0000H 0001H 037AH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#0ffh
	bl	_writeReg

;;  writeReg(0x80, 0x00);
CLINEA 0000H 0001H 037BH 0003H 0017H
	mov	r1,	#00h
	mov	r0,	#080h
	bl	_writeReg

;;  return true;
CLINEA 0000H 0001H 037DH 0003H 000EH
	mov	r0,	#01h
	bal	_$L171
CBLOCKEND 331 1 894
CFUNCTIONEND 331


	rseg $$getSequenceStepEnables$VL53L0X
CFUNCTION 332

_getSequenceStepEnables	:
CBLOCK 332 1 898

;;void getSequenceStepEnables(SequenceStepEnables * enables){
CLINEA 0000H 0001H 0382H 0001H 003BH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	er8
	mov	er8,	er0
CBLOCK 332 2 898
CRET 0002H
CARGUMENT 47H 0002H 0028H "enables" 06H 03H 00H 00H 05H 21H 00H
CLOCAL 46H 0001H 0015H 0002H "sequence_config" 02H 00H 00H

;;  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
CLINEA 0000H 0001H 0383H 0003H 003CH
	mov	r0,	#01h
	bl	_readReg
	mov	r1,	r0	;; _lsequence_config$0

;;  enables->tcc          = (sequence_config >> 4) & 0x1;
CLINEA 0000H 0001H 0385H 0003H 0037H
	srl	r0,	#04h
	and	r0,	#01h
	st	r0,	[er8]

;;  enables->dss          = (sequence_config >> 3) & 0x1;
CLINEA 0000H 0001H 0386H 0003H 0037H
	mov	r0,	r1
	srl	r0,	#03h
	and	r0,	#01h
	st	r0,	02h[er8]

;;  enables->msrc         = (sequence_config >> 2) & 0x1;
CLINEA 0000H 0001H 0387H 0003H 0037H
	mov	r0,	r1
	srl	r0,	#02h
	and	r0,	#01h
	st	r0,	01h[er8]

;;  enables->pre_range    = (sequence_config >> 6) & 0x1;
CLINEA 0000H 0001H 0388H 0003H 0037H
	mov	r0,	r1
	srl	r0,	#06h
	and	r0,	#01h
	st	r0,	03h[er8]

;;  enables->final_range  = (sequence_config >> 7) & 0x1;
CLINEA 0000H 0001H 0389H 0003H 0037H
	mov	r0,	r1
	srl	r0,	#07h
	and	r0,	#01h
	st	r0,	04h[er8]
CBLOCKEND 332 2 906

;;}
CLINEA 0000H 0001H 038AH 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 332 1 906
CFUNCTIONEND 332


	rseg $$getSequenceStepTimeouts$VL53L0X
CFUNCTION 333

_getSequenceStepTimeouts	:
CBLOCK 333 1 912

;;void getSequenceStepTimeouts(boolean ena, SequenceStepTimeouts * timeouts){
CLINEA 0000H 0001H 0390H 0001H 004BH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr8
	mov	er10,	er2
	mov	r8,	r0
CBLOCK 333 2 912
CRET 0004H
CARGUMENT 46H 0001H 001CH "ena" 02H 00H 00H
CARGUMENT 47H 0002H 0029H "timeouts" 06H 03H 00H 00H 05H 22H 00H

;;  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
CLINEA 0000H 0000H 0391H 0003H 0054H
	mov	er0,	#0 
	bl	_getVcselPulsePeriod
	mov	r1,	#00h
	st	er0,	[er10]

;;  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
CLINEA 0000H 0000H 0393H 0003H 0049H
	mov	r0,	#046h
	bl	_readReg
	mov	r1,	#00h
	add	er0,	#1 
	st	er0,	04h[er10]

;;                               timeouts->pre_range_vcsel_period_pclks);
CLINEA 0000H 0000H 0396H 0020H 0047H
	l	r2,	[er10]
	bl	_timeoutMclksToMicroseconds
	st	er0,	0ah[er10]
	st	er2,	0ch[er10]

;;    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
CLINEA 0000H 0000H 0399H 0005H 0044H
	mov	r0,	#051h
	bl	_readReg16Bit
	bl	_decodeTimeout
	st	er0,	06h[er10]

;;                               timeouts->pre_range_vcsel_period_pclks);
CLINEA 0000H 0000H 039CH 0020H 0047H
	l	r2,	[er10]
	bl	_timeoutMclksToMicroseconds
	st	er0,	0eh[er10]
	st	er2,	010h[er10]

;;  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
CLINEA 0000H 0000H 039EH 0003H 0058H
	mov	er0,	#1 
	bl	_getVcselPulsePeriod
	mov	r1,	#00h
	st	er0,	02h[er10]

;;    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
CLINEA 0000H 0000H 03A1H 0005H 0046H
	mov	r0,	#071h
	bl	_readReg16Bit
	bl	_decodeTimeout
	st	er0,	08h[er10]

;;  if (ena){
CLINEA 0000H 0001H 03A3H 0003H 000BH
	cmp	r8,	#00h
	beq	_$L186
CBLOCK 333 3 931

;;    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
CLINEA 0000H 0001H 03A4H 0005H 003DH
	l	er2,	06h[er10]
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	08h[er10]
CBLOCKEND 333 3 933

;;  }
CLINEA 0000H 0000H 03A5H 0003H 0003H
_$L186 :

;;                               timeouts->final_range_vcsel_period_pclks);
CLINEA 0000H 0000H 03A9H 0020H 0049H
	l	r2,	02h[er10]
	bl	_timeoutMclksToMicroseconds
	st	er0,	012h[er10]
	st	er2,	014h[er10]
CBLOCKEND 333 2 938

;;}
CLINEA 0000H 0001H 03AAH 0001H 0001H
	pop	xr8
	pop	pc
CBLOCKEND 333 1 938
CFUNCTIONEND 333


	rseg $$decodeTimeout$VL53L0X
CFUNCTION 335

_decodeTimeout	:
CBLOCK 335 1 944

;;uint16_t decodeTimeout(uint16_t reg_val){
CLINEA 0000H 0001H 03B0H 0001H 0029H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	er8
	mov	er8,	er0
CBLOCK 335 2 944
CARGUMENT 46H 0002H 0028H "reg_val" 02H 00H 01H

;;         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
CLINEA 0000H 0001H 03B3H 000AH 0032H
	and	r1,	#00h
	mov	er2,	er8
	mov	r2,	r3
	mov	r3,	#00h
_$M41 :
	cmp	r2,	#07h
	cmpc	r3,	#00h
	ble	_$M40
	sllc	r1,	#07h
	sll	r0,	#07h
	add	er2,	#-7
	bne	_$M41
_$M40 :
	sllc	r1,	r2
	sll	r0,	r2
	add	er0,	#1 
CBLOCKEND 335 2 948

;;}
CLINEA 0000H 0000H 03B4H 0001H 0001H
	pop	er8
	rt
CBLOCKEND 335 1 948
CFUNCTIONEND 335


	rseg $$encodeTimeout$VL53L0X
CFUNCTION 336

_encodeTimeout	:
CBLOCK 336 1 952

;;uint16_t encodeTimeout(uint32_t timeout_mclks){
CLINEA 0000H 0001H 03B8H 0001H 002FH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	xr4
	push	bp
CBLOCK 336 2 952
CARGUMENT 46H 0004H 2524H "timeout_mclks" 02H 00H 02H
CLOCAL 46H 0004H 2726H 0002H "ls_byte" 02H 00H 02H
CLOCAL 46H 0002H 002AH 0002H "ms_byte" 02H 00H 08H

;;  uint16_t ms_byte = 0;
CLINEA 0000H 0001H 03BCH 0003H 0017H
	mov	bp,	#0 	;; _lms_byte$4

;;  if (timeout_mclks > 0){
CLINEA 0000H 0001H 03BEH 0003H 0019H
	cmp	r0,	#00h
	cmpc	r1,	#00h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	ble	_$L190
CBLOCK 336 3 958

;;    ls_byte = timeout_mclks - 1;
CLINEA 0000H 0001H 03BFH 0005H 0020H
	add	er0,	#-1
	addc	r2,	#0ffh
	addc	r3,	#0ffh
	mov	er4,	er0	;; _lls_byte$0
	mov	er6,	er2	;; _lls_byte$0

;;    while ((ls_byte & 0xFFFFFF00) > 0){
CLINEA 0000H 0001H 03C1H 0005H 0027H
	bal	_$L192
_$L194 :
CBLOCK 336 4 961

;;      ls_byte >>= 1;
CLINEA 0000H 0001H 03C2H 0007H 0014H
	mov	er0,	er4
	mov	er2,	er6
	srlc	r0,	#01h
	srlc	r1,	#01h
	srlc	r2,	#01h
	srl	r3,	#01h
	mov	er4,	er0	;; _lls_byte$0
	mov	er6,	er2	;; _lls_byte$0

;;      ms_byte++;
CLINEA 0000H 0000H 03C3H 0007H 0010H
	add	bp,	#1 
CBLOCKEND 336 4 964

;;    }
CLINEA 0000H 0000H 03C4H 0005H 0005H
_$L192 :

;;    while ((ls_byte & 0xFFFFFF00) > 0){
CLINEA 0000H 0000H 03C1H 0000H 0000H
	and	r0,	#00h
	cmp	r0,	#00h
	cmpc	r1,	#00h
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bgt	_$L194

;;    return (ms_byte << 8) | (ls_byte & 0xFF);
CLINEA 0000H 0001H 03C6H 0005H 002DH
	mov	er0,	er4
	and	r1,	#00h
	or	r1,	r12
CBLOCKEND 336 3 967
CBLOCKEND 336 2 969

;;}
CLINEA 0000H 0001H 03C9H 0001H 0001H
_$L189 :
	pop	bp
	pop	xr4
	rt

;;  else { return 0; }
CLINEA 0000H 0000H 03C8H 0003H 0014H
_$L190 :
CBLOCK 336 5 968
	mov	er0,	#0 
	bal	_$L189
CBLOCKEND 336 5 968
CBLOCKEND 336 1 969
CFUNCTIONEND 336


	rseg $$timeoutMclksToMicroseconds$VL53L0X
CFUNCTION 337

_timeoutMclksToMicroseconds	:
CBLOCK 337 1 973

;;uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks){
CLINEA 0000H 0001H 03CDH 0001H 005FH
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
	push	xr4
	push	er8
	mov	er8,	er0
CBLOCK 337 2 973
CRET 0006H
CARGUMENT 46H 0002H 0028H "timeout_period_mclks" 02H 00H 01H
CARGUMENT 46H 0001H 0016H "vcsel_period_pclks" 02H 00H 00H
CLOCAL 4AH 0004H 0000H 0002H "macro_period_ns" 02H 00H 02H

;;  return ((timeout_period_mclks * macro_period_ns) + 500) / 1000;
CLINEA 0000H 0001H 03D0H 0003H 0041H
	mov	r0,	r2
	mov	r1,	#00h
	mov	er2,	#0 
	push	xr0
	mov	r0,	#00h
	mov	r1,	#02fh
	mov	er2,	#58
	push	xr0
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	add	r0,	#0f4h
	addc	r1,	#01h
	addc	r2,	#00h
	addc	r3,	#00h
	push	xr0
	mov	r0,	#0e8h
	mov	r1,	#03h
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr4
	mov	er0,	er8
	push	xr0
	push	xr4
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	add	r0,	#0f4h
	addc	r1,	#01h
	addc	r2,	#00h
	addc	r3,	#00h
	push	xr0
	mov	r0,	#0e8h
	mov	r1,	#03h
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0
CBLOCKEND 337 2 977

;;}
CLINEA 0000H 0000H 03D1H 0001H 0001H
	pop	er8
	pop	xr4
	pop	pc
CBLOCKEND 337 1 977
CFUNCTIONEND 337


	rseg $$timeoutMicrosecondsToMclks$VL53L0X
CFUNCTION 338

_timeoutMicrosecondsToMclks	:
CBLOCK 338 1 981

;;uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks){
CLINEA 0000H 0001H 03D5H 0001H 005CH
;;*****************************************
;;	register/stack information
;;*****************************************
	_vcsel_period_pclks$4	set	4
;;*****************************************

	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-012
	push	xr4
CBLOCK 338 2 981
CRET 0012H
CARGUMENT 46H 0004H 2524H "timeout_period_us" 02H 00H 02H
CARGUMENT 42H 0001H 0004H "vcsel_period_pclks" 02H 00H 00H
CLOCAL 4AH 0004H 0000H 0002H "macro_period_ns" 02H 00H 02H

;;  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
CLINEA 0000H 0001H 03D8H 0003H 0052H
	push	xr0
	mov	r0,	#0e8h
	mov	r1,	#03h
	mov	er2,	#0 
	push	xr0
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	-8[fp]
	st	er2,	-6[fp]
	l	r0,	_vcsel_period_pclks$4[fp]
	mov	r1,	#00h
	mov	er2,	#0 
	push	xr0
	mov	r0,	#00h
	mov	r1,	#02fh
	mov	er2,	#58
	push	xr0
	bl	__lmulu8sw
	add	sp,	#4 
	pop	xr0
	add	r0,	#0f4h
	addc	r1,	#01h
	addc	r2,	#00h
	addc	r3,	#00h
	push	xr0
	mov	r0,	#0e8h
	mov	r1,	#03h
	mov	er2,	#0 
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr4
	mov	er2,	er6
	mov	er0,	er4
	srlc	r0,	#01h
	srlc	r1,	#01h
	srlc	r2,	#01h
	srl	r3,	#01h
	st	er4,	-12[fp]
	st	er6,	-10[fp]
	push	xr0
	l	er0,	-8[fp]
	l	er2,	-6[fp]
	mov	er4,	er0
	mov	er6,	er2
	pop	xr0
	add	er0,	er4
	addc	r2,	r6
	addc	r3,	r7
	push	xr0
	l	er0,	-12[fp]
	l	er2,	-10[fp]
	push	xr0
	bl	__uldivu8sw
	add	sp,	#4 
	pop	xr0
CBLOCKEND 338 2 985

;;}
CLINEA 0000H 0000H 03D9H 0001H 0001H
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 338 1 985
CFUNCTIONEND 338


	rseg $$performSingleRefCalibration$VL53L0X
CFUNCTION 334

_performSingleRefCalibration	:
CBLOCK 334 1 989

;;bool performSingleRefCalibration(uint8_t vhv_init_byte){
CLINEA 0000H 0001H 03DDH 0001H 0038H
;;*****************************************
;;	register/stack information
;;*****************************************
;;*****************************************

	push	lr
CBLOCK 334 2 989
CRET 0000H
CARGUMENT 46H 0001H 0014H "vhv_init_byte" 02H 00H 00H

;;  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
CLINEA 0000H 0001H 03DEH 0003H 0059H
	mov	r1,	r0
	or	r1,	#01h
	mov	r0,	#00h
	bl	_writeReg

;;  startTimeout();
CLINEA 0000H 0000H 03E0H 0003H 0011H
	bl	_millis
	st	er0,	NEAR _timeout_start_ms

;;  }
CLINEA 0000H 0000H 03E3H 0003H 0003H
_$L211 :

;;  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){
CLINEA 0000H 0001H 03E1H 0003H 0039H
	mov	r0,	#013h
	bl	_readReg
	and	r0,	#07h
	bne	_$L201
CBLOCK 334 3 993

;;    if (checkTimeoutExpired()) { return false; }
CLINEA 0000H 0000H 03E2H 0005H 0030H
	l	er0,	NEAR _io_timeout
	cmp	r0,	#00h
	cmpc	r1,	#00h
	ble	_$L211
	bl	_millis
	l	er2,	NEAR _timeout_start_ms
	sub	r0,	r2
	subc	r1,	r3
	l	er2,	NEAR _io_timeout
	cmp	er0,	er2
	ble	_$L211
CBLOCK 334 4 994
	mov	r0,	#00h
CBLOCKEND 334 4 994
CBLOCKEND 334 2 1002

;;}
CLINEA 0000H 0001H 03EAH 0001H 0001H
_$L199 :
	pop	pc

;;    if (checkTimeoutExpired()) { return false; }
CLINEA 0000H 0000H 03E2H 0005H 0030H
CBLOCKEND 334 3 995

;;  }
CLINEA 0000H 0000H 03E3H 0003H 0003H
_$L201 :

;;  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
CLINEA 0000H 0001H 03E5H 0003H 0029H
	mov	r1,	#01h
	mov	r0,	#0bh
	bl	_writeReg

;;  writeReg(SYSRANGE_START, 0x00);
CLINEA 0000H 0001H 03E7H 0003H 0021H
	mov	r1,	#00h
	mov	r0,	#00h
	bl	_writeReg

;;  return true;
CLINEA 0000H 0001H 03E9H 0003H 000EH
	mov	r0,	#01h
	bal	_$L199
CBLOCKEND 334 1 1002
CFUNCTIONEND 334

	public _stopContinuous
	public _timeoutOccurred
	public _writeReg
	public _setVcselPulsePeriod
	public _getVcselPulsePeriod
	public _writeMulti
	public _performSingleRefCalibration
	public _init_VL53L0X
	public _startContinuous
	public _writeReg16Bit
	public _getSignalRateLimit
	public _readRangeSingleMillimeters
	public _setSignalRateLimit
	public _writeReg32Bit
	public _readMulti
	public _getSpadInfo
	public _setMeasurementTimingBudget
	public _getSequenceStepTimeouts
	public _readReg32Bit
	public _readReg
	public _readRangeContinuousMillimeters
	public _getSequenceStepEnables
	public _setAddress
	public _readReg16Bit
	public _getMeasurementTimingBudget
	public _VL53L0X
	_measurement_timing_budget_us comm data 04h #00h
	_address comm data 01h #00h
	_timeout_start_ms comm data 02h #00h
	_io_timeout comm data 02h #00h
	_stop_variable comm data 01h #00h
	_did_timeout comm data 01h #00h
	_last_status comm data 01h #00h
	extrn code near : _millis
	extrn table near : _Serial
	extrn table near : _Wire
	extrn code near : _main

	rseg $$TAB$$S6$VL53L0X
$$S6 :
	DB	"init VL53L0X!", 00H

	rseg $$TAB$$S7$VL53L0X
$$S7 :
	DB	"\x09ID!", 00H

	rseg $$TAB$$S10$VL53L0X
$$S10 :
	DB	"Cannot check model ID!", 00H

	rseg $$TAB$$S11$VL53L0X
$$S11 :
	DB	"success check model ID!", 00H

	rseg $$TAB$$S14$VL53L0X
$$S14 :
	DB	"Set standard mode!", 00H
	extrn code : __imodu8sw
	extrn code : __lmulu8sw
	extrn code : __uldivu8sw
	extrn code : __fcmpu8sw
	extrn code : __fmulu8sw
	extrn code : __fdivu8sw
	extrn code : __ftolu8sw
	extrn code : __ftodu8sw
	extrn code : __dcmpu8sw
	extrn code : __fuldu8sw

	end
